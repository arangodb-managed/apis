//
// DISCLAIMER
//
// Copyright 2020-2022 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: billing.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BillingService_GetAPIVersion_FullMethodName               = "/arangodb.cloud.billing.v1.BillingService/GetAPIVersion"
	BillingService_GetOrganizationBillingFlags_FullMethodName = "/arangodb.cloud.billing.v1.BillingService/GetOrganizationBillingFlags"
	BillingService_ListInvoices_FullMethodName                = "/arangodb.cloud.billing.v1.BillingService/ListInvoices"
	BillingService_GetInvoice_FullMethodName                  = "/arangodb.cloud.billing.v1.BillingService/GetInvoice"
	BillingService_GetPreliminaryInvoice_FullMethodName       = "/arangodb.cloud.billing.v1.BillingService/GetPreliminaryInvoice"
	BillingService_GetInvoicePDF_FullMethodName               = "/arangodb.cloud.billing.v1.BillingService/GetInvoicePDF"
	BillingService_ListPaymentProviders_FullMethodName        = "/arangodb.cloud.billing.v1.BillingService/ListPaymentProviders"
	BillingService_GetPaymentProvider_FullMethodName          = "/arangodb.cloud.billing.v1.BillingService/GetPaymentProvider"
	BillingService_ListPaymentMethods_FullMethodName          = "/arangodb.cloud.billing.v1.BillingService/ListPaymentMethods"
	BillingService_GetPaymentMethod_FullMethodName            = "/arangodb.cloud.billing.v1.BillingService/GetPaymentMethod"
	BillingService_PreparePaymentMethod_FullMethodName        = "/arangodb.cloud.billing.v1.BillingService/PreparePaymentMethod"
	BillingService_CreatePaymentMethod_FullMethodName         = "/arangodb.cloud.billing.v1.BillingService/CreatePaymentMethod"
	BillingService_UpdatePaymentMethod_FullMethodName         = "/arangodb.cloud.billing.v1.BillingService/UpdatePaymentMethod"
	BillingService_DeletePaymentMethod_FullMethodName         = "/arangodb.cloud.billing.v1.BillingService/DeletePaymentMethod"
	BillingService_GetDefaultPaymentMethod_FullMethodName     = "/arangodb.cloud.billing.v1.BillingService/GetDefaultPaymentMethod"
	BillingService_SetDefaultPaymentMethod_FullMethodName     = "/arangodb.cloud.billing.v1.BillingService/SetDefaultPaymentMethod"
	BillingService_GetBillingConfig_FullMethodName            = "/arangodb.cloud.billing.v1.BillingService/GetBillingConfig"
	BillingService_SetBillingConfig_FullMethodName            = "/arangodb.cloud.billing.v1.BillingService/SetBillingConfig"
	BillingService_GetAvailableCredits_FullMethodName         = "/arangodb.cloud.billing.v1.BillingService/GetAvailableCredits"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BillingService is the API used to fetch billing information.
type BillingServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch the billing specific flags for the organization identified by the given ID.
	// Required permissions:
	// - billing.organization.get
	GetOrganizationBillingFlags(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*OrganizationBillingFlags, error)
	// Fetch all Invoice resources for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - billing.invoice.list on the organization identified by the given organization ID
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*InvoiceList, error)
	// Fetch a specific Invoice identified by the given ID.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoice(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Invoice, error)
	// Fetch a preliminary Invoice identified by the given organization ID.
	// The preliminary invoice contains all costs from the last invoice (if any, otherwise the creation date of the organization) until last night (midnight UTC).
	// Required permissions:
	// - billing.invoice.get-preliminary on the organization identified by the given organization ID
	GetPreliminaryInvoice(ctx context.Context, in *GetPreliminaryInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error)
	// Fetch a specific Invoice identified by the given ID as PDF document.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoicePDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PDFDocument, error)
	// Fetch all payment providers that are usable for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentprovider.list on the organization identified by the given context ID
	ListPaymentProviders(ctx context.Context, in *ListPaymentProvidersRequest, opts ...grpc.CallOption) (*PaymentProviderList, error)
	// Fetch a specific payment provider identified by the given ID.
	// Required permissions:
	// - None
	GetPaymentProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentProvider, error)
	// Fetch all payment methods that are configured for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentmethod.list on the organization identified by the given context ID
	ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*PaymentMethodList, error)
	// Fetch a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.get on the organization that owns the payment method
	//     which is identified by the given ID
	GetPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Prepare the payment provider for creating a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns future payment method.
	PreparePaymentMethod(ctx context.Context, in *PreparePaymentMethodRequest, opts ...grpc.CallOption) (*PreparedPaymentMethod, error)
	// Create a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns the given payment method.
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Update a specific payment method.
	// Note that only name, description & valid period are updated.
	// Required permissions:
	// - billing.paymentmethod.update on the organization that owns the given payment method.
	UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Delete a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.delete on the organization that owns the given payment method
	//     which is identified by the given ID.
	DeletePaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch the default PaymentMethod for an organization identified by the given ID.
	// Required permissions:
	// - billing.paymentmethod.get-default on the organization that is identified by the given ID
	GetDefaultPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Update the default PaymentMethod for an organization identified by the
	// given organization ID, to the payment method identified by the given payment method ID.
	// Required permissions:
	// - billing.paymentmethod.set-default on the organization identified by the given organization ID
	SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch the billing configuration of an organization identified by the given ID.
	// Required permissions:
	// - billing.config.get on the organization that is identified by the given ID
	GetBillingConfig(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*BillingConfig, error)
	// Update the billing configuration for an organization identified by the
	// given organization ID.
	// Required permissions:
	// - billing.config.set on the organization identified by the given organization ID
	SetBillingConfig(ctx context.Context, in *SetBillingConfigRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Get available credits for an organization identified by organization_id
	// Required permissions:
	// - billing.credits.get_available on the organization identified by the given organization ID
	GetAvailableCredits(ctx context.Context, in *GetAvailableCreditsRequest, opts ...grpc.CallOption) (*AvailableCredits, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, BillingService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetOrganizationBillingFlags(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*OrganizationBillingFlags, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationBillingFlags)
	err := c.cc.Invoke(ctx, BillingService_GetOrganizationBillingFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*InvoiceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceList)
	err := c.cc.Invoke(ctx, BillingService_ListInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoice(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoice)
	err := c.cc.Invoke(ctx, BillingService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPreliminaryInvoice(ctx context.Context, in *GetPreliminaryInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoice)
	err := c.cc.Invoke(ctx, BillingService_GetPreliminaryInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicePDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PDFDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PDFDocument)
	err := c.cc.Invoke(ctx, BillingService_GetInvoicePDF_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListPaymentProviders(ctx context.Context, in *ListPaymentProvidersRequest, opts ...grpc.CallOption) (*PaymentProviderList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentProviderList)
	err := c.cc.Invoke(ctx, BillingService_ListPaymentProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPaymentProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentProvider)
	err := c.cc.Invoke(ctx, BillingService_GetPaymentProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*PaymentMethodList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethodList)
	err := c.cc.Invoke(ctx, BillingService_ListPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, BillingService_GetPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) PreparePaymentMethod(ctx context.Context, in *PreparePaymentMethodRequest, opts ...grpc.CallOption) (*PreparedPaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreparedPaymentMethod)
	err := c.cc.Invoke(ctx, BillingService_PreparePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, BillingService_CreatePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, BillingService_UpdatePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeletePaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, BillingService_DeletePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetDefaultPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, BillingService_GetDefaultPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, BillingService_SetDefaultPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetBillingConfig(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*BillingConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingConfig)
	err := c.cc.Invoke(ctx, BillingService_GetBillingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) SetBillingConfig(ctx context.Context, in *SetBillingConfigRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, BillingService_SetBillingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetAvailableCredits(ctx context.Context, in *GetAvailableCreditsRequest, opts ...grpc.CallOption) (*AvailableCredits, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailableCredits)
	err := c.cc.Invoke(ctx, BillingService_GetAvailableCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility.
//
// BillingService is the API used to fetch billing information.
type BillingServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch the billing specific flags for the organization identified by the given ID.
	// Required permissions:
	// - billing.organization.get
	GetOrganizationBillingFlags(context.Context, *v1.IDOptions) (*OrganizationBillingFlags, error)
	// Fetch all Invoice resources for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - billing.invoice.list on the organization identified by the given organization ID
	ListInvoices(context.Context, *ListInvoicesRequest) (*InvoiceList, error)
	// Fetch a specific Invoice identified by the given ID.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoice(context.Context, *v1.IDOptions) (*Invoice, error)
	// Fetch a preliminary Invoice identified by the given organization ID.
	// The preliminary invoice contains all costs from the last invoice (if any, otherwise the creation date of the organization) until last night (midnight UTC).
	// Required permissions:
	// - billing.invoice.get-preliminary on the organization identified by the given organization ID
	GetPreliminaryInvoice(context.Context, *GetPreliminaryInvoiceRequest) (*Invoice, error)
	// Fetch a specific Invoice identified by the given ID as PDF document.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoicePDF(context.Context, *v1.IDOptions) (*PDFDocument, error)
	// Fetch all payment providers that are usable for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentprovider.list on the organization identified by the given context ID
	ListPaymentProviders(context.Context, *ListPaymentProvidersRequest) (*PaymentProviderList, error)
	// Fetch a specific payment provider identified by the given ID.
	// Required permissions:
	// - None
	GetPaymentProvider(context.Context, *v1.IDOptions) (*PaymentProvider, error)
	// Fetch all payment methods that are configured for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentmethod.list on the organization identified by the given context ID
	ListPaymentMethods(context.Context, *ListPaymentMethodsRequest) (*PaymentMethodList, error)
	// Fetch a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.get on the organization that owns the payment method
	//     which is identified by the given ID
	GetPaymentMethod(context.Context, *v1.IDOptions) (*PaymentMethod, error)
	// Prepare the payment provider for creating a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns future payment method.
	PreparePaymentMethod(context.Context, *PreparePaymentMethodRequest) (*PreparedPaymentMethod, error)
	// Create a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns the given payment method.
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*PaymentMethod, error)
	// Update a specific payment method.
	// Note that only name, description & valid period are updated.
	// Required permissions:
	// - billing.paymentmethod.update on the organization that owns the given payment method.
	UpdatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error)
	// Delete a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.delete on the organization that owns the given payment method
	//     which is identified by the given ID.
	DeletePaymentMethod(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Fetch the default PaymentMethod for an organization identified by the given ID.
	// Required permissions:
	// - billing.paymentmethod.get-default on the organization that is identified by the given ID
	GetDefaultPaymentMethod(context.Context, *v1.IDOptions) (*PaymentMethod, error)
	// Update the default PaymentMethod for an organization identified by the
	// given organization ID, to the payment method identified by the given payment method ID.
	// Required permissions:
	// - billing.paymentmethod.set-default on the organization identified by the given organization ID
	SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodRequest) (*v1.Empty, error)
	// Fetch the billing configuration of an organization identified by the given ID.
	// Required permissions:
	// - billing.config.get on the organization that is identified by the given ID
	GetBillingConfig(context.Context, *v1.IDOptions) (*BillingConfig, error)
	// Update the billing configuration for an organization identified by the
	// given organization ID.
	// Required permissions:
	// - billing.config.set on the organization identified by the given organization ID
	SetBillingConfig(context.Context, *SetBillingConfigRequest) (*v1.Empty, error)
	// Get available credits for an organization identified by organization_id
	// Required permissions:
	// - billing.credits.get_available on the organization identified by the given organization ID
	GetAvailableCredits(context.Context, *GetAvailableCreditsRequest) (*AvailableCredits, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBillingServiceServer struct{}

func (UnimplementedBillingServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedBillingServiceServer) GetOrganizationBillingFlags(context.Context, *v1.IDOptions) (*OrganizationBillingFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationBillingFlags not implemented")
}
func (UnimplementedBillingServiceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*InvoiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoice(context.Context, *v1.IDOptions) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetPreliminaryInvoice(context.Context, *GetPreliminaryInvoiceRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreliminaryInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicePDF(context.Context, *v1.IDOptions) (*PDFDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicePDF not implemented")
}
func (UnimplementedBillingServiceServer) ListPaymentProviders(context.Context, *ListPaymentProvidersRequest) (*PaymentProviderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentProviders not implemented")
}
func (UnimplementedBillingServiceServer) GetPaymentProvider(context.Context, *v1.IDOptions) (*PaymentProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentProvider not implemented")
}
func (UnimplementedBillingServiceServer) ListPaymentMethods(context.Context, *ListPaymentMethodsRequest) (*PaymentMethodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (UnimplementedBillingServiceServer) GetPaymentMethod(context.Context, *v1.IDOptions) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethod not implemented")
}
func (UnimplementedBillingServiceServer) PreparePaymentMethod(context.Context, *PreparePaymentMethodRequest) (*PreparedPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparePaymentMethod not implemented")
}
func (UnimplementedBillingServiceServer) CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMethod not implemented")
}
func (UnimplementedBillingServiceServer) UpdatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (UnimplementedBillingServiceServer) DeletePaymentMethod(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (UnimplementedBillingServiceServer) GetDefaultPaymentMethod(context.Context, *v1.IDOptions) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPaymentMethod not implemented")
}
func (UnimplementedBillingServiceServer) SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPaymentMethod not implemented")
}
func (UnimplementedBillingServiceServer) GetBillingConfig(context.Context, *v1.IDOptions) (*BillingConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingConfig not implemented")
}
func (UnimplementedBillingServiceServer) SetBillingConfig(context.Context, *SetBillingConfigRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBillingConfig not implemented")
}
func (UnimplementedBillingServiceServer) GetAvailableCredits(context.Context, *GetAvailableCreditsRequest) (*AvailableCredits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCredits not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}
func (UnimplementedBillingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBillingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetOrganizationBillingFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetOrganizationBillingFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetOrganizationBillingFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetOrganizationBillingFlags(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoice(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPreliminaryInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreliminaryInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPreliminaryInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetPreliminaryInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPreliminaryInvoice(ctx, req.(*GetPreliminaryInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicePDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoicePDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoicePDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoicePDF(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListPaymentProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListPaymentProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListPaymentProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListPaymentProviders(ctx, req.(*ListPaymentProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPaymentProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPaymentProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetPaymentProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPaymentProvider(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListPaymentMethods(ctx, req.(*ListPaymentMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPaymentMethod(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_PreparePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).PreparePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_PreparePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).PreparePaymentMethod(ctx, req.(*PreparePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreatePaymentMethod(ctx, req.(*CreatePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdatePaymentMethod(ctx, req.(*PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeletePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeletePaymentMethod(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetDefaultPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetDefaultPaymentMethod(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_SetDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SetDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_SetDefaultPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SetDefaultPaymentMethod(ctx, req.(*SetDefaultPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetBillingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetBillingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetBillingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetBillingConfig(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_SetBillingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBillingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SetBillingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_SetBillingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SetBillingConfig(ctx, req.(*SetBillingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetAvailableCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetAvailableCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetAvailableCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetAvailableCredits(ctx, req.(*GetAvailableCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.billing.v1.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _BillingService_GetAPIVersion_Handler,
		},
		{
			MethodName: "GetOrganizationBillingFlags",
			Handler:    _BillingService_GetOrganizationBillingFlags_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _BillingService_ListInvoices_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _BillingService_GetInvoice_Handler,
		},
		{
			MethodName: "GetPreliminaryInvoice",
			Handler:    _BillingService_GetPreliminaryInvoice_Handler,
		},
		{
			MethodName: "GetInvoicePDF",
			Handler:    _BillingService_GetInvoicePDF_Handler,
		},
		{
			MethodName: "ListPaymentProviders",
			Handler:    _BillingService_ListPaymentProviders_Handler,
		},
		{
			MethodName: "GetPaymentProvider",
			Handler:    _BillingService_GetPaymentProvider_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _BillingService_ListPaymentMethods_Handler,
		},
		{
			MethodName: "GetPaymentMethod",
			Handler:    _BillingService_GetPaymentMethod_Handler,
		},
		{
			MethodName: "PreparePaymentMethod",
			Handler:    _BillingService_PreparePaymentMethod_Handler,
		},
		{
			MethodName: "CreatePaymentMethod",
			Handler:    _BillingService_CreatePaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _BillingService_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _BillingService_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "GetDefaultPaymentMethod",
			Handler:    _BillingService_GetDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "SetDefaultPaymentMethod",
			Handler:    _BillingService_SetDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "GetBillingConfig",
			Handler:    _BillingService_GetBillingConfig_Handler,
		},
		{
			MethodName: "SetBillingConfig",
			Handler:    _BillingService_SetBillingConfig_Handler,
		},
		{
			MethodName: "GetAvailableCredits",
			Handler:    _BillingService_GetAvailableCredits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}
