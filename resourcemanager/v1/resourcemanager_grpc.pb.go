//
// DISCLAIMER
//
// Copyright 2020-2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: resourcemanager.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceManagerService_GetAPIVersion_FullMethodName                    = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetAPIVersion"
	ResourceManagerService_ListOrganizations_FullMethodName                = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListOrganizations"
	ResourceManagerService_GetOrganization_FullMethodName                  = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetOrganization"
	ResourceManagerService_CreateOrganization_FullMethodName               = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/CreateOrganization"
	ResourceManagerService_UpdateOrganization_FullMethodName               = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/UpdateOrganization"
	ResourceManagerService_DeleteOrganization_FullMethodName               = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/DeleteOrganization"
	ResourceManagerService_ListOrganizationMembers_FullMethodName          = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListOrganizationMembers"
	ResourceManagerService_AddOrganizationMembers_FullMethodName           = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/AddOrganizationMembers"
	ResourceManagerService_UpdateOrganizationMembers_FullMethodName        = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/UpdateOrganizationMembers"
	ResourceManagerService_DeleteOrganizationMembers_FullMethodName        = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/DeleteOrganizationMembers"
	ResourceManagerService_IsMemberOfOrganization_FullMethodName           = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/IsMemberOfOrganization"
	ResourceManagerService_ListOrganizationQuotas_FullMethodName           = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListOrganizationQuotas"
	ResourceManagerService_ListProjects_FullMethodName                     = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListProjects"
	ResourceManagerService_GetProject_FullMethodName                       = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetProject"
	ResourceManagerService_CreateProject_FullMethodName                    = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/CreateProject"
	ResourceManagerService_UpdateProject_FullMethodName                    = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/UpdateProject"
	ResourceManagerService_DeleteProject_FullMethodName                    = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/DeleteProject"
	ResourceManagerService_ListProjectQuotas_FullMethodName                = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListProjectQuotas"
	ResourceManagerService_ListEvents_FullMethodName                       = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListEvents"
	ResourceManagerService_ListOrganizationInvites_FullMethodName          = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListOrganizationInvites"
	ResourceManagerService_ListMyOrganizationInvites_FullMethodName        = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListMyOrganizationInvites"
	ResourceManagerService_GetOrganizationInvite_FullMethodName            = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetOrganizationInvite"
	ResourceManagerService_CreateOrganizationInvite_FullMethodName         = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/CreateOrganizationInvite"
	ResourceManagerService_DeleteOrganizationInvite_FullMethodName         = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/DeleteOrganizationInvite"
	ResourceManagerService_AcceptOrganizationInvite_FullMethodName         = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/AcceptOrganizationInvite"
	ResourceManagerService_RejectOrganizationInvite_FullMethodName         = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/RejectOrganizationInvite"
	ResourceManagerService_ListQuotaDescriptions_FullMethodName            = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/ListQuotaDescriptions"
	ResourceManagerService_GetTermsAndConditions_FullMethodName            = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetTermsAndConditions"
	ResourceManagerService_GetCurrentTermsAndConditions_FullMethodName     = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetCurrentTermsAndConditions"
	ResourceManagerService_GetDataProcessingAddendum_FullMethodName        = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetDataProcessingAddendum"
	ResourceManagerService_GetCurrentDataProcessingAddendum_FullMethodName = "/arangodb.cloud.resourcemanager.v1.ResourceManagerService/GetCurrentDataProcessingAddendum"
)

// ResourceManagerServiceClient is the client API for ResourceManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ResourceManagerService is the API used to configure basic resource objects.
type ResourceManagerServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all organizations that the authenticated user is a member of.
	// Required permissions:
	// - None
	ListOrganizations(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*OrganizationList, error)
	// Fetch an organization by its id.
	// The authenticated user must be a member of the organization.
	// Required permissions:
	// - None
	GetOrganization(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Organization, error)
	// Create a new organization
	// Required permissions:
	// - None
	CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	// Update an organization
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	UpdateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	// Delete an organization
	// Note that organization are never really removed.
	// Instead their is_deleted field is set to true.
	// Required permissions:
	// - resourcemanager.organization.delete on the organization
	DeleteOrganization(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Get a list of members of the organization identified by the given context ID.
	// Required permissions:
	// - resourcemanager.organization.get on the organization
	ListOrganizationMembers(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*MemberList, error)
	// Add one or more members to an organization.
	// If there are members (in the request arguments) that are already member of the
	// organization an AlreadyExists error is returned.
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	AddOrganizationMembers(ctx context.Context, in *OrganizationMembersRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Update the ownership flag of one or more members of an organization.
	// If there are members (in the request arguments) that are not yet member of
	// the organization, an InvalidArgument error is returned.
	// If the request would result in the last owner no longer being an owner,
	// an InvalidArgument error is returned.
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	UpdateOrganizationMembers(ctx context.Context, in *OrganizationMembersRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Remove one or more members from an organization.
	// If the request would result in the last owner being removed as member
	// of the organization, an InvalidArgument error is returned.
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	DeleteOrganizationMembers(ctx context.Context, in *OrganizationMembersRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Is the user identified by the given user ID a member
	// of the organization identified by the given organization ID.
	// Required permissions:
	// - resourcemanager.organization.get on the organization, unless the requested user is identical to the authenticated user.
	// Note that if the identified user or organization does not exist, no is returned.
	IsMemberOfOrganization(ctx context.Context, in *IsMemberOfOrganizationRequest, opts ...grpc.CallOption) (*IsMemberOfOrganizationResponse, error)
	// Get a list of quota values for the organization identified by the given context ID.
	// If a quota is not specified on organization level, a (potentially tier specific) default
	// value is returned.
	// Required permissions:
	// - resourcemanager.organization.get on the organization
	ListOrganizationQuotas(ctx context.Context, in *ListQuotasRequest, opts ...grpc.CallOption) (*QuotaList, error)
	// Fetch all projects in the organization identified by the given context ID.
	// The authenticated user must be a member of the organization identifier by the given context ID.
	// Required permissions:
	// - resourcemanager.project.list on the organization identified by the given context ID
	ListProjects(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*ProjectList, error)
	// Fetch a project by its id.
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.get on the project identified by the given ID
	GetProject(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Project, error)
	// Create a new project
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.create on the organization that owns the project
	CreateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	// Update a project
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.update on the project
	UpdateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	// Delete a project
	// Note that project are initially only marked for deleted.
	// Once all their resources are removed the project itself is deleted
	// and cannot be restored.
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.delete on the project
	DeleteProject(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Get a list of quota values for the project identified by the given context ID.
	// If a quota is not specified on project level, a value from organization level
	// is returned.
	// Required permissions:
	// - resourcemanager.project.get on the project
	ListProjectQuotas(ctx context.Context, in *ListQuotasRequest, opts ...grpc.CallOption) (*QuotaList, error)
	// Fetch all events in the organization identified by the given context ID.
	// The authenticated user must be a member of the organization identifier by the given context ID.
	// Required permissions:
	// - resourcemanager.event.list on the organization identified by the given context ID
	// Note that this method uses a POST method because the list options contains a repeated field.
	ListEvents(ctx context.Context, in *ListEventOptions, opts ...grpc.CallOption) (*EventList, error)
	// Fetch all organization invites in the organization identified by the given context ID.
	// The authenticated user must be a member of the organization identifier by the given context ID.
	// Required permissions:
	// - resourcemanager.organization-invite.list on the invite.
	ListOrganizationInvites(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*OrganizationInviteList, error)
	// Fetch all organization invites for the email address of the authenticated user.
	// Required permissions:
	// - None
	ListMyOrganizationInvites(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*OrganizationInviteList, error)
	// Fetch an organization invite by its id.
	// The authenticated user must be a member of the organization that the invite is for.
	// Required permissions:
	// - resourcemanager.organization-invite.get on the invite.
	GetOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*OrganizationInvite, error)
	// Create a new organization invite.
	// The authenticated user must be a member of the organization that the invite is for.
	// Required permissions:
	// - resourcemanager.organization-invite.create on the organization that the invite is for.
	CreateOrganizationInvite(ctx context.Context, in *OrganizationInvite, opts ...grpc.CallOption) (*OrganizationInvite, error)
	// Delete an organization invite
	// The authenticated user must be a member of the organization that the invite is for.
	// Required permissions:
	// - resourcemanager.organization-invite.delete on the invite
	DeleteOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Accept an organization invite
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None
	AcceptOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Reject an organization invite
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None
	RejectOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch descriptions for all quota kinds know by the platform.
	// Required permissions:
	// - None
	ListQuotaDescriptions(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*QuotaDescriptionList, error)
	// Fetch a specific version of the Terms & Conditions.
	// Required permissions:
	// - None
	GetTermsAndConditions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*TermsAndConditions, error)
	// Fetch the current version of the Terms & Conditions for the organization
	// identified by the given (optional) ID.
	// Required permissions:
	// - None If ID is empty.
	// - resourcemanager.organization.get If ID is not empty.
	GetCurrentTermsAndConditions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*TermsAndConditions, error)
	// Fetch a specific version of the Data Processing Addendum.
	// Required permissions:
	// - None
	GetDataProcessingAddendum(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DataProcessingAddendum, error)
	// Fetch the current version of the Data Processing Addendum for the organization
	// identified by the given (optional) ID.
	// Required permissions:
	// - None If ID is empty.
	// - resourcemanager.organization.get If ID is not empty.
	GetCurrentDataProcessingAddendum(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DataProcessingAddendum, error)
}

type resourceManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerServiceClient(cc grpc.ClientConnInterface) ResourceManagerServiceClient {
	return &resourceManagerServiceClient{cc}
}

func (c *resourceManagerServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListOrganizations(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*OrganizationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) GetOrganization(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, ResourceManagerService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) UpdateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, ResourceManagerService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) DeleteOrganization(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListOrganizationMembers(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*MemberList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) AddOrganizationMembers(ctx context.Context, in *OrganizationMembersRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_AddOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) UpdateOrganizationMembers(ctx context.Context, in *OrganizationMembersRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_UpdateOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) DeleteOrganizationMembers(ctx context.Context, in *OrganizationMembersRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_DeleteOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) IsMemberOfOrganization(ctx context.Context, in *IsMemberOfOrganizationRequest, opts ...grpc.CallOption) (*IsMemberOfOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMemberOfOrganizationResponse)
	err := c.cc.Invoke(ctx, ResourceManagerService_IsMemberOfOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListOrganizationQuotas(ctx context.Context, in *ListQuotasRequest, opts ...grpc.CallOption) (*QuotaList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListOrganizationQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListProjects(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*ProjectList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) GetProject(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) CreateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, ResourceManagerService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) UpdateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, ResourceManagerService_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) DeleteProject(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListProjectQuotas(ctx context.Context, in *ListQuotasRequest, opts ...grpc.CallOption) (*QuotaList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListProjectQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListEvents(ctx context.Context, in *ListEventOptions, opts ...grpc.CallOption) (*EventList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListOrganizationInvites(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*OrganizationInviteList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationInviteList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListOrganizationInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListMyOrganizationInvites(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*OrganizationInviteList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationInviteList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListMyOrganizationInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) GetOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*OrganizationInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationInvite)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) CreateOrganizationInvite(ctx context.Context, in *OrganizationInvite, opts ...grpc.CallOption) (*OrganizationInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationInvite)
	err := c.cc.Invoke(ctx, ResourceManagerService_CreateOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) DeleteOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_DeleteOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) AcceptOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_AcceptOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) RejectOrganizationInvite(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, ResourceManagerService_RejectOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) ListQuotaDescriptions(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*QuotaDescriptionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaDescriptionList)
	err := c.cc.Invoke(ctx, ResourceManagerService_ListQuotaDescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) GetTermsAndConditions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*TermsAndConditions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TermsAndConditions)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetTermsAndConditions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) GetCurrentTermsAndConditions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*TermsAndConditions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TermsAndConditions)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetCurrentTermsAndConditions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) GetDataProcessingAddendum(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DataProcessingAddendum, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataProcessingAddendum)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetDataProcessingAddendum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) GetCurrentDataProcessingAddendum(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DataProcessingAddendum, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataProcessingAddendum)
	err := c.cc.Invoke(ctx, ResourceManagerService_GetCurrentDataProcessingAddendum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServiceServer is the server API for ResourceManagerService service.
// All implementations must embed UnimplementedResourceManagerServiceServer
// for forward compatibility.
//
// ResourceManagerService is the API used to configure basic resource objects.
type ResourceManagerServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all organizations that the authenticated user is a member of.
	// Required permissions:
	// - None
	ListOrganizations(context.Context, *v1.ListOptions) (*OrganizationList, error)
	// Fetch an organization by its id.
	// The authenticated user must be a member of the organization.
	// Required permissions:
	// - None
	GetOrganization(context.Context, *v1.IDOptions) (*Organization, error)
	// Create a new organization
	// Required permissions:
	// - None
	CreateOrganization(context.Context, *Organization) (*Organization, error)
	// Update an organization
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	UpdateOrganization(context.Context, *Organization) (*Organization, error)
	// Delete an organization
	// Note that organization are never really removed.
	// Instead their is_deleted field is set to true.
	// Required permissions:
	// - resourcemanager.organization.delete on the organization
	DeleteOrganization(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Get a list of members of the organization identified by the given context ID.
	// Required permissions:
	// - resourcemanager.organization.get on the organization
	ListOrganizationMembers(context.Context, *v1.ListOptions) (*MemberList, error)
	// Add one or more members to an organization.
	// If there are members (in the request arguments) that are already member of the
	// organization an AlreadyExists error is returned.
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	AddOrganizationMembers(context.Context, *OrganizationMembersRequest) (*v1.Empty, error)
	// Update the ownership flag of one or more members of an organization.
	// If there are members (in the request arguments) that are not yet member of
	// the organization, an InvalidArgument error is returned.
	// If the request would result in the last owner no longer being an owner,
	// an InvalidArgument error is returned.
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	UpdateOrganizationMembers(context.Context, *OrganizationMembersRequest) (*v1.Empty, error)
	// Remove one or more members from an organization.
	// If the request would result in the last owner being removed as member
	// of the organization, an InvalidArgument error is returned.
	// Required permissions:
	// - resourcemanager.organization.update on the organization
	DeleteOrganizationMembers(context.Context, *OrganizationMembersRequest) (*v1.Empty, error)
	// Is the user identified by the given user ID a member
	// of the organization identified by the given organization ID.
	// Required permissions:
	// - resourcemanager.organization.get on the organization, unless the requested user is identical to the authenticated user.
	// Note that if the identified user or organization does not exist, no is returned.
	IsMemberOfOrganization(context.Context, *IsMemberOfOrganizationRequest) (*IsMemberOfOrganizationResponse, error)
	// Get a list of quota values for the organization identified by the given context ID.
	// If a quota is not specified on organization level, a (potentially tier specific) default
	// value is returned.
	// Required permissions:
	// - resourcemanager.organization.get on the organization
	ListOrganizationQuotas(context.Context, *ListQuotasRequest) (*QuotaList, error)
	// Fetch all projects in the organization identified by the given context ID.
	// The authenticated user must be a member of the organization identifier by the given context ID.
	// Required permissions:
	// - resourcemanager.project.list on the organization identified by the given context ID
	ListProjects(context.Context, *v1.ListOptions) (*ProjectList, error)
	// Fetch a project by its id.
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.get on the project identified by the given ID
	GetProject(context.Context, *v1.IDOptions) (*Project, error)
	// Create a new project
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.create on the organization that owns the project
	CreateProject(context.Context, *Project) (*Project, error)
	// Update a project
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.update on the project
	UpdateProject(context.Context, *Project) (*Project, error)
	// Delete a project
	// Note that project are initially only marked for deleted.
	// Once all their resources are removed the project itself is deleted
	// and cannot be restored.
	// The authenticated user must be a member of the organization that owns the project.
	// Required permissions:
	// - resourcemanager.project.delete on the project
	DeleteProject(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Get a list of quota values for the project identified by the given context ID.
	// If a quota is not specified on project level, a value from organization level
	// is returned.
	// Required permissions:
	// - resourcemanager.project.get on the project
	ListProjectQuotas(context.Context, *ListQuotasRequest) (*QuotaList, error)
	// Fetch all events in the organization identified by the given context ID.
	// The authenticated user must be a member of the organization identifier by the given context ID.
	// Required permissions:
	// - resourcemanager.event.list on the organization identified by the given context ID
	// Note that this method uses a POST method because the list options contains a repeated field.
	ListEvents(context.Context, *ListEventOptions) (*EventList, error)
	// Fetch all organization invites in the organization identified by the given context ID.
	// The authenticated user must be a member of the organization identifier by the given context ID.
	// Required permissions:
	// - resourcemanager.organization-invite.list on the invite.
	ListOrganizationInvites(context.Context, *v1.ListOptions) (*OrganizationInviteList, error)
	// Fetch all organization invites for the email address of the authenticated user.
	// Required permissions:
	// - None
	ListMyOrganizationInvites(context.Context, *v1.ListOptions) (*OrganizationInviteList, error)
	// Fetch an organization invite by its id.
	// The authenticated user must be a member of the organization that the invite is for.
	// Required permissions:
	// - resourcemanager.organization-invite.get on the invite.
	GetOrganizationInvite(context.Context, *v1.IDOptions) (*OrganizationInvite, error)
	// Create a new organization invite.
	// The authenticated user must be a member of the organization that the invite is for.
	// Required permissions:
	// - resourcemanager.organization-invite.create on the organization that the invite is for.
	CreateOrganizationInvite(context.Context, *OrganizationInvite) (*OrganizationInvite, error)
	// Delete an organization invite
	// The authenticated user must be a member of the organization that the invite is for.
	// Required permissions:
	// - resourcemanager.organization-invite.delete on the invite
	DeleteOrganizationInvite(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Accept an organization invite
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None
	AcceptOrganizationInvite(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Reject an organization invite
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None
	RejectOrganizationInvite(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Fetch descriptions for all quota kinds know by the platform.
	// Required permissions:
	// - None
	ListQuotaDescriptions(context.Context, *v1.ListOptions) (*QuotaDescriptionList, error)
	// Fetch a specific version of the Terms & Conditions.
	// Required permissions:
	// - None
	GetTermsAndConditions(context.Context, *v1.IDOptions) (*TermsAndConditions, error)
	// Fetch the current version of the Terms & Conditions for the organization
	// identified by the given (optional) ID.
	// Required permissions:
	// - None If ID is empty.
	// - resourcemanager.organization.get If ID is not empty.
	GetCurrentTermsAndConditions(context.Context, *v1.IDOptions) (*TermsAndConditions, error)
	// Fetch a specific version of the Data Processing Addendum.
	// Required permissions:
	// - None
	GetDataProcessingAddendum(context.Context, *v1.IDOptions) (*DataProcessingAddendum, error)
	// Fetch the current version of the Data Processing Addendum for the organization
	// identified by the given (optional) ID.
	// Required permissions:
	// - None If ID is empty.
	// - resourcemanager.organization.get If ID is not empty.
	GetCurrentDataProcessingAddendum(context.Context, *v1.IDOptions) (*DataProcessingAddendum, error)
	mustEmbedUnimplementedResourceManagerServiceServer()
}

// UnimplementedResourceManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceManagerServiceServer struct{}

func (UnimplementedResourceManagerServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListOrganizations(context.Context, *v1.ListOptions) (*OrganizationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedResourceManagerServiceServer) GetOrganization(context.Context, *v1.IDOptions) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedResourceManagerServiceServer) CreateOrganization(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedResourceManagerServiceServer) UpdateOrganization(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedResourceManagerServiceServer) DeleteOrganization(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListOrganizationMembers(context.Context, *v1.ListOptions) (*MemberList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMembers not implemented")
}
func (UnimplementedResourceManagerServiceServer) AddOrganizationMembers(context.Context, *OrganizationMembersRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationMembers not implemented")
}
func (UnimplementedResourceManagerServiceServer) UpdateOrganizationMembers(context.Context, *OrganizationMembersRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMembers not implemented")
}
func (UnimplementedResourceManagerServiceServer) DeleteOrganizationMembers(context.Context, *OrganizationMembersRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationMembers not implemented")
}
func (UnimplementedResourceManagerServiceServer) IsMemberOfOrganization(context.Context, *IsMemberOfOrganizationRequest) (*IsMemberOfOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMemberOfOrganization not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListOrganizationQuotas(context.Context, *ListQuotasRequest) (*QuotaList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationQuotas not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListProjects(context.Context, *v1.ListOptions) (*ProjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedResourceManagerServiceServer) GetProject(context.Context, *v1.IDOptions) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedResourceManagerServiceServer) CreateProject(context.Context, *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedResourceManagerServiceServer) UpdateProject(context.Context, *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedResourceManagerServiceServer) DeleteProject(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListProjectQuotas(context.Context, *ListQuotasRequest) (*QuotaList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectQuotas not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListEvents(context.Context, *ListEventOptions) (*EventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListOrganizationInvites(context.Context, *v1.ListOptions) (*OrganizationInviteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationInvites not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListMyOrganizationInvites(context.Context, *v1.ListOptions) (*OrganizationInviteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyOrganizationInvites not implemented")
}
func (UnimplementedResourceManagerServiceServer) GetOrganizationInvite(context.Context, *v1.IDOptions) (*OrganizationInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInvite not implemented")
}
func (UnimplementedResourceManagerServiceServer) CreateOrganizationInvite(context.Context, *OrganizationInvite) (*OrganizationInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInvite not implemented")
}
func (UnimplementedResourceManagerServiceServer) DeleteOrganizationInvite(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationInvite not implemented")
}
func (UnimplementedResourceManagerServiceServer) AcceptOrganizationInvite(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrganizationInvite not implemented")
}
func (UnimplementedResourceManagerServiceServer) RejectOrganizationInvite(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectOrganizationInvite not implemented")
}
func (UnimplementedResourceManagerServiceServer) ListQuotaDescriptions(context.Context, *v1.ListOptions) (*QuotaDescriptionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotaDescriptions not implemented")
}
func (UnimplementedResourceManagerServiceServer) GetTermsAndConditions(context.Context, *v1.IDOptions) (*TermsAndConditions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermsAndConditions not implemented")
}
func (UnimplementedResourceManagerServiceServer) GetCurrentTermsAndConditions(context.Context, *v1.IDOptions) (*TermsAndConditions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTermsAndConditions not implemented")
}
func (UnimplementedResourceManagerServiceServer) GetDataProcessingAddendum(context.Context, *v1.IDOptions) (*DataProcessingAddendum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataProcessingAddendum not implemented")
}
func (UnimplementedResourceManagerServiceServer) GetCurrentDataProcessingAddendum(context.Context, *v1.IDOptions) (*DataProcessingAddendum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentDataProcessingAddendum not implemented")
}
func (UnimplementedResourceManagerServiceServer) mustEmbedUnimplementedResourceManagerServiceServer() {
}
func (UnimplementedResourceManagerServiceServer) testEmbeddedByValue() {}

// UnsafeResourceManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagerServiceServer will
// result in compilation errors.
type UnsafeResourceManagerServiceServer interface {
	mustEmbedUnimplementedResourceManagerServiceServer()
}

func RegisterResourceManagerServiceServer(s grpc.ServiceRegistrar, srv ResourceManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceManagerService_ServiceDesc, srv)
}

func _ResourceManagerService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListOrganizations(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetOrganization(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).CreateOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).UpdateOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).DeleteOrganization(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListOrganizationMembers(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_AddOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).AddOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_AddOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).AddOrganizationMembers(ctx, req.(*OrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_UpdateOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).UpdateOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_UpdateOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).UpdateOrganizationMembers(ctx, req.(*OrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_DeleteOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).DeleteOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_DeleteOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).DeleteOrganizationMembers(ctx, req.(*OrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_IsMemberOfOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMemberOfOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).IsMemberOfOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_IsMemberOfOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).IsMemberOfOrganization(ctx, req.(*IsMemberOfOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListOrganizationQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListOrganizationQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListOrganizationQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListOrganizationQuotas(ctx, req.(*ListQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListProjects(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetProject(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).CreateProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).UpdateProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).DeleteProject(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListProjectQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListProjectQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListProjectQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListProjectQuotas(ctx, req.(*ListQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListEvents(ctx, req.(*ListEventOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListOrganizationInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListOrganizationInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListOrganizationInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListOrganizationInvites(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListMyOrganizationInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListMyOrganizationInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListMyOrganizationInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListMyOrganizationInvites(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_GetOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetOrganizationInvite(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_CreateOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).CreateOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_CreateOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).CreateOrganizationInvite(ctx, req.(*OrganizationInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_DeleteOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).DeleteOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_DeleteOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).DeleteOrganizationInvite(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_AcceptOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).AcceptOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_AcceptOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).AcceptOrganizationInvite(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_RejectOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).RejectOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_RejectOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).RejectOrganizationInvite(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_ListQuotaDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).ListQuotaDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_ListQuotaDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).ListQuotaDescriptions(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_GetTermsAndConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetTermsAndConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetTermsAndConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetTermsAndConditions(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_GetCurrentTermsAndConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetCurrentTermsAndConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetCurrentTermsAndConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetCurrentTermsAndConditions(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_GetDataProcessingAddendum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetDataProcessingAddendum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetDataProcessingAddendum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetDataProcessingAddendum(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_GetCurrentDataProcessingAddendum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).GetCurrentDataProcessingAddendum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManagerService_GetCurrentDataProcessingAddendum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).GetCurrentDataProcessingAddendum(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManagerService_ServiceDesc is the grpc.ServiceDesc for ResourceManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.resourcemanager.v1.ResourceManagerService",
	HandlerType: (*ResourceManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _ResourceManagerService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _ResourceManagerService_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _ResourceManagerService_GetOrganization_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _ResourceManagerService_CreateOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _ResourceManagerService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _ResourceManagerService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationMembers",
			Handler:    _ResourceManagerService_ListOrganizationMembers_Handler,
		},
		{
			MethodName: "AddOrganizationMembers",
			Handler:    _ResourceManagerService_AddOrganizationMembers_Handler,
		},
		{
			MethodName: "UpdateOrganizationMembers",
			Handler:    _ResourceManagerService_UpdateOrganizationMembers_Handler,
		},
		{
			MethodName: "DeleteOrganizationMembers",
			Handler:    _ResourceManagerService_DeleteOrganizationMembers_Handler,
		},
		{
			MethodName: "IsMemberOfOrganization",
			Handler:    _ResourceManagerService_IsMemberOfOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationQuotas",
			Handler:    _ResourceManagerService_ListOrganizationQuotas_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ResourceManagerService_ListProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ResourceManagerService_GetProject_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ResourceManagerService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ResourceManagerService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ResourceManagerService_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjectQuotas",
			Handler:    _ResourceManagerService_ListProjectQuotas_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ResourceManagerService_ListEvents_Handler,
		},
		{
			MethodName: "ListOrganizationInvites",
			Handler:    _ResourceManagerService_ListOrganizationInvites_Handler,
		},
		{
			MethodName: "ListMyOrganizationInvites",
			Handler:    _ResourceManagerService_ListMyOrganizationInvites_Handler,
		},
		{
			MethodName: "GetOrganizationInvite",
			Handler:    _ResourceManagerService_GetOrganizationInvite_Handler,
		},
		{
			MethodName: "CreateOrganizationInvite",
			Handler:    _ResourceManagerService_CreateOrganizationInvite_Handler,
		},
		{
			MethodName: "DeleteOrganizationInvite",
			Handler:    _ResourceManagerService_DeleteOrganizationInvite_Handler,
		},
		{
			MethodName: "AcceptOrganizationInvite",
			Handler:    _ResourceManagerService_AcceptOrganizationInvite_Handler,
		},
		{
			MethodName: "RejectOrganizationInvite",
			Handler:    _ResourceManagerService_RejectOrganizationInvite_Handler,
		},
		{
			MethodName: "ListQuotaDescriptions",
			Handler:    _ResourceManagerService_ListQuotaDescriptions_Handler,
		},
		{
			MethodName: "GetTermsAndConditions",
			Handler:    _ResourceManagerService_GetTermsAndConditions_Handler,
		},
		{
			MethodName: "GetCurrentTermsAndConditions",
			Handler:    _ResourceManagerService_GetCurrentTermsAndConditions_Handler,
		},
		{
			MethodName: "GetDataProcessingAddendum",
			Handler:    _ResourceManagerService_GetDataProcessingAddendum_Handler,
		},
		{
			MethodName: "GetCurrentDataProcessingAddendum",
			Handler:    _ResourceManagerService_GetCurrentDataProcessingAddendum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resourcemanager.proto",
}
