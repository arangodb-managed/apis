//
// DISCLAIMER
//
// Copyright 2020-2025 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: usage.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A UsageItem message contained usage tracking information for a tracked
// resource (usually deployment) in a specific time period.
type UsageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the usage item.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Kind of usage item
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// Identification of the resource covered by this usage item
	Resource *UsageItem_Resource `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// This usage item covers a time period that starts at this timestamp
	StartsAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	// This usage item covers a time period that ends at this timestamp.
	// If the usage item has not yet ended, this field is is set to the current time.
	EndsAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	// Set when this usage item has ended.
	HasEnded bool `protobuf:"varint,7,opt,name=has_ended,json=hasEnded,proto3" json:"has_ended,omitempty"`
	// Identifier of the tier the organization was using at the start of this usage period.
	TierId string `protobuf:"bytes,8,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
	// Identifier of the invoice that includes this usage item.
	// The usage item must be ended when this field it set.
	InvoiceId string `protobuf:"bytes,9,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	// Amount of (computer) resources used by the resource covered by this usage item.
	// This field is only set when the usage item is of kind DeploymentSize.
	DeploymentSize *UsageItem_DeploymentSize `protobuf:"bytes,101,opt,name=deployment_size,json=deploymentSize,proto3" json:"deployment_size,omitempty"`
	// Amount of network traffic used by the resource covered by this usage item.
	// This field is only set when the usage item is of kind NetworkTransferSize.
	NetworkTransferSize *UsageItem_NetworkTransferSize `protobuf:"bytes,102,opt,name=network_transfer_size,json=networkTransferSize,proto3" json:"network_transfer_size,omitempty"`
	// Amount of backup related cloud storage used by the resource covered by this usage item.
	// This field is only set when the usage item is of kind BackupStorageSize.
	BackupStorageSize *UsageItem_BackupStorageSize `protobuf:"bytes,103,opt,name=backup_storage_size,json=backupStorageSize,proto3" json:"backup_storage_size,omitempty"`
	// Amount of audit log related resources used by the resource covered by this usage item.
	// This field is only set when the usage item is of kind AuditLogSize.
	AuditlogSize *UsageItem_AuditLogSize `protobuf:"bytes,104,opt,name=auditlog_size,json=auditlogSize,proto3" json:"auditlog_size,omitempty"`
	// Amount of audit log storage related resources used by the resource covered by this usage item.
	// This field is only set when the usage item is of kind AuditLogCloudSize.
	AuditlogStorageSize *UsageItem_AuditLogStorageSize `protobuf:"bytes,105,opt,name=auditlog_storage_size,json=auditlogStorageSize,proto3" json:"auditlog_storage_size,omitempty"`
	// Amount of cloud resources used by a given Notebook.
	// This field is only set when the usage item is of kind NotebookSize.
	NotebookSize *UsageItem_NotebookSize `protobuf:"bytes,106,opt,name=notebook_size,json=notebookSize,proto3" json:"notebook_size,omitempty"`
	// Amount of compute resources used by a given MLServices resource.
	// This field is only set when the usage item is of kind MLServicesSize.
	MlservicesSize *UsageItem_MLServicesSize `protobuf:"bytes,107,opt,name=mlservices_size,json=mlservicesSize,proto3" json:"mlservices_size,omitempty"`
	// Amount of compute resources used by a given ML job.
	// This field is only set when the usage item is of kind MLJobSize.
	MljobSize *UsageItem_MLJobSize `protobuf:"bytes,108,opt,name=mljob_size,json=mljobSize,proto3" json:"mljob_size,omitempty"`
	// Amount of compute resources used by a given ML job.
	// This field is only set when the usage item is of kind MLJobSize.
	GraphanalyticsjobSize *UsageItem_GraphAnalyticsJobSize `protobuf:"bytes,109,opt,name=graphanalyticsjob_size,json=graphanalyticsjobSize,proto3" json:"graphanalyticsjob_size,omitempty"`
}

func (x *UsageItem) Reset() {
	*x = UsageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem) ProtoMessage() {}

func (x *UsageItem) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem.ProtoReflect.Descriptor instead.
func (*UsageItem) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0}
}

func (x *UsageItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UsageItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UsageItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *UsageItem) GetResource() *UsageItem_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UsageItem) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *UsageItem) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *UsageItem) GetHasEnded() bool {
	if x != nil {
		return x.HasEnded
	}
	return false
}

func (x *UsageItem) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

func (x *UsageItem) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

func (x *UsageItem) GetDeploymentSize() *UsageItem_DeploymentSize {
	if x != nil {
		return x.DeploymentSize
	}
	return nil
}

func (x *UsageItem) GetNetworkTransferSize() *UsageItem_NetworkTransferSize {
	if x != nil {
		return x.NetworkTransferSize
	}
	return nil
}

func (x *UsageItem) GetBackupStorageSize() *UsageItem_BackupStorageSize {
	if x != nil {
		return x.BackupStorageSize
	}
	return nil
}

func (x *UsageItem) GetAuditlogSize() *UsageItem_AuditLogSize {
	if x != nil {
		return x.AuditlogSize
	}
	return nil
}

func (x *UsageItem) GetAuditlogStorageSize() *UsageItem_AuditLogStorageSize {
	if x != nil {
		return x.AuditlogStorageSize
	}
	return nil
}

func (x *UsageItem) GetNotebookSize() *UsageItem_NotebookSize {
	if x != nil {
		return x.NotebookSize
	}
	return nil
}

func (x *UsageItem) GetMlservicesSize() *UsageItem_MLServicesSize {
	if x != nil {
		return x.MlservicesSize
	}
	return nil
}

func (x *UsageItem) GetMljobSize() *UsageItem_MLJobSize {
	if x != nil {
		return x.MljobSize
	}
	return nil
}

func (x *UsageItem) GetGraphanalyticsjobSize() *UsageItem_GraphAnalyticsJobSize {
	if x != nil {
		return x.GraphanalyticsjobSize
	}
	return nil
}

// List of UsageItems.
type UsageItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UsageItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UsageItemList) Reset() {
	*x = UsageItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItemList) ProtoMessage() {}

func (x *UsageItemList) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItemList.ProtoReflect.Descriptor instead.
func (*UsageItemList) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{1}
}

func (x *UsageItemList) GetItems() []*UsageItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListUsageItems
type ListUsageItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request usage items for the organization with this id.
	// This is a required field.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Request usage items that overlaps in time with the time period that starts with this timestamp (inclusive).
	// This is a required field.
	From *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Request usage items that overlaps in time with the time period that ends with this timestamp (exclusive).
	// This is a required field.
	To *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Sort descending (new to old) on started_at field (default is ascending).
	SortDescending bool `protobuf:"varint,4,opt,name=sort_descending,json=sortDescending,proto3" json:"sort_descending,omitempty"`
	// Limit to usage items of this kind
	Kind string `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	// Standard list options
	// This is an optional field.
	Options *v1.ListOptions `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`
	// Limit to usage items for the resource with this URL.
	// This is an optional field.
	ResourceUrl string `protobuf:"bytes,11,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	// Limit to usage items for the resource with this kind.
	// This is an optional field.
	ResourceKind string `protobuf:"bytes,12,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	// Limit to usage items for the project with this id.
	// This is an optional field.
	ProjectId string `protobuf:"bytes,13,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Limit to usage items for the deployment with this id.
	// This is an optional field.
	DeploymentId string `protobuf:"bytes,14,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Limit to usage items for deployments with this node size.
	// This is an optional field.
	NodeSizeId string `protobuf:"bytes,15,opt,name=node_size_id,json=nodeSizeId,proto3" json:"node_size_id,omitempty"`
	// Limit to usage items for deployments in this region.
	// This is an optional field.
	RegionId string `protobuf:"bytes,16,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// If set, limit to usage items that have no invoice_id set.
	HasNoInvoiceId bool `protobuf:"varint,20,opt,name=has_no_invoice_id,json=hasNoInvoiceId,proto3" json:"has_no_invoice_id,omitempty"`
	// If set, limit to usage items that have an invoice_id set.
	HasInvoiceId bool `protobuf:"varint,21,opt,name=has_invoice_id,json=hasInvoiceId,proto3" json:"has_invoice_id,omitempty"`
	// If set, limit to usage items that have the invoice_id set to this specific value.
	// This is an optional field.
	InvoiceId string `protobuf:"bytes,22,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	// Request usage items that start at or after given timestamp.
	// This is an optional field.
	NotStartBefore *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=not_start_before,json=notStartBefore,proto3" json:"not_start_before,omitempty"`
	// Limit to usage items for the deployment with this model.
	IncludedTierIds []string `protobuf:"bytes,30,rep,name=included_tier_ids,json=includedTierIds,proto3" json:"included_tier_ids,omitempty"`
	// Limit to usage items for the deployment with this model.
	ExcludedTierIds []string `protobuf:"bytes,31,rep,name=excluded_tier_ids,json=excludedTierIds,proto3" json:"excluded_tier_ids,omitempty"`
}

func (x *ListUsageItemsRequest) Reset() {
	*x = ListUsageItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsageItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsageItemsRequest) ProtoMessage() {}

func (x *ListUsageItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsageItemsRequest.ProtoReflect.Descriptor instead.
func (*ListUsageItemsRequest) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{2}
}

func (x *ListUsageItemsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListUsageItemsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListUsageItemsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ListUsageItemsRequest) GetSortDescending() bool {
	if x != nil {
		return x.SortDescending
	}
	return false
}

func (x *ListUsageItemsRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ListUsageItemsRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListUsageItemsRequest) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *ListUsageItemsRequest) GetResourceKind() string {
	if x != nil {
		return x.ResourceKind
	}
	return ""
}

func (x *ListUsageItemsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListUsageItemsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ListUsageItemsRequest) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *ListUsageItemsRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListUsageItemsRequest) GetHasNoInvoiceId() bool {
	if x != nil {
		return x.HasNoInvoiceId
	}
	return false
}

func (x *ListUsageItemsRequest) GetHasInvoiceId() bool {
	if x != nil {
		return x.HasInvoiceId
	}
	return false
}

func (x *ListUsageItemsRequest) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

func (x *ListUsageItemsRequest) GetNotStartBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotStartBefore
	}
	return nil
}

func (x *ListUsageItemsRequest) GetIncludedTierIds() []string {
	if x != nil {
		return x.IncludedTierIds
	}
	return nil
}

func (x *ListUsageItemsRequest) GetExcludedTierIds() []string {
	if x != nil {
		return x.ExcludedTierIds
	}
	return nil
}

type UsageItem_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the resource that this usage item covers.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of the resource that this usage item covers
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Kind of resource that this usage item covers.
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// Human readable description of the resource that this usage item covers.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Identifier of the organization that owns the resource that this usage item covers.
	OrganizationId string `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Name of the organization that owns the resource that this usage item covers.
	OrganizationName string `protobuf:"bytes,6,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// Identifier of the project that owns the resource that this usage item covers.
	// This field is optional when the kind is AuditLogSize, depending if the audit log is for a deployment (set) or ArangoGraph Insights Platform (empty)
	ProjectId string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Name of the project that owns the resource that this usage item covers.
	// This field is optional when the kind is AuditLogSize, depending if the audit log is for a deployment (set) or ArangoGraph Insights Platform (empty)
	ProjectName string `protobuf:"bytes,8,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// Identifier of the deployment that owns the resource that this usage item covers.
	// This field is optional when the kind is AuditLogSize, depending if the audit log is for a deployment (set) or ArangoGraph Insights Platform (empty)
	DeploymentId string `protobuf:"bytes,9,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Name of the deployment that owns the resource that this usage item covers.
	// This field is optional when the kind is AuditLogSize, depending if the audit log is for a deployment (set) or ArangoGraph Insights Platform (empty)
	DeploymentName string `protobuf:"bytes,10,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// Name of the deployment member that owns the resource that this usage item covers.
	// This field is only set when the usage item is specific for a member of the deployment (e.g. network transfer)
	DeploymentMemberName string `protobuf:"bytes,11,opt,name=deployment_member_name,json=deploymentMemberName,proto3" json:"deployment_member_name,omitempty"`
	// Identifier of the cloud provider that is used to run the deployment.
	// This field is optional when the kind is AuditLogSize, depending if the audit log is for a deployment (set) or ArangoGraph Insights Platform (empty)
	CloudProviderId string `protobuf:"bytes,12,opt,name=cloud_provider_id,json=cloudProviderId,proto3" json:"cloud_provider_id,omitempty"`
	// Identifier of the cloud region that is used to run the deployment.
	// This field is optional when the kind is AuditLogSize, depending if the audit log is for a deployment (set) or ArangoGraph Insights Platform (empty)
	CloudRegionId string `protobuf:"bytes,13,opt,name=cloud_region_id,json=cloudRegionId,proto3" json:"cloud_region_id,omitempty"`
	// Identifier of the support plan that is attached to the deployment.
	// This field is not filled-out when the kind is AuditLogSize
	SupportPlanId string `protobuf:"bytes,14,opt,name=support_plan_id,json=supportPlanId,proto3" json:"support_plan_id,omitempty"`
	// Model of the deployment
	// This field is not filled-out when the kind is AuditLogSize
	DeploymentModel string `protobuf:"bytes,15,opt,name=deployment_model,json=deploymentModel,proto3" json:"deployment_model,omitempty"`
	// Identifier of the PrepaidDeployment that this deployment is attached to (if any)
	PrepaidDeploymentId string `protobuf:"bytes,16,opt,name=prepaid_deployment_id,json=prepaidDeploymentId,proto3" json:"prepaid_deployment_id,omitempty"`
	// Timestamp when the prepaid_deployment starts (relevant when prepaid_deployment_id is set only)
	PrepaidDeploymentStartsAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=prepaid_deployment_starts_at,json=prepaidDeploymentStartsAt,proto3" json:"prepaid_deployment_starts_at,omitempty"`
	// Timestamp when the prepaid_deployment ends (relevant when prepaid_deployment_id is set only)
	PrepaidDeploymentEndsAt *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=prepaid_deployment_ends_at,json=prepaidDeploymentEndsAt,proto3" json:"prepaid_deployment_ends_at,omitempty"`
	// Identifiers of the credit bundles (if any) that were used to pay for this usage item.
	CreditBundleIds []string `protobuf:"bytes,19,rep,name=credit_bundle_ids,json=creditBundleIds,proto3" json:"credit_bundle_ids,omitempty"`
}

func (x *UsageItem_Resource) Reset() {
	*x = UsageItem_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_Resource) ProtoMessage() {}

func (x *UsageItem_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_Resource.ProtoReflect.Descriptor instead.
func (*UsageItem_Resource) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 0}
}

func (x *UsageItem_Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UsageItem_Resource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UsageItem_Resource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *UsageItem_Resource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UsageItem_Resource) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UsageItem_Resource) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *UsageItem_Resource) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UsageItem_Resource) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UsageItem_Resource) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *UsageItem_Resource) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *UsageItem_Resource) GetDeploymentMemberName() string {
	if x != nil {
		return x.DeploymentMemberName
	}
	return ""
}

func (x *UsageItem_Resource) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

func (x *UsageItem_Resource) GetCloudRegionId() string {
	if x != nil {
		return x.CloudRegionId
	}
	return ""
}

func (x *UsageItem_Resource) GetSupportPlanId() string {
	if x != nil {
		return x.SupportPlanId
	}
	return ""
}

func (x *UsageItem_Resource) GetDeploymentModel() string {
	if x != nil {
		return x.DeploymentModel
	}
	return ""
}

func (x *UsageItem_Resource) GetPrepaidDeploymentId() string {
	if x != nil {
		return x.PrepaidDeploymentId
	}
	return ""
}

func (x *UsageItem_Resource) GetPrepaidDeploymentStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PrepaidDeploymentStartsAt
	}
	return nil
}

func (x *UsageItem_Resource) GetPrepaidDeploymentEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PrepaidDeploymentEndsAt
	}
	return nil
}

func (x *UsageItem_Resource) GetCreditBundleIds() []string {
	if x != nil {
		return x.CreditBundleIds
	}
	return nil
}

// Amount of (computer) resources used by the resource covered by this usage item.
type UsageItem_DeploymentSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of coordinators of the deployment
	Coordinators int32 `protobuf:"varint,1,opt,name=coordinators,proto3" json:"coordinators,omitempty"`
	// Amount of memory (in GB) allocated for each coordinator.
	CoordinatorMemorySize int32 `protobuf:"varint,2,opt,name=coordinator_memory_size,json=coordinatorMemorySize,proto3" json:"coordinator_memory_size,omitempty"`
	// Number of dbservers of the deployment
	Dbservers int32 `protobuf:"varint,11,opt,name=dbservers,proto3" json:"dbservers,omitempty"`
	// Amount of memory (in GB) allocated for each dbserver.
	DbserverMemorySize int32 `protobuf:"varint,12,opt,name=dbserver_memory_size,json=dbserverMemorySize,proto3" json:"dbserver_memory_size,omitempty"`
	// Amount of disk space (in GB) allocated for each dbserver.
	DbserverDiskSize int32 `protobuf:"varint,13,opt,name=dbserver_disk_size,json=dbserverDiskSize,proto3" json:"dbserver_disk_size,omitempty"`
	// Number of agents of the deployment
	Agents int32 `protobuf:"varint,21,opt,name=agents,proto3" json:"agents,omitempty"`
	// Amount of memory (in GB) allocated for each agent.
	AgentMemorySize int32 `protobuf:"varint,22,opt,name=agent_memory_size,json=agentMemorySize,proto3" json:"agent_memory_size,omitempty"`
	// Amount of disk space (in GB) allocated for each agent.
	AgentDiskSize int32 `protobuf:"varint,23,opt,name=agent_disk_size,json=agentDiskSize,proto3" json:"agent_disk_size,omitempty"`
	// Identifier of the node-size used for this deployment (empty for flexible)
	NodeSizeId string `protobuf:"bytes,31,opt,name=node_size_id,json=nodeSizeId,proto3" json:"node_size_id,omitempty"`
	// Identifier of disk performance used for this deployment (if any).
	DiskPerformanceId string `protobuf:"bytes,32,opt,name=disk_performance_id,json=diskPerformanceId,proto3" json:"disk_performance_id,omitempty"`
	// List of identifiers of addons used by the deployment.
	AddonIds []string `protobuf:"bytes,41,rep,name=addon_ids,json=addonIds,proto3" json:"addon_ids,omitempty"`
	// IF true the deployment was in paused state
	IsPaused bool `protobuf:"varint,42,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (x *UsageItem_DeploymentSize) Reset() {
	*x = UsageItem_DeploymentSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_DeploymentSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_DeploymentSize) ProtoMessage() {}

func (x *UsageItem_DeploymentSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_DeploymentSize.ProtoReflect.Descriptor instead.
func (*UsageItem_DeploymentSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 1}
}

func (x *UsageItem_DeploymentSize) GetCoordinators() int32 {
	if x != nil {
		return x.Coordinators
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetCoordinatorMemorySize() int32 {
	if x != nil {
		return x.CoordinatorMemorySize
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetDbservers() int32 {
	if x != nil {
		return x.Dbservers
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetDbserverMemorySize() int32 {
	if x != nil {
		return x.DbserverMemorySize
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetDbserverDiskSize() int32 {
	if x != nil {
		return x.DbserverDiskSize
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetAgents() int32 {
	if x != nil {
		return x.Agents
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetAgentMemorySize() int32 {
	if x != nil {
		return x.AgentMemorySize
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetAgentDiskSize() int32 {
	if x != nil {
		return x.AgentDiskSize
	}
	return 0
}

func (x *UsageItem_DeploymentSize) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *UsageItem_DeploymentSize) GetDiskPerformanceId() string {
	if x != nil {
		return x.DiskPerformanceId
	}
	return ""
}

func (x *UsageItem_DeploymentSize) GetAddonIds() []string {
	if x != nil {
		return x.AddonIds
	}
	return nil
}

func (x *UsageItem_DeploymentSize) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

// Amount of network traffic used by the resource covered by this usage item.
type UsageItem_NetworkTransferSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The destination (or source) the network traffic going to (or coming from)
	// Can be 'Internet' or 'InCluster'
	// An empty string means 'Internet'
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Total amount of network ingress traffic (in bytes) caused by the use of a deployment.
	// Destination 'Internet': This is traffic coming from the internet, so excluding inner cluster traffic
	// Destination 'InCluster': This is in-cluster traffic only
	// This is always excluding backup traffic (downloads).
	TotalTransferIngressSize int64 `protobuf:"varint,2,opt,name=total_transfer_ingress_size,json=totalTransferIngressSize,proto3" json:"total_transfer_ingress_size,omitempty"`
	// Total amount of network egress traffic (in bytes) caused by the use of a deployment.
	// Destination 'Internet': This is traffic going to the internet, so excluding inner cluster traffic
	// Destination 'InCluster': This is in-cluster traffic only
	// This is always excluding backup traffic (uploads).
	TotalTransferEgressSize int64 `protobuf:"varint,3,opt,name=total_transfer_egress_size,json=totalTransferEgressSize,proto3" json:"total_transfer_egress_size,omitempty"`
}

func (x *UsageItem_NetworkTransferSize) Reset() {
	*x = UsageItem_NetworkTransferSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_NetworkTransferSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_NetworkTransferSize) ProtoMessage() {}

func (x *UsageItem_NetworkTransferSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_NetworkTransferSize.ProtoReflect.Descriptor instead.
func (*UsageItem_NetworkTransferSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 2}
}

func (x *UsageItem_NetworkTransferSize) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *UsageItem_NetworkTransferSize) GetTotalTransferIngressSize() int64 {
	if x != nil {
		return x.TotalTransferIngressSize
	}
	return 0
}

func (x *UsageItem_NetworkTransferSize) GetTotalTransferEgressSize() int64 {
	if x != nil {
		return x.TotalTransferEgressSize
	}
	return 0
}

// Amount of backup related cloud storage used by the resource covered by this usage item.
type UsageItem_BackupStorageSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of cloud storage (in bytes) used by backups of a deployment.
	CloudStorageSize int64 `protobuf:"varint,1,opt,name=cloud_storage_size,json=cloudStorageSize,proto3" json:"cloud_storage_size,omitempty"`
}

func (x *UsageItem_BackupStorageSize) Reset() {
	*x = UsageItem_BackupStorageSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_BackupStorageSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_BackupStorageSize) ProtoMessage() {}

func (x *UsageItem_BackupStorageSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_BackupStorageSize.ProtoReflect.Descriptor instead.
func (*UsageItem_BackupStorageSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 3}
}

func (x *UsageItem_BackupStorageSize) GetCloudStorageSize() int64 {
	if x != nil {
		return x.CloudStorageSize
	}
	return 0
}

// Amount of audit log related resources used by the resource covered by this usage item.
type UsageItem_AuditLogSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of destination.
	// Possible values are: "cloud", "https-post"
	DestinationType string `protobuf:"bytes,1,opt,name=destination_type,json=destinationType,proto3" json:"destination_type,omitempty"`
	// Number of events used by audit log.
	// This is the value of DestinationCounters.events (of the timespan covered by this usage item).
	EventCount int64 `protobuf:"varint,11,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
	// Number of bytes used by audit log.
	// This is the total of DestinationCounters.bytes_succeeded and bytes_failed (of the timespan covered by this usage item)
	// and depending on the destination type send to the cloud or used as the body of a https post request.
	EventSize int64 `protobuf:"varint,12,opt,name=event_size,json=eventSize,proto3" json:"event_size,omitempty"`
	// Number of https post invocations used by audit log.
	// This is the total of DestinationCounters.https_posts_succeeded and https_posts_failed (of the timespan covered by this usage item).
	// Set when destination_type is "https-post" only
	HttpsPostCount int64 `protobuf:"varint,21,opt,name=https_post_count,json=httpsPostCount,proto3" json:"https_post_count,omitempty"`
}

func (x *UsageItem_AuditLogSize) Reset() {
	*x = UsageItem_AuditLogSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_AuditLogSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_AuditLogSize) ProtoMessage() {}

func (x *UsageItem_AuditLogSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_AuditLogSize.ProtoReflect.Descriptor instead.
func (*UsageItem_AuditLogSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 4}
}

func (x *UsageItem_AuditLogSize) GetDestinationType() string {
	if x != nil {
		return x.DestinationType
	}
	return ""
}

func (x *UsageItem_AuditLogSize) GetEventCount() int64 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

func (x *UsageItem_AuditLogSize) GetEventSize() int64 {
	if x != nil {
		return x.EventSize
	}
	return 0
}

func (x *UsageItem_AuditLogSize) GetHttpsPostCount() int64 {
	if x != nil {
		return x.HttpsPostCount
	}
	return 0
}

// Amount of audit log storage related resources used by the resource covered by this usage item.
// When this usage type is used, the audit log destination_type is "cloud".
type UsageItem_AuditLogStorageSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of cloud storage (in bytes) used by audit log.
	CloudStorageSize int64 `protobuf:"varint,1,opt,name=cloud_storage_size,json=cloudStorageSize,proto3" json:"cloud_storage_size,omitempty"`
}

func (x *UsageItem_AuditLogStorageSize) Reset() {
	*x = UsageItem_AuditLogStorageSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_AuditLogStorageSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_AuditLogStorageSize) ProtoMessage() {}

func (x *UsageItem_AuditLogStorageSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_AuditLogStorageSize.ProtoReflect.Descriptor instead.
func (*UsageItem_AuditLogStorageSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 5}
}

func (x *UsageItem_AuditLogStorageSize) GetCloudStorageSize() int64 {
	if x != nil {
		return x.CloudStorageSize
	}
	return 0
}

// Amount of cloud resources used by a given Notebook.
// This field is only set when the usage item is of kind NotebookSize.
type UsageItem_NotebookSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of CPU units allocated to the notebook.
	// 1 CPU unit equals 1 physical / virtual CPU.
	CpuSize float32 `protobuf:"fixed32,1,opt,name=cpu_size,json=cpuSize,proto3" json:"cpu_size,omitempty"`
	// Amount of memory allocated to the notebook (in GiB).
	MemorySize int64 `protobuf:"varint,2,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Size of the disk allocated to the notebook (in GiB).
	DiskSize int64 `protobuf:"varint,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// If the Notebook is paused (Hibernated phase).
	IsPaused bool `protobuf:"varint,4,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	// ID of the type of Notebook that is being used.
	NotebookModelId string `protobuf:"bytes,5,opt,name=notebook_model_id,json=notebookModelId,proto3" json:"notebook_model_id,omitempty"`
	// Amount of GPU units allocated to the notebook.
	// 1 GPU unit equals 1 physical / virtual GPU.
	GpuSize float32 `protobuf:"fixed32,6,opt,name=gpu_size,json=gpuSize,proto3" json:"gpu_size,omitempty"`
}

func (x *UsageItem_NotebookSize) Reset() {
	*x = UsageItem_NotebookSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_NotebookSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_NotebookSize) ProtoMessage() {}

func (x *UsageItem_NotebookSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_NotebookSize.ProtoReflect.Descriptor instead.
func (*UsageItem_NotebookSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 6}
}

func (x *UsageItem_NotebookSize) GetCpuSize() float32 {
	if x != nil {
		return x.CpuSize
	}
	return 0
}

func (x *UsageItem_NotebookSize) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *UsageItem_NotebookSize) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *UsageItem_NotebookSize) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

func (x *UsageItem_NotebookSize) GetNotebookModelId() string {
	if x != nil {
		return x.NotebookModelId
	}
	return ""
}

func (x *UsageItem_NotebookSize) GetGpuSize() float32 {
	if x != nil {
		return x.GpuSize
	}
	return 0
}

// Amount of compute resources used by a given MLServices resource.
type UsageItem_MLServicesSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of training API servers.
	TrainingApis int32 `protobuf:"varint,1,opt,name=training_apis,json=trainingApis,proto3" json:"training_apis,omitempty"`
	// Amount of memory (in GB) allocated for each training API server.
	TrainingApiMemorySize int64 `protobuf:"varint,2,opt,name=training_api_memory_size,json=trainingApiMemorySize,proto3" json:"training_api_memory_size,omitempty"`
	// Amount of CPU units allocated to the training API server.
	// 1 CPU unit equals 1 physical / virtual CPU.
	TrainingApiCpuSize float32 `protobuf:"fixed32,3,opt,name=training_api_cpu_size,json=trainingApiCpuSize,proto3" json:"training_api_cpu_size,omitempty"`
	// Number of prediction API servers.
	PredictionApis int32 `protobuf:"varint,4,opt,name=prediction_apis,json=predictionApis,proto3" json:"prediction_apis,omitempty"`
	// Amount of memory (in GB) allocated for each prediction API server.
	PredictionApiMemorySize int64 `protobuf:"varint,5,opt,name=prediction_api_memory_size,json=predictionApiMemorySize,proto3" json:"prediction_api_memory_size,omitempty"`
	// Amount of CPU units allocated to the prediction API server.
	// 1 CPU unit equals 1 physical / virtual CPU.
	PredictionApiCpuSize float32 `protobuf:"fixed32,6,opt,name=prediction_api_cpu_size,json=predictionApiCpuSize,proto3" json:"prediction_api_cpu_size,omitempty"`
	// Number of projects API servers.
	ProjectsApis int32 `protobuf:"varint,7,opt,name=projects_apis,json=projectsApis,proto3" json:"projects_apis,omitempty"`
	// Amount of memory (in GB) allocated for each projects API server.
	ProjectsApiMemorySize int64 `protobuf:"varint,8,opt,name=projects_api_memory_size,json=projectsApiMemorySize,proto3" json:"projects_api_memory_size,omitempty"`
	// Amount of CPU units allocated to the projects API server.
	// 1 CPU unit equals 1 physical / virtual CPU.
	ProjectsApiCpuSize float32 `protobuf:"fixed32,9,opt,name=projects_api_cpu_size,json=projectsApiCpuSize,proto3" json:"projects_api_cpu_size,omitempty"`
}

func (x *UsageItem_MLServicesSize) Reset() {
	*x = UsageItem_MLServicesSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_MLServicesSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_MLServicesSize) ProtoMessage() {}

func (x *UsageItem_MLServicesSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_MLServicesSize.ProtoReflect.Descriptor instead.
func (*UsageItem_MLServicesSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 7}
}

func (x *UsageItem_MLServicesSize) GetTrainingApis() int32 {
	if x != nil {
		return x.TrainingApis
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetTrainingApiMemorySize() int64 {
	if x != nil {
		return x.TrainingApiMemorySize
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetTrainingApiCpuSize() float32 {
	if x != nil {
		return x.TrainingApiCpuSize
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetPredictionApis() int32 {
	if x != nil {
		return x.PredictionApis
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetPredictionApiMemorySize() int64 {
	if x != nil {
		return x.PredictionApiMemorySize
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetPredictionApiCpuSize() float32 {
	if x != nil {
		return x.PredictionApiCpuSize
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetProjectsApis() int32 {
	if x != nil {
		return x.ProjectsApis
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetProjectsApiMemorySize() int64 {
	if x != nil {
		return x.ProjectsApiMemorySize
	}
	return 0
}

func (x *UsageItem_MLServicesSize) GetProjectsApiCpuSize() float32 {
	if x != nil {
		return x.ProjectsApiCpuSize
	}
	return 0
}

// Amount of compute resources used by a ML Job.
type UsageItem_MLJobSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of memory (in GB) allocated for the job.
	MemorySize int32 `protobuf:"varint,1,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Amount of CPU units allocated to the job.
	// 1 CPU unit equals 1 physical / virtual CPU.
	CpuSize float32 `protobuf:"fixed32,2,opt,name=cpu_size,json=cpuSize,proto3" json:"cpu_size,omitempty"`
	// Amount of GPU units allocated to the job.
	// 1 CPU unit equals 1 physical / virtual GPU.
	GpuSize float32 `protobuf:"fixed32,3,opt,name=gpu_size,json=gpuSize,proto3" json:"gpu_size,omitempty"`
	// ID of the ML job.
	JobId string `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Type of ML Job (training, prediction, etc.)
	JobType string `protobuf:"bytes,5,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
}

func (x *UsageItem_MLJobSize) Reset() {
	*x = UsageItem_MLJobSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_MLJobSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_MLJobSize) ProtoMessage() {}

func (x *UsageItem_MLJobSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_MLJobSize.ProtoReflect.Descriptor instead.
func (*UsageItem_MLJobSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 8}
}

func (x *UsageItem_MLJobSize) GetMemorySize() int32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *UsageItem_MLJobSize) GetCpuSize() float32 {
	if x != nil {
		return x.CpuSize
	}
	return 0
}

func (x *UsageItem_MLJobSize) GetGpuSize() float32 {
	if x != nil {
		return x.GpuSize
	}
	return 0
}

func (x *UsageItem_MLJobSize) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UsageItem_MLJobSize) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

// Amount of compute resources used by a Graph Analytics Job.
type UsageItem_GraphAnalyticsJobSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of memory (in GB) allocated for the job.
	MemorySize int32 `protobuf:"varint,1,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Amount of CPU units allocated to the job.
	// 1 CPU unit equals 1 physical / virtual CPU.
	CpuSize float32 `protobuf:"fixed32,2,opt,name=cpu_size,json=cpuSize,proto3" json:"cpu_size,omitempty"`
	// Amount of GPU units allocated to the job.
	// 1 CPU unit equals 1 physical / virtual GPU.
	GpuSize float32 `protobuf:"fixed32,3,opt,name=gpu_size,json=gpuSize,proto3" json:"gpu_size,omitempty"`
	// ID of the ML job.
	JobId string `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Type of Graph Analytics job.
	JobType string `protobuf:"bytes,5,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
}

func (x *UsageItem_GraphAnalyticsJobSize) Reset() {
	*x = UsageItem_GraphAnalyticsJobSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageItem_GraphAnalyticsJobSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageItem_GraphAnalyticsJobSize) ProtoMessage() {}

func (x *UsageItem_GraphAnalyticsJobSize) ProtoReflect() protoreflect.Message {
	mi := &file_usage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageItem_GraphAnalyticsJobSize.ProtoReflect.Descriptor instead.
func (*UsageItem_GraphAnalyticsJobSize) Descriptor() ([]byte, []int) {
	return file_usage_proto_rawDescGZIP(), []int{0, 9}
}

func (x *UsageItem_GraphAnalyticsJobSize) GetMemorySize() int32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *UsageItem_GraphAnalyticsJobSize) GetCpuSize() float32 {
	if x != nil {
		return x.CpuSize
	}
	return 0
}

func (x *UsageItem_GraphAnalyticsJobSize) GetGpuSize() float32 {
	if x != nil {
		return x.GpuSize
	}
	return 0
}

func (x *UsageItem_GraphAnalyticsJobSize) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UsageItem_GraphAnalyticsJobSize) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

var File_usage_proto protoreflect.FileDescriptor

var file_usage_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x1f,
	0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x6a, 0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x0e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x6d, 0x6c, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x4c, 0x4a, 0x6f, 0x62, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x09, 0x6d, 0x6c, 0x6a, 0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x6f, 0x0a, 0x16,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4a,
	0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x15, 0x67, 0x72, 0x61, 0x70, 0x68, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x6a, 0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xbb, 0x06,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x1c, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x57, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x1a, 0xe2, 0x03, 0x0a, 0x0e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x1a, 0xb3, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x41, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x0c, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x43, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x1a, 0xcb, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x67, 0x70, 0x75, 0x53, 0x69,
	0x7a, 0x65, 0x1a, 0xcf, 0x03, 0x0a, 0x0e, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x43,
	0x70, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x73, 0x12,
	0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x69, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x70, 0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x70, 0x75, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f,
	0x61, 0x70, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x70, 0x69, 0x43, 0x70, 0x75,
	0x53, 0x69, 0x7a, 0x65, 0x1a, 0x94, 0x01, 0x0a, 0x09, 0x4d, 0x4c, 0x4a, 0x6f, 0x62, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x67, 0x70, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x15,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4a, 0x6f,
	0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x67, 0x70, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49,
	0x0a, 0x0d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf3, 0x05, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61,
	0x73, 0x4e, 0x6f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x69, 0x65, 0x72, 0x49, 0x64, 0x73, 0x32,
	0xb2, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x76, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_usage_proto_rawDescOnce sync.Once
	file_usage_proto_rawDescData = file_usage_proto_rawDesc
)

func file_usage_proto_rawDescGZIP() []byte {
	file_usage_proto_rawDescOnce.Do(func() {
		file_usage_proto_rawDescData = protoimpl.X.CompressGZIP(file_usage_proto_rawDescData)
	})
	return file_usage_proto_rawDescData
}

var file_usage_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_usage_proto_goTypes = []interface{}{
	(*UsageItem)(nil),                       // 0: arangodb.cloud.usage.v1.UsageItem
	(*UsageItemList)(nil),                   // 1: arangodb.cloud.usage.v1.UsageItemList
	(*ListUsageItemsRequest)(nil),           // 2: arangodb.cloud.usage.v1.ListUsageItemsRequest
	(*UsageItem_Resource)(nil),              // 3: arangodb.cloud.usage.v1.UsageItem.Resource
	(*UsageItem_DeploymentSize)(nil),        // 4: arangodb.cloud.usage.v1.UsageItem.DeploymentSize
	(*UsageItem_NetworkTransferSize)(nil),   // 5: arangodb.cloud.usage.v1.UsageItem.NetworkTransferSize
	(*UsageItem_BackupStorageSize)(nil),     // 6: arangodb.cloud.usage.v1.UsageItem.BackupStorageSize
	(*UsageItem_AuditLogSize)(nil),          // 7: arangodb.cloud.usage.v1.UsageItem.AuditLogSize
	(*UsageItem_AuditLogStorageSize)(nil),   // 8: arangodb.cloud.usage.v1.UsageItem.AuditLogStorageSize
	(*UsageItem_NotebookSize)(nil),          // 9: arangodb.cloud.usage.v1.UsageItem.NotebookSize
	(*UsageItem_MLServicesSize)(nil),        // 10: arangodb.cloud.usage.v1.UsageItem.MLServicesSize
	(*UsageItem_MLJobSize)(nil),             // 11: arangodb.cloud.usage.v1.UsageItem.MLJobSize
	(*UsageItem_GraphAnalyticsJobSize)(nil), // 12: arangodb.cloud.usage.v1.UsageItem.GraphAnalyticsJobSize
	(*timestamppb.Timestamp)(nil),           // 13: google.protobuf.Timestamp
	(*v1.ListOptions)(nil),                  // 14: arangodb.cloud.common.v1.ListOptions
	(*v1.Empty)(nil),                        // 15: arangodb.cloud.common.v1.Empty
	(*v1.Version)(nil),                      // 16: arangodb.cloud.common.v1.Version
}
var file_usage_proto_depIdxs = []int32{
	3,  // 0: arangodb.cloud.usage.v1.UsageItem.resource:type_name -> arangodb.cloud.usage.v1.UsageItem.Resource
	13, // 1: arangodb.cloud.usage.v1.UsageItem.starts_at:type_name -> google.protobuf.Timestamp
	13, // 2: arangodb.cloud.usage.v1.UsageItem.ends_at:type_name -> google.protobuf.Timestamp
	4,  // 3: arangodb.cloud.usage.v1.UsageItem.deployment_size:type_name -> arangodb.cloud.usage.v1.UsageItem.DeploymentSize
	5,  // 4: arangodb.cloud.usage.v1.UsageItem.network_transfer_size:type_name -> arangodb.cloud.usage.v1.UsageItem.NetworkTransferSize
	6,  // 5: arangodb.cloud.usage.v1.UsageItem.backup_storage_size:type_name -> arangodb.cloud.usage.v1.UsageItem.BackupStorageSize
	7,  // 6: arangodb.cloud.usage.v1.UsageItem.auditlog_size:type_name -> arangodb.cloud.usage.v1.UsageItem.AuditLogSize
	8,  // 7: arangodb.cloud.usage.v1.UsageItem.auditlog_storage_size:type_name -> arangodb.cloud.usage.v1.UsageItem.AuditLogStorageSize
	9,  // 8: arangodb.cloud.usage.v1.UsageItem.notebook_size:type_name -> arangodb.cloud.usage.v1.UsageItem.NotebookSize
	10, // 9: arangodb.cloud.usage.v1.UsageItem.mlservices_size:type_name -> arangodb.cloud.usage.v1.UsageItem.MLServicesSize
	11, // 10: arangodb.cloud.usage.v1.UsageItem.mljob_size:type_name -> arangodb.cloud.usage.v1.UsageItem.MLJobSize
	12, // 11: arangodb.cloud.usage.v1.UsageItem.graphanalyticsjob_size:type_name -> arangodb.cloud.usage.v1.UsageItem.GraphAnalyticsJobSize
	0,  // 12: arangodb.cloud.usage.v1.UsageItemList.items:type_name -> arangodb.cloud.usage.v1.UsageItem
	13, // 13: arangodb.cloud.usage.v1.ListUsageItemsRequest.from:type_name -> google.protobuf.Timestamp
	13, // 14: arangodb.cloud.usage.v1.ListUsageItemsRequest.to:type_name -> google.protobuf.Timestamp
	14, // 15: arangodb.cloud.usage.v1.ListUsageItemsRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	13, // 16: arangodb.cloud.usage.v1.ListUsageItemsRequest.not_start_before:type_name -> google.protobuf.Timestamp
	13, // 17: arangodb.cloud.usage.v1.UsageItem.Resource.prepaid_deployment_starts_at:type_name -> google.protobuf.Timestamp
	13, // 18: arangodb.cloud.usage.v1.UsageItem.Resource.prepaid_deployment_ends_at:type_name -> google.protobuf.Timestamp
	15, // 19: arangodb.cloud.usage.v1.UsageService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	2,  // 20: arangodb.cloud.usage.v1.UsageService.ListUsageItems:input_type -> arangodb.cloud.usage.v1.ListUsageItemsRequest
	16, // 21: arangodb.cloud.usage.v1.UsageService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	1,  // 22: arangodb.cloud.usage.v1.UsageService.ListUsageItems:output_type -> arangodb.cloud.usage.v1.UsageItemList
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_usage_proto_init() }
func file_usage_proto_init() {
	if File_usage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_usage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsageItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_DeploymentSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_NetworkTransferSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_BackupStorageSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_AuditLogSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_AuditLogStorageSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_NotebookSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_MLServicesSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_MLJobSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageItem_GraphAnalyticsJobSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_usage_proto_goTypes,
		DependencyIndexes: file_usage_proto_depIdxs,
		MessageInfos:      file_usage_proto_msgTypes,
	}.Build()
	File_usage_proto = out.File
	file_usage_proto_rawDesc = nil
	file_usage_proto_goTypes = nil
	file_usage_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UsageServiceClient is the client API for UsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsageServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all UsageItem resources in the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - usage.usageitem.list on the organization identified by the given organization ID
	ListUsageItems(ctx context.Context, in *ListUsageItemsRequest, opts ...grpc.CallOption) (*UsageItemList, error)
}

type usageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageServiceClient(cc grpc.ClientConnInterface) UsageServiceClient {
	return &usageServiceClient{cc}
}

func (c *usageServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.usage.v1.UsageService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ListUsageItems(ctx context.Context, in *ListUsageItemsRequest, opts ...grpc.CallOption) (*UsageItemList, error) {
	out := new(UsageItemList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.usage.v1.UsageService/ListUsageItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageServiceServer is the server API for UsageService service.
type UsageServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all UsageItem resources in the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - usage.usageitem.list on the organization identified by the given organization ID
	ListUsageItems(context.Context, *ListUsageItemsRequest) (*UsageItemList, error)
}

// UnimplementedUsageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUsageServiceServer struct {
}

func (*UnimplementedUsageServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedUsageServiceServer) ListUsageItems(context.Context, *ListUsageItemsRequest) (*UsageItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsageItems not implemented")
}

func RegisterUsageServiceServer(s *grpc.Server, srv UsageServiceServer) {
	s.RegisterService(&_UsageService_serviceDesc, srv)
}

func _UsageService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.usage.v1.UsageService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ListUsageItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsageItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ListUsageItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.usage.v1.UsageService/ListUsageItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ListUsageItems(ctx, req.(*ListUsageItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.usage.v1.UsageService",
	HandlerType: (*UsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _UsageService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListUsageItems",
			Handler:    _UsageService_ListUsageItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usage.proto",
}
