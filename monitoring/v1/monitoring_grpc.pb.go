//
// DISCLAIMER
//
// Copyright 2020 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//
// Author Ewout Prangsma
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: monitoring.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitoringService_GetAPIVersion_FullMethodName             = "/arangodb.cloud.monitoring.v1.MonitoringService/GetAPIVersion"
	MonitoringService_GetDeploymentLogs_FullMethodName         = "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentLogs"
	MonitoringService_GetDeploymentUsageMetrics_FullMethodName = "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentUsageMetrics"
)

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MonitoringService is the API used to monitor deployments.
type MonitoringServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all logs of the deployment that matches the given request.
	// Required permissions:
	// - monitoring.logs.get on the deployment identified by the given deployment ID.
	GetDeploymentLogs(ctx context.Context, in *GetDeploymentLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeploymentLogsChunk], error)
	// Get the usage metrics for the deployment based on the given request.
	// Note: Only at most 1 week worth of data may be requested.
	// Required permissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, MonitoringService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetDeploymentLogs(ctx context.Context, in *GetDeploymentLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeploymentLogsChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MonitoringService_ServiceDesc.Streams[0], MonitoringService_GetDeploymentLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDeploymentLogsRequest, DeploymentLogsChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringService_GetDeploymentLogsClient = grpc.ServerStreamingClient[DeploymentLogsChunk]

func (c *monitoringServiceClient) GetDeploymentUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentMetrics)
	err := c.cc.Invoke(ctx, MonitoringService_GetDeploymentUsageMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations must embed UnimplementedMonitoringServiceServer
// for forward compatibility.
//
// MonitoringService is the API used to monitor deployments.
type MonitoringServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all logs of the deployment that matches the given request.
	// Required permissions:
	// - monitoring.logs.get on the deployment identified by the given deployment ID.
	GetDeploymentLogs(*GetDeploymentLogsRequest, grpc.ServerStreamingServer[DeploymentLogsChunk]) error
	// Get the usage metrics for the deployment based on the given request.
	// Note: Only at most 1 week worth of data may be requested.
	// Required permissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentUsageMetrics(context.Context, *GetDeploymentMetricsRequest) (*DeploymentMetrics, error)
	mustEmbedUnimplementedMonitoringServiceServer()
}

// UnimplementedMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringServiceServer struct{}

func (UnimplementedMonitoringServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedMonitoringServiceServer) GetDeploymentLogs(*GetDeploymentLogsRequest, grpc.ServerStreamingServer[DeploymentLogsChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetDeploymentLogs not implemented")
}
func (UnimplementedMonitoringServiceServer) GetDeploymentUsageMetrics(context.Context, *GetDeploymentMetricsRequest) (*DeploymentMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentUsageMetrics not implemented")
}
func (UnimplementedMonitoringServiceServer) mustEmbedUnimplementedMonitoringServiceServer() {}
func (UnimplementedMonitoringServiceServer) testEmbeddedByValue()                           {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetDeploymentLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeploymentLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).GetDeploymentLogs(m, &grpc.GenericServerStream[GetDeploymentLogsRequest, DeploymentLogsChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringService_GetDeploymentLogsServer = grpc.ServerStreamingServer[DeploymentLogsChunk]

func _MonitoringService_GetDeploymentUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetDeploymentUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetDeploymentUsageMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetDeploymentUsageMetrics(ctx, req.(*GetDeploymentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.monitoring.v1.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _MonitoringService_GetAPIVersion_Handler,
		},
		{
			MethodName: "GetDeploymentUsageMetrics",
			Handler:    _MonitoringService_GetDeploymentUsageMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeploymentLogs",
			Handler:       _MonitoringService_GetDeploymentLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "monitoring.proto",
}
