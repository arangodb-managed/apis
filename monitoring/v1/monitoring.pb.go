// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: monitoring.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	v1 "github.com/arangodb-managed/apis/common/v1"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request for getting deployment metrics
type GetDeploymentMetricsRequest struct {
	// ID of the deployment for which metrics are being requested.
	// This is a required field.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Start time for the query.
	// This is a required field.
	StartAt *types.Timestamp `protobuf:"bytes,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// The end time for the query.
	// This is a required field.
	EndAt *types.Timestamp `protobuf:"bytes,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	// Granularity defines the interval between each metric sample.
	// This needs to be a valid duration.
	// Example: 1m, 2m, 30s, 1d, etc.
	// Defaults to 30s.
	// This is an optional field.
	Granularity          string   `protobuf:"bytes,4,opt,name=granularity,proto3" json:"granularity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeploymentMetricsRequest) Reset()         { *m = GetDeploymentMetricsRequest{} }
func (m *GetDeploymentMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeploymentMetricsRequest) ProtoMessage()    {}
func (*GetDeploymentMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9068e71705f3706, []int{0}
}
func (m *GetDeploymentMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeploymentMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentMetricsRequest.Merge(m, src)
}
func (m *GetDeploymentMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentMetricsRequest proto.InternalMessageInfo

func (m *GetDeploymentMetricsRequest) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *GetDeploymentMetricsRequest) GetStartAt() *types.Timestamp {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *GetDeploymentMetricsRequest) GetEndAt() *types.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *GetDeploymentMetricsRequest) GetGranularity() string {
	if m != nil {
		return m.Granularity
	}
	return ""
}

// DeploymentMetrics contains the deployment metrics
type DeploymentMetrics struct {
	// Timeseries metrics for the DBServers
	Dbservers []*DeploymentMetrics_Sample `protobuf:"bytes,1,rep,name=dbservers,proto3" json:"dbservers,omitempty"`
	// Timeseries metrics for the Coordinators
	Coordinators         []*DeploymentMetrics_Sample `protobuf:"bytes,2,rep,name=coordinators,proto3" json:"coordinators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DeploymentMetrics) Reset()         { *m = DeploymentMetrics{} }
func (m *DeploymentMetrics) String() string { return proto.CompactTextString(m) }
func (*DeploymentMetrics) ProtoMessage()    {}
func (*DeploymentMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9068e71705f3706, []int{1}
}
func (m *DeploymentMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentMetrics.Merge(m, src)
}
func (m *DeploymentMetrics) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentMetrics proto.InternalMessageInfo

func (m *DeploymentMetrics) GetDbservers() []*DeploymentMetrics_Sample {
	if m != nil {
		return m.Dbservers
	}
	return nil
}

func (m *DeploymentMetrics) GetCoordinators() []*DeploymentMetrics_Sample {
	if m != nil {
		return m.Coordinators
	}
	return nil
}

// Sample defines a single data point.
// It contains the value of the sample and the timestamp at which it was captured.
type DeploymentMetrics_Sample struct {
	// Timestamp at which this sample is captured.
	Timestamp *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Value of the given sample.
	Value                float32  `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentMetrics_Sample) Reset()         { *m = DeploymentMetrics_Sample{} }
func (m *DeploymentMetrics_Sample) String() string { return proto.CompactTextString(m) }
func (*DeploymentMetrics_Sample) ProtoMessage()    {}
func (*DeploymentMetrics_Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9068e71705f3706, []int{1, 0}
}
func (m *DeploymentMetrics_Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentMetrics_Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentMetrics_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentMetrics_Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentMetrics_Sample.Merge(m, src)
}
func (m *DeploymentMetrics_Sample) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentMetrics_Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentMetrics_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentMetrics_Sample proto.InternalMessageInfo

func (m *DeploymentMetrics_Sample) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DeploymentMetrics_Sample) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// GetDeploymentLogsRequest contains request arguments for GetDeploymentLogs.
type GetDeploymentLogsRequest struct {
	// Identifier of the deployment to get the logs from.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// If set, limit logs to servers of this role.
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// Formatting for log messages.
	// The possible values are text and json, with default value being text.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// If set limits logs to the server with this ID.
	ServerId string `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// The start time for the query. Defaults to one hour ago.
	StartAt *types.Timestamp `protobuf:"bytes,100,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// The end time for the query. Defaults to now.
	EndAt *types.Timestamp `protobuf:"bytes,101,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	// Limit the number of log lines. Defaults to 1000.
	Limit                int32    `protobuf:"varint,102,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeploymentLogsRequest) Reset()         { *m = GetDeploymentLogsRequest{} }
func (m *GetDeploymentLogsRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeploymentLogsRequest) ProtoMessage()    {}
func (*GetDeploymentLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9068e71705f3706, []int{2}
}
func (m *GetDeploymentLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeploymentLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentLogsRequest.Merge(m, src)
}
func (m *GetDeploymentLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentLogsRequest proto.InternalMessageInfo

func (m *GetDeploymentLogsRequest) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *GetDeploymentLogsRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *GetDeploymentLogsRequest) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *GetDeploymentLogsRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *GetDeploymentLogsRequest) GetStartAt() *types.Timestamp {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *GetDeploymentLogsRequest) GetEndAt() *types.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *GetDeploymentLogsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type DeploymentLogsChunk struct {
	// Chunk of bytes from the logs
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentLogsChunk) Reset()         { *m = DeploymentLogsChunk{} }
func (m *DeploymentLogsChunk) String() string { return proto.CompactTextString(m) }
func (*DeploymentLogsChunk) ProtoMessage()    {}
func (*DeploymentLogsChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9068e71705f3706, []int{3}
}
func (m *DeploymentLogsChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentLogsChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentLogsChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentLogsChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentLogsChunk.Merge(m, src)
}
func (m *DeploymentLogsChunk) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentLogsChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentLogsChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentLogsChunk proto.InternalMessageInfo

func (m *DeploymentLogsChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDeploymentMetricsRequest)(nil), "arangodb.cloud.monitoring.v1.GetDeploymentMetricsRequest")
	proto.RegisterType((*DeploymentMetrics)(nil), "arangodb.cloud.monitoring.v1.DeploymentMetrics")
	proto.RegisterType((*DeploymentMetrics_Sample)(nil), "arangodb.cloud.monitoring.v1.DeploymentMetrics.Sample")
	proto.RegisterType((*GetDeploymentLogsRequest)(nil), "arangodb.cloud.monitoring.v1.GetDeploymentLogsRequest")
	proto.RegisterType((*DeploymentLogsChunk)(nil), "arangodb.cloud.monitoring.v1.DeploymentLogsChunk")
}

func init() { proto.RegisterFile("monitoring.proto", fileDescriptor_b9068e71705f3706) }

var fileDescriptor_b9068e71705f3706 = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcb, 0x4e, 0x14, 0x4d,
	0x14, 0xfe, 0x6b, 0x60, 0xe6, 0x67, 0x0a, 0x48, 0x7e, 0xea, 0x27, 0x64, 0xd2, 0xe0, 0x30, 0x34,
	0x89, 0x8e, 0x17, 0xba, 0x1d, 0x8c, 0xf7, 0x8d, 0x08, 0x86, 0x90, 0x48, 0x42, 0x1a, 0x30, 0x86,
	0x0d, 0xa9, 0xe9, 0x2e, 0x9a, 0x0a, 0x5d, 0x55, 0x6d, 0x55, 0x75, 0x27, 0x13, 0x77, 0xae, 0xdc,
	0xbb, 0x71, 0xe7, 0x3b, 0x18, 0x17, 0xfa, 0x06, 0xae, 0x8c, 0x89, 0x2f, 0x60, 0xd0, 0x37, 0xf0,
	0x05, 0x4c, 0x77, 0xcf, 0x85, 0xe6, 0x32, 0x80, 0x2e, 0xd8, 0xd5, 0xa9, 0x3e, 0xf5, 0x9d, 0xef,
	0x9c, 0xef, 0xab, 0x6a, 0xf8, 0x1f, 0x13, 0x9c, 0x6a, 0x21, 0x29, 0xf7, 0xad, 0x50, 0x0a, 0x2d,
	0xd0, 0x14, 0x96, 0x98, 0xfb, 0xc2, 0x6b, 0x5a, 0x6e, 0x20, 0x22, 0xcf, 0x3a, 0x90, 0x10, 0x37,
	0x8c, 0x09, 0x57, 0x30, 0x26, 0xb8, 0x1d, 0x37, 0xec, 0x6c, 0x95, 0x9d, 0x32, 0x1e, 0xfa, 0x54,
	0xef, 0x46, 0x4d, 0xcb, 0x15, 0xcc, 0xf6, 0x45, 0x80, 0xb9, 0x6f, 0xa7, 0x1f, 0x9a, 0xd1, 0x8e,
	0x1d, 0xea, 0x56, 0x48, 0x94, 0xad, 0x29, 0x23, 0x4a, 0x63, 0x16, 0xf6, 0x56, 0xed, 0xc3, 0x53,
	0xbe, 0x10, 0x7e, 0x40, 0x6c, 0x1c, 0x52, 0x1b, 0x73, 0x2e, 0x34, 0xd6, 0x54, 0x70, 0x95, 0x7d,
	0x35, 0xbf, 0x00, 0x38, 0xb9, 0x4c, 0xf4, 0x12, 0x09, 0x03, 0xd1, 0x62, 0x84, 0xeb, 0x55, 0xa2,
	0x25, 0x75, 0x95, 0x43, 0x5e, 0x44, 0x44, 0x69, 0x34, 0x0b, 0x47, 0xbd, 0xee, 0xb7, 0x6d, 0xea,
	0x55, 0x40, 0x0d, 0xd4, 0xcb, 0xce, 0x48, 0x6f, 0x73, 0xc5, 0x43, 0xb7, 0xe1, 0x90, 0xd2, 0x58,
	0xea, 0x6d, 0xac, 0x2b, 0x85, 0x1a, 0xa8, 0x0f, 0xcf, 0x1b, 0x56, 0x56, 0xd5, 0xea, 0xf0, 0xb4,
	0x36, 0x3a, 0xb4, 0x9c, 0x7f, 0xd3, 0xdc, 0x05, 0x8d, 0x1a, 0xb0, 0x44, 0xb8, 0x97, 0x1c, 0x1a,
	0x38, 0xf5, 0x50, 0x91, 0x70, 0x6f, 0x41, 0xa3, 0x1a, 0x1c, 0xf6, 0x25, 0xe6, 0x51, 0x80, 0x25,
	0xd5, 0xad, 0xca, 0x60, 0x4a, 0xe6, 0xe0, 0x96, 0xf9, 0xae, 0x00, 0xc7, 0x8e, 0x74, 0x83, 0x36,
	0x60, 0xd9, 0x6b, 0x2a, 0x22, 0x63, 0x22, 0x55, 0x05, 0xd4, 0x06, 0xea, 0xc3, 0xf3, 0x77, 0xac,
	0x7e, 0x5a, 0x58, 0x47, 0x30, 0xac, 0x75, 0xcc, 0xc2, 0x80, 0x38, 0x3d, 0x20, 0xb4, 0x05, 0x47,
	0x5c, 0x21, 0xa4, 0x47, 0x39, 0xd6, 0x42, 0xaa, 0x4a, 0xe1, 0xaf, 0x80, 0x73, 0x58, 0xc6, 0x73,
	0x58, 0xca, 0xf6, 0xd1, 0x3d, 0x58, 0xee, 0x6a, 0x9a, 0x8e, 0xbf, 0xff, 0xa4, 0x7a, 0xc9, 0x68,
	0x1c, 0x16, 0x63, 0x1c, 0x44, 0x24, 0x15, 0xa5, 0xe0, 0x64, 0x81, 0xf9, 0xba, 0x00, 0x2b, 0x39,
	0xc9, 0x9f, 0x0a, 0xff, 0x7c, 0x7a, 0x23, 0x38, 0x28, 0x45, 0x90, 0xc1, 0x96, 0x9d, 0x74, 0x8d,
	0x26, 0x60, 0x69, 0x47, 0x48, 0xd6, 0x16, 0xb3, 0xec, 0xb4, 0x23, 0x34, 0x09, 0xcb, 0xd9, 0xb8,
	0x12, 0xb0, 0x4c, 0xaf, 0xa1, 0x6c, 0xe3, 0x90, 0x71, 0xbc, 0x3f, 0x31, 0x0e, 0x39, 0xab, 0x71,
	0xc6, 0x61, 0x31, 0xa0, 0x8c, 0xea, 0xca, 0x4e, 0x0d, 0xd4, 0x8b, 0x4e, 0x16, 0x98, 0xd7, 0xe1,
	0xff, 0xf9, 0x31, 0x2c, 0xee, 0x46, 0x7c, 0x2f, 0x49, 0x76, 0x93, 0x45, 0xda, 0xfc, 0x88, 0x93,
	0x05, 0xf3, 0xbf, 0x4a, 0x70, 0x6c, 0xb5, 0x2b, 0xe5, 0x3a, 0x91, 0x31, 0x75, 0x09, 0x7a, 0x09,
	0x47, 0x97, 0x89, 0x5e, 0x58, 0x5b, 0x79, 0x46, 0xa4, 0xa2, 0x82, 0xa3, 0xe9, 0xc3, 0xf2, 0xb7,
	0xaf, 0x72, 0xdc, 0xb0, 0x9e, 0xb0, 0x50, 0xb7, 0x8c, 0x99, 0x93, 0x13, 0xda, 0x18, 0xe6, 0xe5,
	0x57, 0xdf, 0x7e, 0xbe, 0x29, 0xd4, 0x50, 0x35, 0xbd, 0xb5, 0x3d, 0xff, 0x24, 0x2f, 0x03, 0x0e,
	0xe9, 0x5c, 0xdc, 0xae, 0xf5, 0x09, 0xc0, 0xb1, 0x23, 0x52, 0xa2, 0x53, 0x0c, 0x78, 0x92, 0xf6,
	0x46, 0xe3, 0xac, 0xc6, 0xed, 0x4e, 0xca, 0xbc, 0x9b, 0x12, 0x6d, 0x98, 0x37, 0x8e, 0x21, 0xaa,
	0xb4, 0x24, 0x98, 0x25, 0x41, 0xcf, 0x3c, 0x73, 0x81, 0xf0, 0xd5, 0x03, 0x70, 0xed, 0x26, 0x40,
	0x1f, 0x01, 0x9c, 0x3e, 0xf4, 0xf2, 0x30, 0x21, 0x5b, 0x9b, 0x0a, 0xfb, 0xa4, 0x73, 0x6d, 0xef,
	0x9f, 0xa3, 0x93, 0xfc, 0xc3, 0x65, 0xd8, 0xe7, 0xbc, 0x85, 0xe6, 0xd5, 0xb4, 0x95, 0x59, 0x34,
	0x73, 0x4c, 0x2b, 0x2c, 0xcb, 0xb1, 0x59, 0x4a, 0x11, 0xbd, 0x07, 0x70, 0x2a, 0x57, 0x7b, 0x71,
	0x6d, 0xf3, 0xc2, 0x78, 0xf7, 0xf3, 0x4a, 0x87, 0xb7, 0x1b, 0x46, 0xe8, 0x03, 0x80, 0x97, 0x72,
	0x85, 0x97, 0xa8, 0xda, 0xbb, 0x30, 0xd6, 0x57, 0x52, 0xd6, 0x33, 0x68, 0xba, 0x0f, 0x6b, 0x8f,
	0xaa, 0xbd, 0xc7, 0x8f, 0x3e, 0xef, 0x57, 0xc1, 0xd7, 0xfd, 0x2a, 0xf8, 0xbe, 0x5f, 0x05, 0x6f,
	0x7f, 0x54, 0xff, 0xd9, 0xb2, 0x0e, 0xfc, 0x0d, 0x3b, 0x55, 0xe7, 0x18, 0xe6, 0xd8, 0x27, 0x5e,
	0x82, 0xa6, 0xf2, 0x70, 0xcd, 0x52, 0xfa, 0x2a, 0xdc, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xdd,
	0x7e, 0x4e, 0xd3, 0x8e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitoringServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all logs of the deployment that matches the given request.
	// Required permissions:
	// - monitoring.logs.get on the deployment identified by the given deployment ID.
	GetDeploymentLogs(ctx context.Context, in *GetDeploymentLogsRequest, opts ...grpc.CallOption) (MonitoringService_GetDeploymentLogsClient, error)
	// Get the memory usage metrics for the deployment based on the given request.
	// Required perissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentMemoryUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error)
	// Get the CPU usage metrics for the deployment based on the given request.
	// Required perissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentCPUUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error)
	// Get the disk usage metrics for the deployment based on the given request.
	// Note: The response will contain an empty list for coordinators.
	// Required perissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentDiskUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error)
}

type monitoringServiceClient struct {
	cc *grpc.ClientConn
}

func NewMonitoringServiceClient(cc *grpc.ClientConn) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.monitoring.v1.MonitoringService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetDeploymentLogs(ctx context.Context, in *GetDeploymentLogsRequest, opts ...grpc.CallOption) (MonitoringService_GetDeploymentLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitoringService_serviceDesc.Streams[0], "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringServiceGetDeploymentLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringService_GetDeploymentLogsClient interface {
	Recv() (*DeploymentLogsChunk, error)
	grpc.ClientStream
}

type monitoringServiceGetDeploymentLogsClient struct {
	grpc.ClientStream
}

func (x *monitoringServiceGetDeploymentLogsClient) Recv() (*DeploymentLogsChunk, error) {
	m := new(DeploymentLogsChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringServiceClient) GetDeploymentMemoryUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error) {
	out := new(DeploymentMetrics)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentMemoryUsageMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetDeploymentCPUUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error) {
	out := new(DeploymentMetrics)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentCPUUsageMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetDeploymentDiskUsageMetrics(ctx context.Context, in *GetDeploymentMetricsRequest, opts ...grpc.CallOption) (*DeploymentMetrics, error) {
	out := new(DeploymentMetrics)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentDiskUsageMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
type MonitoringServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all logs of the deployment that matches the given request.
	// Required permissions:
	// - monitoring.logs.get on the deployment identified by the given deployment ID.
	GetDeploymentLogs(*GetDeploymentLogsRequest, MonitoringService_GetDeploymentLogsServer) error
	// Get the memory usage metrics for the deployment based on the given request.
	// Required perissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentMemoryUsageMetrics(context.Context, *GetDeploymentMetricsRequest) (*DeploymentMetrics, error)
	// Get the CPU usage metrics for the deployment based on the given request.
	// Required perissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentCPUUsageMetrics(context.Context, *GetDeploymentMetricsRequest) (*DeploymentMetrics, error)
	// Get the disk usage metrics for the deployment based on the given request.
	// Note: The response will contain an empty list for coordinators.
	// Required perissions:
	// - monitoring.metrics.get on the deployment identified by the given deployment ID.
	GetDeploymentDiskUsageMetrics(context.Context, *GetDeploymentMetricsRequest) (*DeploymentMetrics, error)
}

// UnimplementedMonitoringServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitoringServiceServer struct {
}

func (*UnimplementedMonitoringServiceServer) GetAPIVersion(ctx context.Context, req *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedMonitoringServiceServer) GetDeploymentLogs(req *GetDeploymentLogsRequest, srv MonitoringService_GetDeploymentLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeploymentLogs not implemented")
}
func (*UnimplementedMonitoringServiceServer) GetDeploymentMemoryUsageMetrics(ctx context.Context, req *GetDeploymentMetricsRequest) (*DeploymentMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentMemoryUsageMetrics not implemented")
}
func (*UnimplementedMonitoringServiceServer) GetDeploymentCPUUsageMetrics(ctx context.Context, req *GetDeploymentMetricsRequest) (*DeploymentMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentCPUUsageMetrics not implemented")
}
func (*UnimplementedMonitoringServiceServer) GetDeploymentDiskUsageMetrics(ctx context.Context, req *GetDeploymentMetricsRequest) (*DeploymentMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentDiskUsageMetrics not implemented")
}

func RegisterMonitoringServiceServer(s *grpc.Server, srv MonitoringServiceServer) {
	s.RegisterService(&_MonitoringService_serviceDesc, srv)
}

func _MonitoringService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.monitoring.v1.MonitoringService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetDeploymentLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeploymentLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).GetDeploymentLogs(m, &monitoringServiceGetDeploymentLogsServer{stream})
}

type MonitoringService_GetDeploymentLogsServer interface {
	Send(*DeploymentLogsChunk) error
	grpc.ServerStream
}

type monitoringServiceGetDeploymentLogsServer struct {
	grpc.ServerStream
}

func (x *monitoringServiceGetDeploymentLogsServer) Send(m *DeploymentLogsChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringService_GetDeploymentMemoryUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetDeploymentMemoryUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentMemoryUsageMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetDeploymentMemoryUsageMetrics(ctx, req.(*GetDeploymentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetDeploymentCPUUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetDeploymentCPUUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentCPUUsageMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetDeploymentCPUUsageMetrics(ctx, req.(*GetDeploymentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetDeploymentDiskUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetDeploymentDiskUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentDiskUsageMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetDeploymentDiskUsageMetrics(ctx, req.(*GetDeploymentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitoringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.monitoring.v1.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _MonitoringService_GetAPIVersion_Handler,
		},
		{
			MethodName: "GetDeploymentMemoryUsageMetrics",
			Handler:    _MonitoringService_GetDeploymentMemoryUsageMetrics_Handler,
		},
		{
			MethodName: "GetDeploymentCPUUsageMetrics",
			Handler:    _MonitoringService_GetDeploymentCPUUsageMetrics_Handler,
		},
		{
			MethodName: "GetDeploymentDiskUsageMetrics",
			Handler:    _MonitoringService_GetDeploymentDiskUsageMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeploymentLogs",
			Handler:       _MonitoringService_GetDeploymentLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "monitoring.proto",
}

func (m *GetDeploymentMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeploymentMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Granularity) > 0 {
		i -= len(m.Granularity)
		copy(dAtA[i:], m.Granularity)
		i = encodeVarintMonitoring(dAtA, i, uint64(len(m.Granularity)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndAt != nil {
		{
			size, err := m.EndAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonitoring(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartAt != nil {
		{
			size, err := m.StartAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonitoring(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintMonitoring(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Coordinators) > 0 {
		for iNdEx := len(m.Coordinators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coordinators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Dbservers) > 0 {
		for iNdEx := len(m.Dbservers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dbservers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentMetrics_Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentMetrics_Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentMetrics_Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0x15
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonitoring(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeploymentLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeploymentLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintMonitoring(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.EndAt != nil {
		{
			size, err := m.EndAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonitoring(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.StartAt != nil {
		{
			size, err := m.StartAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonitoring(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintMonitoring(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintMonitoring(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintMonitoring(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintMonitoring(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentLogsChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentLogsChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentLogsChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintMonitoring(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonitoring(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonitoring(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDeploymentMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovMonitoring(uint64(l))
	}
	if m.StartAt != nil {
		l = m.StartAt.Size()
		n += 1 + l + sovMonitoring(uint64(l))
	}
	if m.EndAt != nil {
		l = m.EndAt.Size()
		n += 1 + l + sovMonitoring(uint64(l))
	}
	l = len(m.Granularity)
	if l > 0 {
		n += 1 + l + sovMonitoring(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dbservers) > 0 {
		for _, e := range m.Dbservers {
			l = e.Size()
			n += 1 + l + sovMonitoring(uint64(l))
		}
	}
	if len(m.Coordinators) > 0 {
		for _, e := range m.Coordinators {
			l = e.Size()
			n += 1 + l + sovMonitoring(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentMetrics_Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovMonitoring(uint64(l))
	}
	if m.Value != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeploymentLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovMonitoring(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovMonitoring(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovMonitoring(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovMonitoring(uint64(l))
	}
	if m.StartAt != nil {
		l = m.StartAt.Size()
		n += 2 + l + sovMonitoring(uint64(l))
	}
	if m.EndAt != nil {
		l = m.EndAt.Size()
		n += 2 + l + sovMonitoring(uint64(l))
	}
	if m.Limit != 0 {
		n += 2 + sovMonitoring(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentLogsChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovMonitoring(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMonitoring(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonitoring(x uint64) (n int) {
	return sovMonitoring(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDeploymentMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeploymentMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeploymentMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAt == nil {
				m.StartAt = &types.Timestamp{}
			}
			if err := m.StartAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = &types.Timestamp{}
			}
			if err := m.EndAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granularity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granularity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbservers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dbservers = append(m.Dbservers, &DeploymentMetrics_Sample{})
			if err := m.Dbservers[len(m.Dbservers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coordinators = append(m.Coordinators, &DeploymentMetrics_Sample{})
			if err := m.Coordinators[len(m.Coordinators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentMetrics_Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeploymentLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeploymentLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeploymentLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAt == nil {
				m.StartAt = &types.Timestamp{}
			}
			if err := m.StartAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = &types.Timestamp{}
			}
			if err := m.EndAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentLogsChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentLogsChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentLogsChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMonitoring
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonitoring(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonitoring
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonitoring
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonitoring
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonitoring
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonitoring        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonitoring          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonitoring = fmt.Errorf("proto: unexpected end of group")
)
