//
// DISCLAIMER
//
// Copyright 2020-2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: support.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SupportService_GetAPIVersion_FullMethodName        = "/arangodb.cloud.support.v1.SupportService/GetAPIVersion"
	SupportService_ListPlans_FullMethodName            = "/arangodb.cloud.support.v1.SupportService/ListPlans"
	SupportService_GetPlan_FullMethodName              = "/arangodb.cloud.support.v1.SupportService/GetPlan"
	SupportService_ListFaqGroups_FullMethodName        = "/arangodb.cloud.support.v1.SupportService/ListFaqGroups"
	SupportService_ListFaqGroupEntries_FullMethodName  = "/arangodb.cloud.support.v1.SupportService/ListFaqGroupEntries"
	SupportService_CreateSupportRequest_FullMethodName = "/arangodb.cloud.support.v1.SupportService/CreateSupportRequest"
)

// SupportServiceClient is the client API for SupportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SupportService is the API used to query for support.
type SupportServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all support plans that are supported by the ArangoDB cloud.
	// Required permissions:
	// - None
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*PlanList, error)
	// Fetch a support plan by its id.
	// Required permissions:
	// - None
	GetPlan(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Plan, error)
	// Fetch all FAQ groups.
	// Required permissions:
	// - None
	ListFaqGroups(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*FaqGroupList, error)
	// Fetch all FAQ group entries of the FAQ group identified by the given context ID.
	// Required permissions:
	// - None
	ListFaqGroupEntries(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*FaqGroupEntryList, error)
	// Submit a support request.
	// Required permissions:
	// - resourcemanager.organization.get (if organization id is set)
	// - resourcemanager.project.get (if project id is set)
	// - data.deployment.get (if deployment id is set)
	// - None (if no ids are set)
	CreateSupportRequest(ctx context.Context, in *SupportRequest, opts ...grpc.CallOption) (*SupportRequest, error)
}

type supportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportServiceClient(cc grpc.ClientConnInterface) SupportServiceClient {
	return &supportServiceClient{cc}
}

func (c *supportServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, SupportService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportServiceClient) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*PlanList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlanList)
	err := c.cc.Invoke(ctx, SupportService_ListPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportServiceClient) GetPlan(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, SupportService_GetPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportServiceClient) ListFaqGroups(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*FaqGroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FaqGroupList)
	err := c.cc.Invoke(ctx, SupportService_ListFaqGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportServiceClient) ListFaqGroupEntries(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*FaqGroupEntryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FaqGroupEntryList)
	err := c.cc.Invoke(ctx, SupportService_ListFaqGroupEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportServiceClient) CreateSupportRequest(ctx context.Context, in *SupportRequest, opts ...grpc.CallOption) (*SupportRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportRequest)
	err := c.cc.Invoke(ctx, SupportService_CreateSupportRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportServiceServer is the server API for SupportService service.
// All implementations must embed UnimplementedSupportServiceServer
// for forward compatibility.
//
// SupportService is the API used to query for support.
type SupportServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all support plans that are supported by the ArangoDB cloud.
	// Required permissions:
	// - None
	ListPlans(context.Context, *ListPlansRequest) (*PlanList, error)
	// Fetch a support plan by its id.
	// Required permissions:
	// - None
	GetPlan(context.Context, *v1.IDOptions) (*Plan, error)
	// Fetch all FAQ groups.
	// Required permissions:
	// - None
	ListFaqGroups(context.Context, *v1.ListOptions) (*FaqGroupList, error)
	// Fetch all FAQ group entries of the FAQ group identified by the given context ID.
	// Required permissions:
	// - None
	ListFaqGroupEntries(context.Context, *v1.ListOptions) (*FaqGroupEntryList, error)
	// Submit a support request.
	// Required permissions:
	// - resourcemanager.organization.get (if organization id is set)
	// - resourcemanager.project.get (if project id is set)
	// - data.deployment.get (if deployment id is set)
	// - None (if no ids are set)
	CreateSupportRequest(context.Context, *SupportRequest) (*SupportRequest, error)
	mustEmbedUnimplementedSupportServiceServer()
}

// UnimplementedSupportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupportServiceServer struct{}

func (UnimplementedSupportServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedSupportServiceServer) ListPlans(context.Context, *ListPlansRequest) (*PlanList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedSupportServiceServer) GetPlan(context.Context, *v1.IDOptions) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedSupportServiceServer) ListFaqGroups(context.Context, *v1.ListOptions) (*FaqGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaqGroups not implemented")
}
func (UnimplementedSupportServiceServer) ListFaqGroupEntries(context.Context, *v1.ListOptions) (*FaqGroupEntryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaqGroupEntries not implemented")
}
func (UnimplementedSupportServiceServer) CreateSupportRequest(context.Context, *SupportRequest) (*SupportRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupportRequest not implemented")
}
func (UnimplementedSupportServiceServer) mustEmbedUnimplementedSupportServiceServer() {}
func (UnimplementedSupportServiceServer) testEmbeddedByValue()                        {}

// UnsafeSupportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportServiceServer will
// result in compilation errors.
type UnsafeSupportServiceServer interface {
	mustEmbedUnimplementedSupportServiceServer()
}

func RegisterSupportServiceServer(s grpc.ServiceRegistrar, srv SupportServiceServer) {
	// If the following call pancis, it indicates UnimplementedSupportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupportService_ServiceDesc, srv)
}

func _SupportService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportService_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServiceServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportService_ListPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServiceServer).ListPlans(ctx, req.(*ListPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportService_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServiceServer).GetPlan(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportService_ListFaqGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServiceServer).ListFaqGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportService_ListFaqGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServiceServer).ListFaqGroups(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportService_ListFaqGroupEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServiceServer).ListFaqGroupEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportService_ListFaqGroupEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServiceServer).ListFaqGroupEntries(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportService_CreateSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServiceServer).CreateSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportService_CreateSupportRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServiceServer).CreateSupportRequest(ctx, req.(*SupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupportService_ServiceDesc is the grpc.ServiceDesc for SupportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.support.v1.SupportService",
	HandlerType: (*SupportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _SupportService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _SupportService_ListPlans_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _SupportService_GetPlan_Handler,
		},
		{
			MethodName: "ListFaqGroups",
			Handler:    _SupportService_ListFaqGroups_Handler,
		},
		{
			MethodName: "ListFaqGroupEntries",
			Handler:    _SupportService_ListFaqGroupEntries_Handler,
		},
		{
			MethodName: "CreateSupportRequest",
			Handler:    _SupportService_CreateSupportRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "support.proto",
}
