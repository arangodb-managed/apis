//
// DISCLAIMER
//
// Copyright 2020-2025 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: data.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NotificationSeverity keeps possible severities for notifications
type NotificationSeverity int32

const (
	// Defines Info level Notification Severity
	NotificationSeverity_NOTIFICATION_SEVERITY_INFO NotificationSeverity = 0
	// Defines Warning level Notification Severity
	NotificationSeverity_NOTIFICATION_SEVERITY_WARNING NotificationSeverity = 1
	// Defines Critical level Notification Severity
	NotificationSeverity_NOTIFICATION_SEVERITY_CRITICAL NotificationSeverity = 2
)

// Enum value maps for NotificationSeverity.
var (
	NotificationSeverity_name = map[int32]string{
		0: "NOTIFICATION_SEVERITY_INFO",
		1: "NOTIFICATION_SEVERITY_WARNING",
		2: "NOTIFICATION_SEVERITY_CRITICAL",
	}
	NotificationSeverity_value = map[string]int32{
		"NOTIFICATION_SEVERITY_INFO":     0,
		"NOTIFICATION_SEVERITY_WARNING":  1,
		"NOTIFICATION_SEVERITY_CRITICAL": 2,
	}
)

func (x NotificationSeverity) Enum() *NotificationSeverity {
	p := new(NotificationSeverity)
	*p = x
	return p
}

func (x NotificationSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[0].Descriptor()
}

func (NotificationSeverity) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[0]
}

func (x NotificationSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationSeverity.Descriptor instead.
func (NotificationSeverity) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

// RotateDeploymentServerRequest request for rotating out servers for a deployment
type RotateDeploymentServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the deployment this server belongs to.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// The id of the server to rotate out.
	ServerId string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *RotateDeploymentServerRequest) Reset() {
	*x = RotateDeploymentServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateDeploymentServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateDeploymentServerRequest) ProtoMessage() {}

func (x *RotateDeploymentServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateDeploymentServerRequest.ProtoReflect.Descriptor instead.
func (*RotateDeploymentServerRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *RotateDeploymentServerRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *RotateDeploymentServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

// CreateTestDatabaseResponse will contain the json formatted output of the create operation
type CreateTestDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the created database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// Username of the created user
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password of the created user
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Hostname of the database
	Hostname string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Port of the database
	Port string `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CreateTestDatabaseResponse) Reset() {
	*x = CreateTestDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestDatabaseResponse) ProtoMessage() {}

func (x *CreateTestDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestDatabaseResponse.ProtoReflect.Descriptor instead.
func (*CreateTestDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTestDatabaseResponse) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *CreateTestDatabaseResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateTestDatabaseResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateTestDatabaseResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CreateTestDatabaseResponse) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

// Request arguments for CreateTestDatabase
type CreateTestDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the deployment
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *CreateTestDatabaseRequest) Reset() {
	*x = CreateTestDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestDatabaseRequest) ProtoMessage() {}

func (x *CreateTestDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestDatabaseRequest.ProtoReflect.Descriptor instead.
func (*CreateTestDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTestDatabaseRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// RebalanceDeploymentShardsRequest request for rebalancing shards for a deployment
type RebalanceDeploymentShardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the deployment
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *RebalanceDeploymentShardsRequest) Reset() {
	*x = RebalanceDeploymentShardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalanceDeploymentShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceDeploymentShardsRequest) ProtoMessage() {}

func (x *RebalanceDeploymentShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceDeploymentShardsRequest.ProtoReflect.Descriptor instead.
func (*RebalanceDeploymentShardsRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *RebalanceDeploymentShardsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// A Deployment is represents one deployment of an ArangoDB cluster.
type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the deployment.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Name of the deployment
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the deployment
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Identifier of the project that owns this deployment.
	// After creation, this value cannot be changed.
	ProjectId string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Identifier of the region in which the deployment is created.
	// After creation, this value cannot be changed.
	RegionId string `protobuf:"bytes,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// The creation timestamp of the deployment
	// This is a read-only value.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the deployment
	// This is a read-only value.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this deployment is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,9,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Optional identifier of the support plan selected for this deployment.
	// After creation, this value cannot be changed.
	// If no support plan identifier is set, the default support plan is used.
	SupportPlanId string `protobuf:"bytes,10,opt,name=support_plan_id,json=supportPlanId,proto3" json:"support_plan_id,omitempty"`
	// Identifier of the user who created this deployment.
	// This is a read-only value.
	CreatedById string `protobuf:"bytes,11,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// This field must be set to the identifier of the current Terms&Conditions
	// when creating a deployment.
	// If the tier of the organization does not require a non-empty Terms&Condition
	// identifier, this field may be left empty.
	// This is a read-only value after creation.
	AcceptedTermsAndConditionsId string `protobuf:"bytes,12,opt,name=accepted_terms_and_conditions_id,json=acceptedTermsAndConditionsId,proto3" json:"accepted_terms_and_conditions_id,omitempty"`
	// If set, this deployment cannot be deleted.
	// To delete, first update the with locked set to false.
	Locked bool `protobuf:"varint,13,opt,name=locked,proto3" json:"locked,omitempty"`
	// Indicates that this deployment is paused.
	// Use the data.ResumeDeployment method to resume (aka unpause) the deployment.
	// This is a read-only value.
	IsPaused bool `protobuf:"varint,20,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	// The last paused timestamp of the deployment.
	// This is the timestamp that is_paused is transitioned from unset to set.
	// This is a read-only value.
	LastPausedAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=last_paused_at,json=lastPausedAt,proto3" json:"last_paused_at,omitempty"`
	// The last resumed  timestamp of the deployment.
	// This is the timestamp that is_paused is transitioned from set to unset.
	// This is a read-only value.
	LastResumedAt *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=last_resumed_at,json=lastResumedAt,proto3" json:"last_resumed_at,omitempty"`
	// Identifier of the prepaid deployment that this deployment is attached to (if any).
	// This is a read-only value.
	PrepaidDeploymentId string `protobuf:"bytes,23,opt,name=prepaid_deployment_id,json=prepaidDeploymentId,proto3" json:"prepaid_deployment_id,omitempty"`
	// If set, authentication for Foxx requests is disabled.
	// Be default this field is not set for new deployments.
	DisableFoxxAuthentication bool `protobuf:"varint,24,opt,name=disable_foxx_authentication,json=disableFoxxAuthentication,proto3" json:"disable_foxx_authentication,omitempty"`
	// When the prepaid deployments starts (relevant when prepaid_deployment_id is set only)
	// This is a read-only value
	PrepaidDeploymentStartsAt *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=prepaid_deployment_starts_at,json=prepaidDeploymentStartsAt,proto3" json:"prepaid_deployment_starts_at,omitempty"`
	// When the prepaid deployments ends (relevant when prepaid_deployment_id is set only)
	// This is a read-only value
	PrepaidDeploymentEndsAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=prepaid_deployment_ends_at,json=prepaidDeploymentEndsAt,proto3" json:"prepaid_deployment_ends_at,omitempty"`
	// Whenever deployment can be updated to new values from prepaid deployment
	// This is a read-only value
	IsPrepaidDeploymentUpdateAvailable bool `protobuf:"varint,27,opt,name=is_prepaid_deployment_update_available,json=isPrepaidDeploymentUpdateAvailable,proto3" json:"is_prepaid_deployment_update_available,omitempty"`
	// Set if the deployment use a private endpoint.
	// This is a read-only value after creation.
	// If set during creation a private endpoint service will be created.
	PrivateEndpoint bool `protobuf:"varint,30,opt,name=private_endpoint,json=privateEndpoint,proto3" json:"private_endpoint,omitempty"`
	// ArangoDB version to use for this deployment.
	// See Version.version.
	// If you change this value to a higher version,
	// the deployment will be upgraded.
	// If you change this value to a lower patch value,
	// the deployment will be downgraded.
	// Any attempt to change to a lower minor or major version
	// is considered an invalid request.
	// Any attempt to change to a version that is not in the
	// list of available versions is considered an invalid request.
	Version string `protobuf:"bytes,101,opt,name=version,proto3" json:"version,omitempty"`
	// If set, this deployment will be upgraded to the ArangoDB release with the
	// version as listed in this field.
	ReplaceVersionBy *ReplaceVersionBy `protobuf:"bytes,104,opt,name=replace_version_by,json=replaceVersionBy,proto3" json:"replace_version_by,omitempty"`
	// If set, it is recommended to upgrade to the ArangoDB release with the
	// version as listed in this field.
	UpgradeRecommendation *UpgradeVersionRecommendation `protobuf:"bytes,105,opt,name=upgrade_recommendation,json=upgradeRecommendation,proto3" json:"upgrade_recommendation,omitempty"`
	// If set, the version used by this deployment is no longer actively supported.
	// This is a readonly field.
	VersionIsEndOfLife bool                        `protobuf:"varint,701,opt,name=version_is_end_of_life,json=versionIsEndOfLife,proto3" json:"version_is_end_of_life,omitempty"`
	Certificates       *Deployment_CertificateSpec `protobuf:"bytes,102,opt,name=certificates,proto3" json:"certificates,omitempty"`
	Servers            *Deployment_ServersSpec     `protobuf:"bytes,103,opt,name=servers,proto3" json:"servers,omitempty"`
	// Optional identifier of IP allowlist to use for this deployment.
	IpallowlistId string                `protobuf:"bytes,109,opt,name=ipallowlist_id,json=ipallowlistId,proto3" json:"ipallowlist_id,omitempty"`
	Model         *Deployment_ModelSpec `protobuf:"bytes,106,opt,name=model,proto3" json:"model,omitempty"`
	// If provided, dataclusterd will use this custom image tag instead of the configured one for a given version.
	// Further, ImagePullPolicy will be set to Always.
	// This field can only be set by selected organizations.
	CustomImage string `protobuf:"bytes,107,opt,name=custom_image,json=customImage,proto3" json:"custom_image,omitempty"`
	// Optional identifier of IAM provider to use for this deployment.
	IamproviderId string `protobuf:"bytes,108,opt,name=iamprovider_id,json=iamproviderId,proto3" json:"iamprovider_id,omitempty"`
	// Optional identifier of disk performance to use for this deployment.
	DiskPerformanceId string `protobuf:"bytes,120,opt,name=disk_performance_id,json=diskPerformanceId,proto3" json:"disk_performance_id,omitempty"`
	// If set, the disk performance cannot be updated, due to other reasons than the disk rate limit.
	// This is a read-only value
	DiskPerformanceLocked bool `protobuf:"varint,121,opt,name=disk_performance_locked,json=diskPerformanceLocked,proto3" json:"disk_performance_locked,omitempty"`
	// Disk rate limit is the (fixed) period required to wait before a next disk action can be executed.
	// A value of 0 means that there is no rate limit.
	// If now - (last_disk_performance_updated_at or last_disk_size_updated_at) > disk_rate_limit_period it is not allowed to update
	// dbserver_disk_size or disk_performance_id.
	DiskRateLimitPeriod *durationpb.Duration `protobuf:"bytes,122,opt,name=disk_rate_limit_period,json=diskRateLimitPeriod,proto3" json:"disk_rate_limit_period,omitempty"`
	// Timestamp when the last time the disk performance has been updated.
	// This is a read-only value
	LastDiskPerformanceUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,123,opt,name=last_disk_performance_updated_at,json=lastDiskPerformanceUpdatedAt,proto3" json:"last_disk_performance_updated_at,omitempty"`
	// Timestamp when the last time the disk size has been updated.
	// This is a read-only value
	LastDiskSizeUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,124,opt,name=last_disk_size_updated_at,json=lastDiskSizeUpdatedAt,proto3" json:"last_disk_size_updated_at,omitempty"`
	// Disk rate limit active is the active period required to wait before a next disk action can be executed.
	// The difference between disk_rate_limit_period and this field is that disk_rate_limit_period is a constant value
	// (independent) if the rate limit is active, this field will count down, if the field is 0 you can modify.
	// If this field is set it is not allowed to update dbserver_disk_size or disk_performance_id.
	// This is a read-only value
	DiskRateLimitActive *durationpb.Duration `protobuf:"bytes,125,opt,name=disk_rate_limit_active,json=diskRateLimitActive,proto3" json:"disk_rate_limit_active,omitempty"`
	Status              *Deployment_Status   `protobuf:"bytes,201,opt,name=status,proto3" json:"status,omitempty"`
	// Detailed size of the deployment
	// This is a read-only field.
	Size       *DeploymentSize        `protobuf:"bytes,202,opt,name=size,proto3" json:"size,omitempty"`
	Expiration *Deployment_Expiration `protobuf:"bytes,301,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Information about a backup restore.
	// If this field is set the deployment will be restored to that backup.
	// This is a read-only field. To set this field please use the backup service RestoreBackup method.
	BackupRestore *Deployment_BackupRestoreSpec `protobuf:"bytes,401,opt,name=backup_restore,json=backupRestore,proto3" json:"backup_restore,omitempty"`
	// Recommendations made for deployments using the "oneshard" or "sharded" model.
	DeploymentRecommendations []*DeploymentSizeRecommendation `protobuf:"bytes,501,rep,name=deployment_recommendations,json=deploymentRecommendations,proto3" json:"deployment_recommendations,omitempty"`
	// Set if this deployment is a clone and should be handled differently. After bootstrapping a clone
	// needs a restore operation.
	// This is a read-only property
	IsClone bool `protobuf:"varint,600,opt,name=is_clone,json=isClone,proto3" json:"is_clone,omitempty"`
	// The ID of the backup to restore this clone deployment from.
	// This is a read-only property
	CloneBackupId string `protobuf:"bytes,601,opt,name=clone_backup_id,json=cloneBackupId,proto3" json:"clone_backup_id,omitempty"`
	// Deployment's notification settings
	NotificationSettings *Deployment_NotificationSettings `protobuf:"bytes,610,opt,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	// Deployment's disk autoscaling settings
	// [Deprecated] This setting isn't supported anymore.
	//
	//	To increase disk space you need to switch to a larger node-size [e.g. A8 (with 80Gib)--> A16 (with 160 Gib)]
	DiskAutoSizeSettings *Deployment_DiskAutoSizeSettings `protobuf:"bytes,611,opt,name=disk_auto_size_settings,json=diskAutoSizeSettings,proto3" json:"disk_auto_size_settings,omitempty"`
	// Determines if root's password scheduled rotation is enabled for the deployment.
	// This is a readonly field.
	IsScheduledRootPasswordRotationEnabled bool `protobuf:"varint,612,opt,name=is_scheduled_root_password_rotation_enabled,json=isScheduledRootPasswordRotationEnabled,proto3" json:"is_scheduled_root_password_rotation_enabled,omitempty"`
	// Time when the last time root password rotated for the deployment.
	// For the existing deployments, this field is not set until they enable scheduled root password rotation.
	// For the new deployments, this field will have the same value with deployment's `created_at`.
	// This is a readonly field.
	LastRootPasswordRotatedAt *timestamppb.Timestamp `protobuf:"bytes,613,opt,name=last_root_password_rotated_at,json=lastRootPasswordRotatedAt,proto3" json:"last_root_password_rotated_at,omitempty"`
	// Optional identifier of the deployment profile for this deployment.
	// After creation, this value cannot be changed.
	DeploymentProfileId string `protobuf:"bytes,614,opt,name=deployment_profile_id,json=deploymentProfileId,proto3" json:"deployment_profile_id,omitempty"`
	// Determines if deployment is using platform authentication
	IsPlatformAuthenticationEnabled bool `protobuf:"varint,615,opt,name=is_platform_authentication_enabled,json=isPlatformAuthenticationEnabled,proto3" json:"is_platform_authentication_enabled,omitempty"`
	// The (optional) intended use-case for this deployment
	IntendedUseCase string `protobuf:"bytes,616,opt,name=intended_use_case,json=intendedUseCase,proto3" json:"intended_use_case,omitempty"`
	// If set to true, drop support for deprecated VST protocol and improve resilience.
	// Defaults to false.
	DropVstSupport bool `protobuf:"varint,617,opt,name=drop_vst_support,json=dropVstSupport,proto3" json:"drop_vst_support,omitempty"`
	// Defines notifications attached to the Deployment
	Notifications map[string]*Notification `protobuf:"bytes,618,rep,name=notifications,proto3" json:"notifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If set to true, arangodb platform is enabled for this deployment
	ArangodbPlatformEnabled bool `protobuf:"varint,619,opt,name=arangodb_platform_enabled,json=arangodbPlatformEnabled,proto3" json:"arangodb_platform_enabled,omitempty"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Deployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deployment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Deployment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Deployment) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *Deployment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Deployment) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Deployment) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Deployment) GetSupportPlanId() string {
	if x != nil {
		return x.SupportPlanId
	}
	return ""
}

func (x *Deployment) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *Deployment) GetAcceptedTermsAndConditionsId() string {
	if x != nil {
		return x.AcceptedTermsAndConditionsId
	}
	return ""
}

func (x *Deployment) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Deployment) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

func (x *Deployment) GetLastPausedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPausedAt
	}
	return nil
}

func (x *Deployment) GetLastResumedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastResumedAt
	}
	return nil
}

func (x *Deployment) GetPrepaidDeploymentId() string {
	if x != nil {
		return x.PrepaidDeploymentId
	}
	return ""
}

func (x *Deployment) GetDisableFoxxAuthentication() bool {
	if x != nil {
		return x.DisableFoxxAuthentication
	}
	return false
}

func (x *Deployment) GetPrepaidDeploymentStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PrepaidDeploymentStartsAt
	}
	return nil
}

func (x *Deployment) GetPrepaidDeploymentEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PrepaidDeploymentEndsAt
	}
	return nil
}

func (x *Deployment) GetIsPrepaidDeploymentUpdateAvailable() bool {
	if x != nil {
		return x.IsPrepaidDeploymentUpdateAvailable
	}
	return false
}

func (x *Deployment) GetPrivateEndpoint() bool {
	if x != nil {
		return x.PrivateEndpoint
	}
	return false
}

func (x *Deployment) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Deployment) GetReplaceVersionBy() *ReplaceVersionBy {
	if x != nil {
		return x.ReplaceVersionBy
	}
	return nil
}

func (x *Deployment) GetUpgradeRecommendation() *UpgradeVersionRecommendation {
	if x != nil {
		return x.UpgradeRecommendation
	}
	return nil
}

func (x *Deployment) GetVersionIsEndOfLife() bool {
	if x != nil {
		return x.VersionIsEndOfLife
	}
	return false
}

func (x *Deployment) GetCertificates() *Deployment_CertificateSpec {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *Deployment) GetServers() *Deployment_ServersSpec {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *Deployment) GetIpallowlistId() string {
	if x != nil {
		return x.IpallowlistId
	}
	return ""
}

func (x *Deployment) GetModel() *Deployment_ModelSpec {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *Deployment) GetCustomImage() string {
	if x != nil {
		return x.CustomImage
	}
	return ""
}

func (x *Deployment) GetIamproviderId() string {
	if x != nil {
		return x.IamproviderId
	}
	return ""
}

func (x *Deployment) GetDiskPerformanceId() string {
	if x != nil {
		return x.DiskPerformanceId
	}
	return ""
}

func (x *Deployment) GetDiskPerformanceLocked() bool {
	if x != nil {
		return x.DiskPerformanceLocked
	}
	return false
}

func (x *Deployment) GetDiskRateLimitPeriod() *durationpb.Duration {
	if x != nil {
		return x.DiskRateLimitPeriod
	}
	return nil
}

func (x *Deployment) GetLastDiskPerformanceUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDiskPerformanceUpdatedAt
	}
	return nil
}

func (x *Deployment) GetLastDiskSizeUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDiskSizeUpdatedAt
	}
	return nil
}

func (x *Deployment) GetDiskRateLimitActive() *durationpb.Duration {
	if x != nil {
		return x.DiskRateLimitActive
	}
	return nil
}

func (x *Deployment) GetStatus() *Deployment_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Deployment) GetSize() *DeploymentSize {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Deployment) GetExpiration() *Deployment_Expiration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Deployment) GetBackupRestore() *Deployment_BackupRestoreSpec {
	if x != nil {
		return x.BackupRestore
	}
	return nil
}

func (x *Deployment) GetDeploymentRecommendations() []*DeploymentSizeRecommendation {
	if x != nil {
		return x.DeploymentRecommendations
	}
	return nil
}

func (x *Deployment) GetIsClone() bool {
	if x != nil {
		return x.IsClone
	}
	return false
}

func (x *Deployment) GetCloneBackupId() string {
	if x != nil {
		return x.CloneBackupId
	}
	return ""
}

func (x *Deployment) GetNotificationSettings() *Deployment_NotificationSettings {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *Deployment) GetDiskAutoSizeSettings() *Deployment_DiskAutoSizeSettings {
	if x != nil {
		return x.DiskAutoSizeSettings
	}
	return nil
}

func (x *Deployment) GetIsScheduledRootPasswordRotationEnabled() bool {
	if x != nil {
		return x.IsScheduledRootPasswordRotationEnabled
	}
	return false
}

func (x *Deployment) GetLastRootPasswordRotatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRootPasswordRotatedAt
	}
	return nil
}

func (x *Deployment) GetDeploymentProfileId() string {
	if x != nil {
		return x.DeploymentProfileId
	}
	return ""
}

func (x *Deployment) GetIsPlatformAuthenticationEnabled() bool {
	if x != nil {
		return x.IsPlatformAuthenticationEnabled
	}
	return false
}

func (x *Deployment) GetIntendedUseCase() string {
	if x != nil {
		return x.IntendedUseCase
	}
	return ""
}

func (x *Deployment) GetDropVstSupport() bool {
	if x != nil {
		return x.DropVstSupport
	}
	return false
}

func (x *Deployment) GetNotifications() map[string]*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Deployment) GetArangodbPlatformEnabled() bool {
	if x != nil {
		return x.ArangodbPlatformEnabled
	}
	return false
}

// NodeSize specifies the size constraints of different data nodes.
type NodeSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the node size
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human readable name of the node size
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Amount of memory (in GB) that is available on this size of node.
	MemorySize int32 `protobuf:"varint,3,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Minimum amount of disk (in GB) that is available on this size of node.
	MinDiskSize int32 `protobuf:"varint,4,opt,name=min_disk_size,json=minDiskSize,proto3" json:"min_disk_size,omitempty"`
	// Maximum amount of disk (in GB) that is available on this size of node.
	MaxDiskSize int32 `protobuf:"varint,5,opt,name=max_disk_size,json=maxDiskSize,proto3" json:"max_disk_size,omitempty"`
	// CPU size that is available on this size of node (e.g. standard or high).
	CpuSize string `protobuf:"bytes,6,opt,name=cpu_size,json=cpuSize,proto3" json:"cpu_size,omitempty"`
	// If set, contains list of possible disk sizes (in GB) for the node.
	// In that case, this field overrides the min_disk_size & max_disk_size fields.
	DiskSizes []int32 `protobuf:"varint,7,rep,packed,name=disk_sizes,json=diskSizes,proto3" json:"disk_sizes,omitempty"`
}

func (x *NodeSize) Reset() {
	*x = NodeSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSize) ProtoMessage() {}

func (x *NodeSize) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSize.ProtoReflect.Descriptor instead.
func (*NodeSize) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *NodeSize) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeSize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeSize) GetMemorySize() int32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *NodeSize) GetMinDiskSize() int32 {
	if x != nil {
		return x.MinDiskSize
	}
	return 0
}

func (x *NodeSize) GetMaxDiskSize() int32 {
	if x != nil {
		return x.MaxDiskSize
	}
	return 0
}

func (x *NodeSize) GetCpuSize() string {
	if x != nil {
		return x.CpuSize
	}
	return ""
}

func (x *NodeSize) GetDiskSizes() []int32 {
	if x != nil {
		return x.DiskSizes
	}
	return nil
}

// List of node sizes.
type NodeSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*NodeSize `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NodeSizeList) Reset() {
	*x = NodeSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSizeList) ProtoMessage() {}

func (x *NodeSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSizeList.ProtoReflect.Descriptor instead.
func (*NodeSizeList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *NodeSizeList) GetItems() []*NodeSize {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListNodeSizes
type NodeSizesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of project that will own a deployment.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Identifier of a region in which a deployment will be created.
	RegionId string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// If set, project_id & region_id will be taken from this deployment.
	// This also causes the node_size used by this deployment to be included
	// in the result, if it it would not match for new deployments.
	DeploymentId string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Identifier of a model of a new deployment will be created.
	// If set, all node sizes available for this model will be returned,
	// otherwise only node sizes that have no restrictions on model will be returned.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// Optional identifier of organization that will own a deployment.
	// Ignored if project_id or deployment_id is set.
	OrganizationId string `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Optional field to include node sizes that are otherwise restricted
	// for the specified projectID / organizationID.
	// By default, the result is restricted based on the organization and project tiers/quotas.
	// Ignored when project_id is "all" and organization_id is not provided.
	IncludeRestricted bool `protobuf:"varint,7,opt,name=include_restricted,json=includeRestricted,proto3" json:"include_restricted,omitempty"`
}

func (x *NodeSizesRequest) Reset() {
	*x = NodeSizesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSizesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSizesRequest) ProtoMessage() {}

func (x *NodeSizesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSizesRequest.ProtoReflect.Descriptor instead.
func (*NodeSizesRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *NodeSizesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *NodeSizesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *NodeSizesRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *NodeSizesRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *NodeSizesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *NodeSizesRequest) GetIncludeRestricted() bool {
	if x != nil {
		return x.IncludeRestricted
	}
	return false
}

// DeploymentModel specifies the a specific model of deploying
// arangodb clusters.
type DeploymentModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the model (e.g. oneshard)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human readable name of the model (e.g. One shard)
	Name     string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Features *DeploymentModel_Features `protobuf:"bytes,3,opt,name=features,proto3" json:"features,omitempty"`
	// Limit the time-to-live of deployments created with this model.
	// Time-to-live (till expiration) is expressed in seconds.
	// A value of '0' means no expiration.
	DeploymentTtl int64 `protobuf:"varint,4,opt,name=deployment_ttl,json=deploymentTtl,proto3" json:"deployment_ttl,omitempty"`
}

func (x *DeploymentModel) Reset() {
	*x = DeploymentModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentModel) ProtoMessage() {}

func (x *DeploymentModel) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentModel.ProtoReflect.Descriptor instead.
func (*DeploymentModel) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *DeploymentModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeploymentModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentModel) GetFeatures() *DeploymentModel_Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *DeploymentModel) GetDeploymentTtl() int64 {
	if x != nil {
		return x.DeploymentTtl
	}
	return 0
}

// List of deployment models.
type DeploymentModelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*DeploymentModel `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DeploymentModelList) Reset() {
	*x = DeploymentModelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentModelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentModelList) ProtoMessage() {}

func (x *DeploymentModelList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentModelList.ProtoReflect.Descriptor instead.
func (*DeploymentModelList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

func (x *DeploymentModelList) GetItems() []*DeploymentModel {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListDeploymentModels
type ListDeploymentModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of project that will own a deployment.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Optional identifier of a deployment, so the current model can be added to the list if needed
	// This deployment should be inside the provided project
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *ListDeploymentModelsRequest) Reset() {
	*x = ListDeploymentModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentModelsRequest) ProtoMessage() {}

func (x *ListDeploymentModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentModelsRequest.ProtoReflect.Descriptor instead.
func (*ListDeploymentModelsRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10}
}

func (x *ListDeploymentModelsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListDeploymentModelsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// CPUSize specifies the a specific level of CPU for a node.
type CPUSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the size (e.g. standard)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human readable name of the size (e.g. Standard)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CPUSize) Reset() {
	*x = CPUSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSize) ProtoMessage() {}

func (x *CPUSize) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSize.ProtoReflect.Descriptor instead.
func (*CPUSize) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11}
}

func (x *CPUSize) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CPUSize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// List of CPU sizes.
type CPUSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CPUSize `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CPUSizeList) Reset() {
	*x = CPUSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSizeList) ProtoMessage() {}

func (x *CPUSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSizeList.ProtoReflect.Descriptor instead.
func (*CPUSizeList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{12}
}

func (x *CPUSizeList) GetItems() []*CPUSize {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListCPUSizes
type ListCPUSizesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of project that will own a deployment.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Optional identifier of a deployment for which CPU sizes are requested.
	// If specified, only those CPU sizes are listed, that an existing deployment is allowed to have.
	// If specified, project_id field is ignored, and instead read from the deployment.
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *ListCPUSizesRequest) Reset() {
	*x = ListCPUSizesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCPUSizesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCPUSizesRequest) ProtoMessage() {}

func (x *ListCPUSizesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCPUSizesRequest.ProtoReflect.Descriptor instead.
func (*ListCPUSizesRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13}
}

func (x *ListCPUSizesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListCPUSizesRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// Request arguments for GetDeploymentCredentials
type DeploymentCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of deployment to request credentials for.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Reason for requesting the credentials
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeploymentCredentialsRequest) Reset() {
	*x = DeploymentCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentCredentialsRequest) ProtoMessage() {}

func (x *DeploymentCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentCredentialsRequest.ProtoReflect.Descriptor instead.
func (*DeploymentCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{14}
}

func (x *DeploymentCredentialsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeploymentCredentialsRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Result for GetDeploymentCredentials
type DeploymentCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the user for which credentials were asked.
	// Default to username of root user.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password of the user for which credentials were asked.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DeploymentCredentials) Reset() {
	*x = DeploymentCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentCredentials) ProtoMessage() {}

func (x *DeploymentCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentCredentials.ProtoReflect.Descriptor instead.
func (*DeploymentCredentials) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{15}
}

func (x *DeploymentCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeploymentCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// List of Deployments.
type DeploymentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual deployments
	Items []*Deployment `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Budget for deployments
	Budget *v1.Budget `protobuf:"bytes,2,opt,name=budget,proto3" json:"budget,omitempty"`
}

func (x *DeploymentList) Reset() {
	*x = DeploymentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentList) ProtoMessage() {}

func (x *DeploymentList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentList.ProtoReflect.Descriptor instead.
func (*DeploymentList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{16}
}

func (x *DeploymentList) GetItems() []*Deployment {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DeploymentList) GetBudget() *v1.Budget {
	if x != nil {
		return x.Budget
	}
	return nil
}

// Version of an ArangoDB release
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version in the format of major.minor.patch
	// Format details can be found at: https://semver.org/
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// If set, deployments using this version will be upgraded to the ArangoDB release with the
	// version as listed in this message.
	ReplaceBy *ReplaceVersionBy `protobuf:"bytes,2,opt,name=replace_by,json=replaceBy,proto3" json:"replace_by,omitempty"`
	// If set, deployments using this version are recommend to be upgraded to the ArangoDB release with the
	// version as listed in this message.
	UpgradeRecommendation *UpgradeVersionRecommendation `protobuf:"bytes,3,opt,name=upgrade_recommendation,json=upgradeRecommendation,proto3" json:"upgrade_recommendation,omitempty"`
	// If set, this version is not longer actively supported.
	IsEndOfLife bool `protobuf:"varint,4,opt,name=is_end_of_life,json=isEndOfLife,proto3" json:"is_end_of_life,omitempty"`
	// ArangoDB version release notes
	ReleaseNotesUrl string `protobuf:"bytes,5,opt,name=release_notes_url,json=releaseNotesUrl,proto3" json:"release_notes_url,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{17}
}

func (x *Version) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Version) GetReplaceBy() *ReplaceVersionBy {
	if x != nil {
		return x.ReplaceBy
	}
	return nil
}

func (x *Version) GetUpgradeRecommendation() *UpgradeVersionRecommendation {
	if x != nil {
		return x.UpgradeRecommendation
	}
	return nil
}

func (x *Version) GetIsEndOfLife() bool {
	if x != nil {
		return x.IsEndOfLife
	}
	return false
}

func (x *Version) GetReleaseNotesUrl() string {
	if x != nil {
		return x.ReleaseNotesUrl
	}
	return ""
}

// ReplaceVersionBy holds replacement instructions.
type ReplaceVersionBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the ArangoDB release that it will be upgraded to.
	// Version in the format of major.minor.patch
	// Format details can be found at: https://semver.org/
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Human readable reason why this version will be replaced.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Date when the current version will be replaced automatically with the new version.
	// If this field isn’t set (or present) it means no automatic update will happen.
	AutoUpdateDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=auto_update_date,json=autoUpdateDate,proto3" json:"auto_update_date,omitempty"`
}

func (x *ReplaceVersionBy) Reset() {
	*x = ReplaceVersionBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceVersionBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceVersionBy) ProtoMessage() {}

func (x *ReplaceVersionBy) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceVersionBy.ProtoReflect.Descriptor instead.
func (*ReplaceVersionBy) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{18}
}

func (x *ReplaceVersionBy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReplaceVersionBy) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ReplaceVersionBy) GetAutoUpdateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AutoUpdateDate
	}
	return nil
}

// UpgradeVersionRecommendation holds a recommendation for updating this version.
type UpgradeVersionRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the ArangoDB release that it it is recommend to upgraded to.
	// Version in the format of major.minor.patch
	// Format details can be found at: https://semver.org/
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Human readable reason why this version should be upgraded.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UpgradeVersionRecommendation) Reset() {
	*x = UpgradeVersionRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeVersionRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeVersionRecommendation) ProtoMessage() {}

func (x *UpgradeVersionRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeVersionRecommendation.ProtoReflect.Descriptor instead.
func (*UpgradeVersionRecommendation) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{19}
}

func (x *UpgradeVersionRecommendation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpgradeVersionRecommendation) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// List of Versions.
type VersionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Version `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VersionList) Reset() {
	*x = VersionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionList) ProtoMessage() {}

func (x *VersionList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionList.ProtoReflect.Descriptor instead.
func (*VersionList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{20}
}

func (x *VersionList) GetItems() []*Version {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListVersions.
type ListVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common list options
	Options *v1.ListOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	// If set, the result includes all versions for that are available for the
	// organization identified by this ID.
	// If not set, only versions are returned that are available to all organizations.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// If set, only versions will be returned that are safe to upgrade to from this version.
	CurrentVersion string `protobuf:"bytes,3,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
}

func (x *ListVersionsRequest) Reset() {
	*x = ListVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsRequest) ProtoMessage() {}

func (x *ListVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListVersionsRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{21}
}

func (x *ListVersionsRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListVersionsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListVersionsRequest) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

// Request arguments for ListServersSpecLimits
type ServersSpecLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of project that will own a deployment.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Identifier of a region in which a deployment will be created.
	RegionId string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Optional identifier of a deployment for which compatible server specifications are request.
	DeploymentId string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *ServersSpecLimitsRequest) Reset() {
	*x = ServersSpecLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServersSpecLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServersSpecLimitsRequest) ProtoMessage() {}

func (x *ServersSpecLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServersSpecLimitsRequest.ProtoReflect.Descriptor instead.
func (*ServersSpecLimitsRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{22}
}

func (x *ServersSpecLimitsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ServersSpecLimitsRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ServersSpecLimitsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// Limits of allowed values for fields of Deployment.ServersSpec.
type ServersSpecLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limits for the number of coordinators of the deployment
	Coordinators *ServersSpecLimits_Limits `protobuf:"bytes,1,opt,name=coordinators,proto3" json:"coordinators,omitempty"`
	// Possible values for the amount of memory (in GB) to allocate
	// for coordinators.
	CoordinatorMemorySize *ServersSpecLimits_Limits `protobuf:"bytes,2,opt,name=coordinator_memory_size,json=coordinatorMemorySize,proto3" json:"coordinator_memory_size,omitempty"`
	// Limits for the number of dbservers of the deployment
	Dbservers *ServersSpecLimits_Limits `protobuf:"bytes,11,opt,name=dbservers,proto3" json:"dbservers,omitempty"`
	// Possible values for the amount of memory (in GB) to allocate
	// for dbservers.
	DbserverMemorySize *ServersSpecLimits_Limits `protobuf:"bytes,12,opt,name=dbserver_memory_size,json=dbserverMemorySize,proto3" json:"dbserver_memory_size,omitempty"`
	// Amount of disk space (in GB) to allocate for dbservers.
	DbserverDiskSize *ServersSpecLimits_Limits `protobuf:"bytes,13,opt,name=dbserver_disk_size,json=dbserverDiskSize,proto3" json:"dbserver_disk_size,omitempty"`
	// Possible values for the amount of memory (in GB) to allocate
	// for pairs of coordinator, dbserver.
	NodeMemorySize *ServersSpecLimits_Limits `protobuf:"bytes,21,opt,name=node_memory_size,json=nodeMemorySize,proto3" json:"node_memory_size,omitempty"`
	// Possible values for the number of nodes.
	// Value must be min/max (not using allowed_values)
	NodeCount *ServersSpecLimits_Limits `protobuf:"bytes,22,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
}

func (x *ServersSpecLimits) Reset() {
	*x = ServersSpecLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServersSpecLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServersSpecLimits) ProtoMessage() {}

func (x *ServersSpecLimits) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServersSpecLimits.ProtoReflect.Descriptor instead.
func (*ServersSpecLimits) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{23}
}

func (x *ServersSpecLimits) GetCoordinators() *ServersSpecLimits_Limits {
	if x != nil {
		return x.Coordinators
	}
	return nil
}

func (x *ServersSpecLimits) GetCoordinatorMemorySize() *ServersSpecLimits_Limits {
	if x != nil {
		return x.CoordinatorMemorySize
	}
	return nil
}

func (x *ServersSpecLimits) GetDbservers() *ServersSpecLimits_Limits {
	if x != nil {
		return x.Dbservers
	}
	return nil
}

func (x *ServersSpecLimits) GetDbserverMemorySize() *ServersSpecLimits_Limits {
	if x != nil {
		return x.DbserverMemorySize
	}
	return nil
}

func (x *ServersSpecLimits) GetDbserverDiskSize() *ServersSpecLimits_Limits {
	if x != nil {
		return x.DbserverDiskSize
	}
	return nil
}

func (x *ServersSpecLimits) GetNodeMemorySize() *ServersSpecLimits_Limits {
	if x != nil {
		return x.NodeMemorySize
	}
	return nil
}

func (x *ServersSpecLimits) GetNodeCount() *ServersSpecLimits_Limits {
	if x != nil {
		return x.NodeCount
	}
	return nil
}

// Request arguments for CalculateDeploymentSize
type CalculateDeploymentSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of coordinators of the deployment
	// This field is ignored unless model is "flexible".
	Coordinators int32 `protobuf:"varint,1,opt,name=coordinators,proto3" json:"coordinators,omitempty"`
	// Amount of memory (in GB) to allocate for each coordinator.
	// This field is ignored unless model is "flexible".
	CoordinatorMemorySize int32 `protobuf:"varint,2,opt,name=coordinator_memory_size,json=coordinatorMemorySize,proto3" json:"coordinator_memory_size,omitempty"`
	// Number of dbservers of the deployment
	// This field is ignored unless model is "flexible".
	Dbservers int32 `protobuf:"varint,11,opt,name=dbservers,proto3" json:"dbservers,omitempty"`
	// Amount of memory (in GB) to allocate for each dbserver.
	// This field is ignored unless model is "flexible".
	DbserverMemorySize int32 `protobuf:"varint,12,opt,name=dbserver_memory_size,json=dbserverMemorySize,proto3" json:"dbserver_memory_size,omitempty"`
	// Amount of disk space (in GB) to allocate for each dbserver.
	// This field is ignored unless model is "flexible".
	DbserverDiskSize int32 `protobuf:"varint,13,opt,name=dbserver_disk_size,json=dbserverDiskSize,proto3" json:"dbserver_disk_size,omitempty"`
	// Type of model being used
	Model string `protobuf:"bytes,21,opt,name=model,proto3" json:"model,omitempty"`
	// Size of nodes being used
	NodeSizeId string `protobuf:"bytes,22,opt,name=node_size_id,json=nodeSizeId,proto3" json:"node_size_id,omitempty"`
	// Number of nodes being used
	NodeCount int32 `protobuf:"varint,23,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Amount of disk space per node (in GB)
	NodeDiskSize int32 `protobuf:"varint,34,opt,name=node_disk_size,json=nodeDiskSize,proto3" json:"node_disk_size,omitempty"`
	// ID of region in which the deployment will be created.
	RegionId string `protobuf:"bytes,50,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *CalculateDeploymentSizeRequest) Reset() {
	*x = CalculateDeploymentSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateDeploymentSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateDeploymentSizeRequest) ProtoMessage() {}

func (x *CalculateDeploymentSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateDeploymentSizeRequest.ProtoReflect.Descriptor instead.
func (*CalculateDeploymentSizeRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{24}
}

func (x *CalculateDeploymentSizeRequest) GetCoordinators() int32 {
	if x != nil {
		return x.Coordinators
	}
	return 0
}

func (x *CalculateDeploymentSizeRequest) GetCoordinatorMemorySize() int32 {
	if x != nil {
		return x.CoordinatorMemorySize
	}
	return 0
}

func (x *CalculateDeploymentSizeRequest) GetDbservers() int32 {
	if x != nil {
		return x.Dbservers
	}
	return 0
}

func (x *CalculateDeploymentSizeRequest) GetDbserverMemorySize() int32 {
	if x != nil {
		return x.DbserverMemorySize
	}
	return 0
}

func (x *CalculateDeploymentSizeRequest) GetDbserverDiskSize() int32 {
	if x != nil {
		return x.DbserverDiskSize
	}
	return 0
}

func (x *CalculateDeploymentSizeRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CalculateDeploymentSizeRequest) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *CalculateDeploymentSizeRequest) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *CalculateDeploymentSizeRequest) GetNodeDiskSize() int32 {
	if x != nil {
		return x.NodeDiskSize
	}
	return 0
}

func (x *CalculateDeploymentSizeRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

// Result of CalculateDeploymentSize
type DeploymentSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of agents
	Agents int32 `protobuf:"varint,1,opt,name=agents,proto3" json:"agents,omitempty"`
	// Amount of memory (in GB) to allocate for each agent.
	AgentMemorySize int32 `protobuf:"varint,2,opt,name=agent_memory_size,json=agentMemorySize,proto3" json:"agent_memory_size,omitempty"`
	// Amount of disk space (in GB) to allocate for each agent.
	AgentDiskSize int32 `protobuf:"varint,3,opt,name=agent_disk_size,json=agentDiskSize,proto3" json:"agent_disk_size,omitempty"`
	// Total (combined) amount of memory (in GB) used by all servers (agents, coordinators & dbservers)
	TotalMemorySize int32 `protobuf:"varint,11,opt,name=total_memory_size,json=totalMemorySize,proto3" json:"total_memory_size,omitempty"`
	// Total (combined) amount of disk space (in GB) used by all servers (agents & dbservers)
	TotalDiskSize int32 `protobuf:"varint,12,opt,name=total_disk_size,json=totalDiskSize,proto3" json:"total_disk_size,omitempty"`
	// Number of coordinators
	Coordinators int32 `protobuf:"varint,21,opt,name=coordinators,proto3" json:"coordinators,omitempty"`
	// Amount of memory (in GB) to allocate for each coordinator.
	CoordinatorMemorySize int32 `protobuf:"varint,22,opt,name=coordinator_memory_size,json=coordinatorMemorySize,proto3" json:"coordinator_memory_size,omitempty"`
	// Number of dbservers
	Dbservers int32 `protobuf:"varint,31,opt,name=dbservers,proto3" json:"dbservers,omitempty"`
	// Amount of memory (in GB) to allocate for each dbserver.
	DbserverMemorySize int32 `protobuf:"varint,32,opt,name=dbserver_memory_size,json=dbserverMemorySize,proto3" json:"dbserver_memory_size,omitempty"`
	// Amount of disk space (in GB) to allocate for each dbserver.
	DbserverDiskSize int32 `protobuf:"varint,33,opt,name=dbserver_disk_size,json=dbserverDiskSize,proto3" json:"dbserver_disk_size,omitempty"`
	// Number of gateways
	Gateways int32 `protobuf:"varint,41,opt,name=gateways,proto3" json:"gateways,omitempty"`
	// Amount of memory (in GB) to allocate for each gateway.
	GatewayMemorySize float32 `protobuf:"fixed32,42,opt,name=gateway_memory_size,json=gatewayMemorySize,proto3" json:"gateway_memory_size,omitempty"`
}

func (x *DeploymentSize) Reset() {
	*x = DeploymentSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentSize) ProtoMessage() {}

func (x *DeploymentSize) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentSize.ProtoReflect.Descriptor instead.
func (*DeploymentSize) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{25}
}

func (x *DeploymentSize) GetAgents() int32 {
	if x != nil {
		return x.Agents
	}
	return 0
}

func (x *DeploymentSize) GetAgentMemorySize() int32 {
	if x != nil {
		return x.AgentMemorySize
	}
	return 0
}

func (x *DeploymentSize) GetAgentDiskSize() int32 {
	if x != nil {
		return x.AgentDiskSize
	}
	return 0
}

func (x *DeploymentSize) GetTotalMemorySize() int32 {
	if x != nil {
		return x.TotalMemorySize
	}
	return 0
}

func (x *DeploymentSize) GetTotalDiskSize() int32 {
	if x != nil {
		return x.TotalDiskSize
	}
	return 0
}

func (x *DeploymentSize) GetCoordinators() int32 {
	if x != nil {
		return x.Coordinators
	}
	return 0
}

func (x *DeploymentSize) GetCoordinatorMemorySize() int32 {
	if x != nil {
		return x.CoordinatorMemorySize
	}
	return 0
}

func (x *DeploymentSize) GetDbservers() int32 {
	if x != nil {
		return x.Dbservers
	}
	return 0
}

func (x *DeploymentSize) GetDbserverMemorySize() int32 {
	if x != nil {
		return x.DbserverMemorySize
	}
	return 0
}

func (x *DeploymentSize) GetDbserverDiskSize() int32 {
	if x != nil {
		return x.DbserverDiskSize
	}
	return 0
}

func (x *DeploymentSize) GetGateways() int32 {
	if x != nil {
		return x.Gateways
	}
	return 0
}

func (x *DeploymentSize) GetGatewayMemorySize() float32 {
	if x != nil {
		return x.GatewayMemorySize
	}
	return 0
}

// Request arguments for RecommendDeploymentSize.
type DeploymentSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of entire dataset (on disk) in GB.
	// Required field.
	// Must be >= 1.
	DatasetSize int32 `protobuf:"varint,1,opt,name=dataset_size,json=datasetSize,proto3" json:"dataset_size,omitempty"`
	// Primary use case for the database
	// Possible values:
	// - GRAPH
	// - DOCUMENT
	// - MULTIMODEL
	// - KEYVALUE
	Usecase string `protobuf:"bytes,2,opt,name=usecase,proto3" json:"usecase,omitempty"`
	// Customer preferred model
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// File format on dataset
	// Possible values:
	// - JSON
	// - CSV
	FileFormat string `protobuf:"bytes,4,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// Number of documents in the entire dataset (in case of JSON).
	// Number of rows in the entire dataset (in case of CSV).
	NumberOfDocuments int64 `protobuf:"varint,5,opt,name=number_of_documents,json=numberOfDocuments,proto3" json:"number_of_documents,omitempty"`
	// Largest number of columns of the dataset (in case of CSV).
	NumberOfColumns int32 `protobuf:"varint,6,opt,name=number_of_columns,json=numberOfColumns,proto3" json:"number_of_columns,omitempty"`
	// Percentage of dataset_size that is considered "hot"
	// Must be >= 0.0 and <= 1.0
	WorkingSetPercentage float32 `protobuf:"fixed32,7,opt,name=working_set_percentage,json=workingSetPercentage,proto3" json:"working_set_percentage,omitempty"`
	// Percentage of operations that are READ
	// Must be >= 0.0 and <= 1.0
	AccessReadPercentage float32 `protobuf:"fixed32,8,opt,name=access_read_percentage,json=accessReadPercentage,proto3" json:"access_read_percentage,omitempty"`
	// Percentage of operations that are CREATE
	// Must be >= 0.0 and <= 1.0
	AccessCreatePercentage float32 `protobuf:"fixed32,9,opt,name=access_create_percentage,json=accessCreatePercentage,proto3" json:"access_create_percentage,omitempty"`
	// Percentage of operations that are UPDATE
	// Must be >= 0.0 and <= 1.0
	AccessUpdatePercentage float32 `protobuf:"fixed32,10,opt,name=access_update_percentage,json=accessUpdatePercentage,proto3" json:"access_update_percentage,omitempty"`
	// Increase factor of the dataset_size in 1 year.
	GrowthRate float32 `protobuf:"fixed32,11,opt,name=growth_rate,json=growthRate,proto3" json:"growth_rate,omitempty"`
	// Desired number of replicas.
	// Must be >= 3 and <= 5
	ReplicationFactor int32 `protobuf:"varint,12,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	// Identifier of project to request a recommendation in
	ProjectId string `protobuf:"bytes,21,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Identifier of region to request a recommendation in
	RegionId string `protobuf:"bytes,22,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *DeploymentSizeRequest) Reset() {
	*x = DeploymentSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentSizeRequest) ProtoMessage() {}

func (x *DeploymentSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentSizeRequest.ProtoReflect.Descriptor instead.
func (*DeploymentSizeRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{26}
}

func (x *DeploymentSizeRequest) GetDatasetSize() int32 {
	if x != nil {
		return x.DatasetSize
	}
	return 0
}

func (x *DeploymentSizeRequest) GetUsecase() string {
	if x != nil {
		return x.Usecase
	}
	return ""
}

func (x *DeploymentSizeRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeploymentSizeRequest) GetFileFormat() string {
	if x != nil {
		return x.FileFormat
	}
	return ""
}

func (x *DeploymentSizeRequest) GetNumberOfDocuments() int64 {
	if x != nil {
		return x.NumberOfDocuments
	}
	return 0
}

func (x *DeploymentSizeRequest) GetNumberOfColumns() int32 {
	if x != nil {
		return x.NumberOfColumns
	}
	return 0
}

func (x *DeploymentSizeRequest) GetWorkingSetPercentage() float32 {
	if x != nil {
		return x.WorkingSetPercentage
	}
	return 0
}

func (x *DeploymentSizeRequest) GetAccessReadPercentage() float32 {
	if x != nil {
		return x.AccessReadPercentage
	}
	return 0
}

func (x *DeploymentSizeRequest) GetAccessCreatePercentage() float32 {
	if x != nil {
		return x.AccessCreatePercentage
	}
	return 0
}

func (x *DeploymentSizeRequest) GetAccessUpdatePercentage() float32 {
	if x != nil {
		return x.AccessUpdatePercentage
	}
	return 0
}

func (x *DeploymentSizeRequest) GetGrowthRate() float32 {
	if x != nil {
		return x.GrowthRate
	}
	return 0
}

func (x *DeploymentSizeRequest) GetReplicationFactor() int32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *DeploymentSizeRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeploymentSizeRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

// Response of RecommendDeploymentSize.
type DeploymentSizeRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request that resulted in this recommendation.
	Request *DeploymentSizeRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Time when the recommendation was made.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Amount of memory space per node (in GB) being recommended
	NodeMemorySize int32 `protobuf:"varint,11,opt,name=node_memory_size,json=nodeMemorySize,proto3" json:"node_memory_size,omitempty"`
	// Amount of disk space per node (in GB) being recommended
	NodeDiskSize int32 `protobuf:"varint,12,opt,name=node_disk_size,json=nodeDiskSize,proto3" json:"node_disk_size,omitempty"`
	// Number of nodes being recommended
	NodeCount int32 `protobuf:"varint,13,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// If set, this recommendation does not fit in
	// the callers quota.
	ExceedsQuota bool `protobuf:"varint,21,opt,name=exceeds_quota,json=exceedsQuota,proto3" json:"exceeds_quota,omitempty"`
	// If set, this recommendation does not fit in
	// the ArangoGraph Insights Platform.
	ExceedsPlatform bool `protobuf:"varint,22,opt,name=exceeds_platform,json=exceedsPlatform,proto3" json:"exceeds_platform,omitempty"`
}

func (x *DeploymentSizeRecommendation) Reset() {
	*x = DeploymentSizeRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentSizeRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentSizeRecommendation) ProtoMessage() {}

func (x *DeploymentSizeRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentSizeRecommendation.ProtoReflect.Descriptor instead.
func (*DeploymentSizeRecommendation) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{27}
}

func (x *DeploymentSizeRecommendation) GetRequest() *DeploymentSizeRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DeploymentSizeRecommendation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeploymentSizeRecommendation) GetNodeMemorySize() int32 {
	if x != nil {
		return x.NodeMemorySize
	}
	return 0
}

func (x *DeploymentSizeRecommendation) GetNodeDiskSize() int32 {
	if x != nil {
		return x.NodeDiskSize
	}
	return 0
}

func (x *DeploymentSizeRecommendation) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *DeploymentSizeRecommendation) GetExceedsQuota() bool {
	if x != nil {
		return x.ExceedsQuota
	}
	return false
}

func (x *DeploymentSizeRecommendation) GetExceedsPlatform() bool {
	if x != nil {
		return x.ExceedsPlatform
	}
	return false
}

// DataVolumeInfo provides information about a data volume
type DataVolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of bytes of the data volume.
	TotalBytes int64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// The number of bytes used on the data volume.
	UsedBytes int64 `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	// The number of bytes available on the data volume.
	AvailableBytes int64 `protobuf:"varint,3,opt,name=available_bytes,json=availableBytes,proto3" json:"available_bytes,omitempty"`
	// The total number of inodes of the data volume.
	TotalInodes int64 `protobuf:"varint,4,opt,name=total_inodes,json=totalInodes,proto3" json:"total_inodes,omitempty"`
	// The number of inodes used on the data volume.
	UsedInodes int64 `protobuf:"varint,5,opt,name=used_inodes,json=usedInodes,proto3" json:"used_inodes,omitempty"`
	// The number of inodes available on the data volume.
	AvailableInodes int64 `protobuf:"varint,6,opt,name=available_inodes,json=availableInodes,proto3" json:"available_inodes,omitempty"`
	// When this info has been measused
	MeasuredAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=measured_at,json=measuredAt,proto3" json:"measured_at,omitempty"`
}

func (x *DataVolumeInfo) Reset() {
	*x = DataVolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataVolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataVolumeInfo) ProtoMessage() {}

func (x *DataVolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataVolumeInfo.ProtoReflect.Descriptor instead.
func (*DataVolumeInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{28}
}

func (x *DataVolumeInfo) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *DataVolumeInfo) GetUsedBytes() int64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *DataVolumeInfo) GetAvailableBytes() int64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

func (x *DataVolumeInfo) GetTotalInodes() int64 {
	if x != nil {
		return x.TotalInodes
	}
	return 0
}

func (x *DataVolumeInfo) GetUsedInodes() int64 {
	if x != nil {
		return x.UsedInodes
	}
	return 0
}

func (x *DataVolumeInfo) GetAvailableInodes() int64 {
	if x != nil {
		return x.AvailableInodes
	}
	return 0
}

func (x *DataVolumeInfo) GetMeasuredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasuredAt
	}
	return nil
}

// Instructions for connecting a driver to a deployment
type ConnectDriverInstructions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per driver instructions for connecting to a deployment
	Drivers []*ConnectDriverInstructions_DriverInstructions `protobuf:"bytes,1,rep,name=drivers,proto3" json:"drivers,omitempty"`
}

func (x *ConnectDriverInstructions) Reset() {
	*x = ConnectDriverInstructions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectDriverInstructions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectDriverInstructions) ProtoMessage() {}

func (x *ConnectDriverInstructions) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectDriverInstructions.ProtoReflect.Descriptor instead.
func (*ConnectDriverInstructions) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{29}
}

func (x *ConnectDriverInstructions) GetDrivers() []*ConnectDriverInstructions_DriverInstructions {
	if x != nil {
		return x.Drivers
	}
	return nil
}

// Instructions for importing data into a deployment
type ImportDataInstructions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lines of code to run arangorestore
	ImportDump []string `protobuf:"bytes,2,rep,name=import_dump,json=importDump,proto3" json:"import_dump,omitempty"`
	// Lines of code to run arangoimport with json file format
	ArangoImportJson []string `protobuf:"bytes,3,rep,name=arango_import_json,json=arangoImportJson,proto3" json:"arango_import_json,omitempty"`
	// Lines of code to run arangoimport with csv file format
	ArangoImportCsv []string `protobuf:"bytes,4,rep,name=arango_import_csv,json=arangoImportCsv,proto3" json:"arango_import_csv,omitempty"`
	// Lines of code to run arangoimport with tsv file format
	ArangoImportTsv []string `protobuf:"bytes,5,rep,name=arango_import_tsv,json=arangoImportTsv,proto3" json:"arango_import_tsv,omitempty"`
}

func (x *ImportDataInstructions) Reset() {
	*x = ImportDataInstructions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDataInstructions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDataInstructions) ProtoMessage() {}

func (x *ImportDataInstructions) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDataInstructions.ProtoReflect.Descriptor instead.
func (*ImportDataInstructions) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{30}
}

func (x *ImportDataInstructions) GetImportDump() []string {
	if x != nil {
		return x.ImportDump
	}
	return nil
}

func (x *ImportDataInstructions) GetArangoImportJson() []string {
	if x != nil {
		return x.ArangoImportJson
	}
	return nil
}

func (x *ImportDataInstructions) GetArangoImportCsv() []string {
	if x != nil {
		return x.ArangoImportCsv
	}
	return nil
}

func (x *ImportDataInstructions) GetArangoImportTsv() []string {
	if x != nil {
		return x.ArangoImportTsv
	}
	return nil
}

// Arguments for requesting a price a deployment of given properties.
type DeploymentPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of organization containing the deployment.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Identifier of project containing the deployment.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Identifier of the support plan of the deployment.
	SupportPlanId string `protobuf:"bytes,3,opt,name=support_plan_id,json=supportPlanId,proto3" json:"support_plan_id,omitempty"`
	// Identifier of the cloud provider of the deployment.
	CloudProviderId string `protobuf:"bytes,4,opt,name=cloud_provider_id,json=cloudProviderId,proto3" json:"cloud_provider_id,omitempty"`
	// Identifier of the cloud region of the deployment.
	CloudRegionId string `protobuf:"bytes,5,opt,name=cloud_region_id,json=cloudRegionId,proto3" json:"cloud_region_id,omitempty"`
	// Model of the deployment.
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// Node size use for deployments
	NodeSizeId string `protobuf:"bytes,7,opt,name=node_size_id,json=nodeSizeId,proto3" json:"node_size_id,omitempty"`
	// Number of nodes being used
	// This field is ignored if model is "flexible".
	NodeCount int32 `protobuf:"varint,8,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Amount of disk space per node (in GB)
	// This field is ignored if model is "flexible".
	NodeDiskSize int32 `protobuf:"varint,9,opt,name=node_disk_size,json=nodeDiskSize,proto3" json:"node_disk_size,omitempty"`
	// Number of coordinators of the deployment
	// This field is ignored unless model is "flexible".
	Coordinators int32 `protobuf:"varint,10,opt,name=coordinators,proto3" json:"coordinators,omitempty"`
	// Amount of memory (in GB) to allocate for each coordinator.
	// This field is ignored unless model is "flexible".
	CoordinatorMemorySize int32 `protobuf:"varint,11,opt,name=coordinator_memory_size,json=coordinatorMemorySize,proto3" json:"coordinator_memory_size,omitempty"`
	// Number of dbservers of the deployment
	// This field is ignored unless model is "flexible".
	Dbservers int32 `protobuf:"varint,12,opt,name=dbservers,proto3" json:"dbservers,omitempty"`
	// Amount of memory (in GB) to allocate for each dbserver.
	// This field is ignored unless model is "flexible".
	DbserverMemorySize int32 `protobuf:"varint,13,opt,name=dbserver_memory_size,json=dbserverMemorySize,proto3" json:"dbserver_memory_size,omitempty"`
	// Amount of disk space (in GB) to allocate for each dbserver.
	// This field is ignored unless model is "flexible".
	DbserverDiskSize int32 `protobuf:"varint,14,opt,name=dbserver_disk_size,json=dbserverDiskSize,proto3" json:"dbserver_disk_size,omitempty"`
	// Identifier of disk performance used for this deployment (if any).
	DiskPerformanceId string `protobuf:"bytes,15,opt,name=disk_performance_id,json=diskPerformanceId,proto3" json:"disk_performance_id,omitempty"`
	// If set, request for prices based on ArangoGraph credits.
	UseCreditPricing bool `protobuf:"varint,16,opt,name=use_credit_pricing,json=useCreditPricing,proto3" json:"use_credit_pricing,omitempty"`
}

func (x *DeploymentPriceRequest) Reset() {
	*x = DeploymentPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPriceRequest) ProtoMessage() {}

func (x *DeploymentPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPriceRequest.ProtoReflect.Descriptor instead.
func (*DeploymentPriceRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{31}
}

func (x *DeploymentPriceRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeploymentPriceRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeploymentPriceRequest) GetSupportPlanId() string {
	if x != nil {
		return x.SupportPlanId
	}
	return ""
}

func (x *DeploymentPriceRequest) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

func (x *DeploymentPriceRequest) GetCloudRegionId() string {
	if x != nil {
		return x.CloudRegionId
	}
	return ""
}

func (x *DeploymentPriceRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeploymentPriceRequest) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *DeploymentPriceRequest) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *DeploymentPriceRequest) GetNodeDiskSize() int32 {
	if x != nil {
		return x.NodeDiskSize
	}
	return 0
}

func (x *DeploymentPriceRequest) GetCoordinators() int32 {
	if x != nil {
		return x.Coordinators
	}
	return 0
}

func (x *DeploymentPriceRequest) GetCoordinatorMemorySize() int32 {
	if x != nil {
		return x.CoordinatorMemorySize
	}
	return 0
}

func (x *DeploymentPriceRequest) GetDbservers() int32 {
	if x != nil {
		return x.Dbservers
	}
	return 0
}

func (x *DeploymentPriceRequest) GetDbserverMemorySize() int32 {
	if x != nil {
		return x.DbserverMemorySize
	}
	return 0
}

func (x *DeploymentPriceRequest) GetDbserverDiskSize() int32 {
	if x != nil {
		return x.DbserverDiskSize
	}
	return 0
}

func (x *DeploymentPriceRequest) GetDiskPerformanceId() string {
	if x != nil {
		return x.DiskPerformanceId
	}
	return ""
}

func (x *DeploymentPriceRequest) GetUseCreditPricing() bool {
	if x != nil {
		return x.UseCreditPricing
	}
	return false
}

type DeploymentPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price per hour in given currency for the deployment.
	PricePerHour float32 `protobuf:"fixed32,1,opt,name=price_per_hour,json=pricePerHour,proto3" json:"price_per_hour,omitempty"`
	// Network transfer prices (variable depending on usage)
	NetworkTransferPrices []*DeploymentPrice_NetworkTransferPrice `protobuf:"bytes,2,rep,name=network_transfer_prices,json=networkTransferPrices,proto3" json:"network_transfer_prices,omitempty"`
	// Backup prices (variable depending on usage)
	BackupPrice *DeploymentPrice_BackupPrice `protobuf:"bytes,3,opt,name=backup_price,json=backupPrice,proto3" json:"backup_price,omitempty"`
	// Identifier of the currency in which the price is specified.
	CurrencyId string `protobuf:"bytes,4,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	// AuditLog prices (variable depending on usage)
	AuditlogPrice *DeploymentPrice_AuditLogPrice `protobuf:"bytes,5,opt,name=auditlog_price,json=auditlogPrice,proto3" json:"auditlog_price,omitempty"`
}

func (x *DeploymentPrice) Reset() {
	*x = DeploymentPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPrice) ProtoMessage() {}

func (x *DeploymentPrice) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPrice.ProtoReflect.Descriptor instead.
func (*DeploymentPrice) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32}
}

func (x *DeploymentPrice) GetPricePerHour() float32 {
	if x != nil {
		return x.PricePerHour
	}
	return 0
}

func (x *DeploymentPrice) GetNetworkTransferPrices() []*DeploymentPrice_NetworkTransferPrice {
	if x != nil {
		return x.NetworkTransferPrices
	}
	return nil
}

func (x *DeploymentPrice) GetBackupPrice() *DeploymentPrice_BackupPrice {
	if x != nil {
		return x.BackupPrice
	}
	return nil
}

func (x *DeploymentPrice) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *DeploymentPrice) GetAuditlogPrice() *DeploymentPrice_AuditLogPrice {
	if x != nil {
		return x.AuditlogPrice
	}
	return nil
}

// Features that are available to new deployments in a given context.
type DeploymentFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the use of an IAM provider available?
	Iamprovider bool `protobuf:"varint,1,opt,name=iamprovider,proto3" json:"iamprovider,omitempty"`
	// Is the use of the pause feature available?
	Pause bool `protobuf:"varint,2,opt,name=pause,proto3" json:"pause,omitempty"`
	// Is the use of the ML features available?
	Ml bool `protobuf:"varint,3,opt,name=ml,proto3" json:"ml,omitempty"`
	// Is the use of monitoring feature available?
	Monitoring bool `protobuf:"varint,4,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
}

func (x *DeploymentFeatures) Reset() {
	*x = DeploymentFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentFeatures) ProtoMessage() {}

func (x *DeploymentFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentFeatures.ProtoReflect.Descriptor instead.
func (*DeploymentFeatures) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{33}
}

func (x *DeploymentFeatures) GetIamprovider() bool {
	if x != nil {
		return x.Iamprovider
	}
	return false
}

func (x *DeploymentFeatures) GetPause() bool {
	if x != nil {
		return x.Pause
	}
	return false
}

func (x *DeploymentFeatures) GetMl() bool {
	if x != nil {
		return x.Ml
	}
	return false
}

func (x *DeploymentFeatures) GetMonitoring() bool {
	if x != nil {
		return x.Monitoring
	}
	return false
}

// Request arguments for GetDeploymentFeatures
type DeploymentFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of project that will own a deployment.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Identifier of a region in which a deployment will be created.
	RegionId string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Model of the intended deployment.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Node size use for the intended deployments
	NodeSizeId string `protobuf:"bytes,4,opt,name=node_size_id,json=nodeSizeId,proto3" json:"node_size_id,omitempty"`
}

func (x *DeploymentFeaturesRequest) Reset() {
	*x = DeploymentFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentFeaturesRequest) ProtoMessage() {}

func (x *DeploymentFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentFeaturesRequest.ProtoReflect.Descriptor instead.
func (*DeploymentFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{34}
}

func (x *DeploymentFeaturesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeploymentFeaturesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *DeploymentFeaturesRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeploymentFeaturesRequest) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

// Request arguments for UpdateDeploymentScheduledRootPasswordRotation
type UpdateDeploymentScheduledRootPasswordRotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the deloyment.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Whether scheduled root password rotation should be enabled or not.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateDeploymentScheduledRootPasswordRotationRequest) Reset() {
	*x = UpdateDeploymentScheduledRootPasswordRotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeploymentScheduledRootPasswordRotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentScheduledRootPasswordRotationRequest) ProtoMessage() {}

func (x *UpdateDeploymentScheduledRootPasswordRotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentScheduledRootPasswordRotationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentScheduledRootPasswordRotationRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateDeploymentScheduledRootPasswordRotationRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *UpdateDeploymentScheduledRootPasswordRotationRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// ListDiskPerformancesRequest is used as request in ListAllDiskPerformances
type ListDiskPerformancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the region (e.g. 'aks-westeurope').
	// This field is ignored when a deployment_id is provided, otherwise required.
	RegionId string `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Identifier of the node size (e.g. 'A16').
	// This field is ignored when a deployment_id is provided, otherwise required.
	NodeSizeId string `protobuf:"bytes,2,opt,name=node_size_id,json=nodeSizeId,proto3" json:"node_size_id,omitempty"`
	// Amount of disk space (in GB) to allocate for each dbserver.
	// This field is ignored when a deployment_id is provided, otherwise required.
	DbserverDiskSize int32 `protobuf:"varint,3,opt,name=dbserver_disk_size,json=dbserverDiskSize,proto3" json:"dbserver_disk_size,omitempty"`
	// Optional identifier of the organization for which the disk performances need to be listed.
	// If specified, only those disk performances are listed that the organization is allowed to use
	// for a deployment of a given node_size_id.
	// This field is ignored when a deployment_id is provided.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Identifier of the deloyment, used to fill-out the region, node-size and disk-size.
	DeploymentId string `protobuf:"bytes,10,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *ListDiskPerformancesRequest) Reset() {
	*x = ListDiskPerformancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiskPerformancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskPerformancesRequest) ProtoMessage() {}

func (x *ListDiskPerformancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskPerformancesRequest.ProtoReflect.Descriptor instead.
func (*ListDiskPerformancesRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{36}
}

func (x *ListDiskPerformancesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListDiskPerformancesRequest) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *ListDiskPerformancesRequest) GetDbserverDiskSize() int32 {
	if x != nil {
		return x.DbserverDiskSize
	}
	return 0
}

func (x *ListDiskPerformancesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListDiskPerformancesRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// GetDiskPerformanceRequest is used as request in GetDiskPerformance
type GetDiskPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// disk performance identifier (e.g. 'DP30')
	DiskPerformanceId string `protobuf:"bytes,1,opt,name=disk_performance_id,json=diskPerformanceId,proto3" json:"disk_performance_id,omitempty"`
	// Identifier of the region (e.g. 'aks-westeurope').
	RegionId string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *GetDiskPerformanceRequest) Reset() {
	*x = GetDiskPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskPerformanceRequest) ProtoMessage() {}

func (x *GetDiskPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskPerformanceRequest.ProtoReflect.Descriptor instead.
func (*GetDiskPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{37}
}

func (x *GetDiskPerformanceRequest) GetDiskPerformanceId() string {
	if x != nil {
		return x.DiskPerformanceId
	}
	return ""
}

func (x *GetDiskPerformanceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

// List of DiskPerformances.
type DiskPerformanceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*DiskPerformance `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DiskPerformanceList) Reset() {
	*x = DiskPerformanceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPerformanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPerformanceList) ProtoMessage() {}

func (x *DiskPerformanceList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPerformanceList.ProtoReflect.Descriptor instead.
func (*DiskPerformanceList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{38}
}

func (x *DiskPerformanceList) GetItems() []*DiskPerformance {
	if x != nil {
		return x.Items
	}
	return nil
}

// DiskPerformance provides information on a specific disk performance option.
// All fields in this message are read-only values.
type DiskPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the disk-performance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the disk-performance.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the disk-performance.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// If set, this is the default disk performance (inside the requested region).
	IsDefault bool `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *DiskPerformance) Reset() {
	*x = DiskPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPerformance) ProtoMessage() {}

func (x *DiskPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPerformance.ProtoReflect.Descriptor instead.
func (*DiskPerformance) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{39}
}

func (x *DiskPerformance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiskPerformance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiskPerformance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiskPerformance) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

// Define the Notification details
type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String representation of the Notification
	Notification string `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	// Notification Severity
	Severity NotificationSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=arangodb.cloud.data.v1.NotificationSeverity" json:"severity,omitempty"`
	// The timestamp of when the notification has been created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The timestamp of when the notification has been updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The timestamp of when the notification expires.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{40}
}

func (x *Notification) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *Notification) GetSeverity() NotificationSeverity {
	if x != nil {
		return x.Severity
	}
	return NotificationSeverity_NOTIFICATION_SEVERITY_INFO
}

func (x *Notification) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Notification) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Notification) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// Request arguments for ListDeploymentsByFilter.
type ListDeploymentsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the organization to request the deployments for.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Return only deployments created in this project.
	// This is an optional field.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Return only deployments created in this region.
	// This is an optional field.
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Return only deployments with an expiration date after this timestamp.
	// This will exclude deployments that have no expiration date.
	// This is an optional field.
	ExpiresAfter *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expires_after,json=expiresAfter,proto3" json:"expires_after,omitempty"`
	// Return only deployments with an expiration date before this timestamp.
	// This will exclude deployments that have no expiration date.
	// This is an optional field.
	ExpiresBefore *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expires_before,json=expiresBefore,proto3" json:"expires_before,omitempty"`
	// Return only deployments that do not expire.
	DoesNotExpire bool `protobuf:"varint,12,opt,name=does_not_expire,json=doesNotExpire,proto3" json:"does_not_expire,omitempty"`
	// Optional common list options, the context_id is ignored
	Options *v1.ListOptions `protobuf:"bytes,100,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListDeploymentsByFilterRequest) Reset() {
	*x = ListDeploymentsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsByFilterRequest) ProtoMessage() {}

func (x *ListDeploymentsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListDeploymentsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{41}
}

func (x *ListDeploymentsByFilterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListDeploymentsByFilterRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListDeploymentsByFilterRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListDeploymentsByFilterRequest) GetExpiresAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAfter
	}
	return nil
}

func (x *ListDeploymentsByFilterRequest) GetExpiresBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresBefore
	}
	return nil
}

func (x *ListDeploymentsByFilterRequest) GetDoesNotExpire() bool {
	if x != nil {
		return x.DoesNotExpire
	}
	return false
}

func (x *ListDeploymentsByFilterRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Deployment_CertificateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the CACertificate used to sign TLS certificates for the deployment.
	// If you change this value after the creation of the deployment a complete
	// rotation of the deployment is required, which will result in some downtime.
	CaCertificateId string `protobuf:"bytes,1,opt,name=ca_certificate_id,json=caCertificateId,proto3" json:"ca_certificate_id,omitempty"`
	// Zero or more DNS names to include in the TLS certificate of the deployment.
	AlternateDnsNames []string `protobuf:"bytes,2,rep,name=alternate_dns_names,json=alternateDnsNames,proto3" json:"alternate_dns_names,omitempty"`
}

func (x *Deployment_CertificateSpec) Reset() {
	*x = Deployment_CertificateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_CertificateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_CertificateSpec) ProtoMessage() {}

func (x *Deployment_CertificateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_CertificateSpec.ProtoReflect.Descriptor instead.
func (*Deployment_CertificateSpec) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Deployment_CertificateSpec) GetCaCertificateId() string {
	if x != nil {
		return x.CaCertificateId
	}
	return ""
}

func (x *Deployment_CertificateSpec) GetAlternateDnsNames() []string {
	if x != nil {
		return x.AlternateDnsNames
	}
	return nil
}

type Deployment_ServersSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of coordinators of the deployment
	// This field is automatically set unless the flexible model is used.
	Coordinators int32 `protobuf:"varint,1,opt,name=coordinators,proto3" json:"coordinators,omitempty"`
	// Amount of memory (in GB) to allocate for coordinators.
	// This field is automatically set unless the flexible model is used.
	CoordinatorMemorySize int32 `protobuf:"varint,2,opt,name=coordinator_memory_size,json=coordinatorMemorySize,proto3" json:"coordinator_memory_size,omitempty"`
	// Custom command line arguments passed to all coordinators.
	// This field is ignored set unless the flexible model is used.
	CoordinatorArgs []string `protobuf:"bytes,3,rep,name=coordinator_args,json=coordinatorArgs,proto3" json:"coordinator_args,omitempty"`
	// Number of dbservers of the deployment
	// This field is automatically set unless the flexible model is used.
	Dbservers int32 `protobuf:"varint,11,opt,name=dbservers,proto3" json:"dbservers,omitempty"`
	// Amount of memory (in GB) to allocate for dbservers.
	// This field is automatically set unless the flexible model is used.
	DbserverMemorySize int32 `protobuf:"varint,12,opt,name=dbserver_memory_size,json=dbserverMemorySize,proto3" json:"dbserver_memory_size,omitempty"`
	// Amount of disk space (in GB) to allocate for dbservers.
	// This field is automatically set unless the flexible model is used.
	DbserverDiskSize int32 `protobuf:"varint,13,opt,name=dbserver_disk_size,json=dbserverDiskSize,proto3" json:"dbserver_disk_size,omitempty"`
	// Custom command line arguments passed to all dbservers.
	// This field is ignored set unless the flexible model is used.
	DbserverArgs []string `protobuf:"bytes,14,rep,name=dbserver_args,json=dbserverArgs,proto3" json:"dbserver_args,omitempty"`
	// The minimum number of dbservers based on the highest replication factor
	// defined by all databases and all collections.
	MinimumDbserversCount int32 `protobuf:"varint,15,opt,name=minimum_dbservers_count,json=minimumDbserversCount,proto3" json:"minimum_dbservers_count,omitempty"`
	// The minimum amount of disk space (in GB) to allocate for dbservers based on the highest usage of all running DB servers.
	// The nearest size (larger then indicated here) need to be depected if the provider doesn't support all values (See GetServersSpecLimits)
	MinimumDbserverDiskSize int32 `protobuf:"varint,16,opt,name=minimum_dbserver_disk_size,json=minimumDbserverDiskSize,proto3" json:"minimum_dbserver_disk_size,omitempty"`
}

func (x *Deployment_ServersSpec) Reset() {
	*x = Deployment_ServersSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_ServersSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_ServersSpec) ProtoMessage() {}

func (x *Deployment_ServersSpec) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_ServersSpec.ProtoReflect.Descriptor instead.
func (*Deployment_ServersSpec) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Deployment_ServersSpec) GetCoordinators() int32 {
	if x != nil {
		return x.Coordinators
	}
	return 0
}

func (x *Deployment_ServersSpec) GetCoordinatorMemorySize() int32 {
	if x != nil {
		return x.CoordinatorMemorySize
	}
	return 0
}

func (x *Deployment_ServersSpec) GetCoordinatorArgs() []string {
	if x != nil {
		return x.CoordinatorArgs
	}
	return nil
}

func (x *Deployment_ServersSpec) GetDbservers() int32 {
	if x != nil {
		return x.Dbservers
	}
	return 0
}

func (x *Deployment_ServersSpec) GetDbserverMemorySize() int32 {
	if x != nil {
		return x.DbserverMemorySize
	}
	return 0
}

func (x *Deployment_ServersSpec) GetDbserverDiskSize() int32 {
	if x != nil {
		return x.DbserverDiskSize
	}
	return 0
}

func (x *Deployment_ServersSpec) GetDbserverArgs() []string {
	if x != nil {
		return x.DbserverArgs
	}
	return nil
}

func (x *Deployment_ServersSpec) GetMinimumDbserversCount() int32 {
	if x != nil {
		return x.MinimumDbserversCount
	}
	return 0
}

func (x *Deployment_ServersSpec) GetMinimumDbserverDiskSize() int32 {
	if x != nil {
		return x.MinimumDbserverDiskSize
	}
	return 0
}

type Deployment_ModelSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of model being used
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Size of nodes being used
	// This field is ignored set in case the flexible model is used.
	NodeSizeId string `protobuf:"bytes,2,opt,name=node_size_id,json=nodeSizeId,proto3" json:"node_size_id,omitempty"`
	// Number of nodes being used
	// This field is ignored set in case the flexible model is used.
	NodeCount int32 `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Amount of disk space per node (in GB)
	// This field is ignored set in case the flexible model is used.
	NodeDiskSize int32 `protobuf:"varint,4,opt,name=node_disk_size,json=nodeDiskSize,proto3" json:"node_disk_size,omitempty"`
}

func (x *Deployment_ModelSpec) Reset() {
	*x = Deployment_ModelSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_ModelSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_ModelSpec) ProtoMessage() {}

func (x *Deployment_ModelSpec) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_ModelSpec.ProtoReflect.Descriptor instead.
func (*Deployment_ModelSpec) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Deployment_ModelSpec) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Deployment_ModelSpec) GetNodeSizeId() string {
	if x != nil {
		return x.NodeSizeId
	}
	return ""
}

func (x *Deployment_ModelSpec) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *Deployment_ModelSpec) GetNodeDiskSize() int32 {
	if x != nil {
		return x.NodeDiskSize
	}
	return 0
}

// Status of a single server (of the ArangoDB cluster)
type Deployment_ServerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the server
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of server (agent|coordinator|dbserver)
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Human readable description of the status of the deployment.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The creation timestamp of the server
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Set once the server is ready
	Ready bool `protobuf:"varint,5,opt,name=ready,proto3" json:"ready,omitempty"`
	// Set once the server has been known to be a member of the cluster
	MemberOfCluster bool `protobuf:"varint,6,opt,name=member_of_cluster,json=memberOfCluster,proto3" json:"member_of_cluster,omitempty"`
	// Set if the server is in a failed state
	// Every server is always in 1 (and only 1) of these states: failed/creating/ok/bad/upgrading.
	Failed bool `protobuf:"varint,7,opt,name=failed,proto3" json:"failed,omitempty"`
	// Set if the server is still being created
	// Every server is always in 1 (and only 1) of these states: failed/creating/ok/bad/upgrading.
	Creating bool `protobuf:"varint,8,opt,name=creating,proto3" json:"creating,omitempty"`
	// Set if the server is in the ok state.
	// Every server is always in 1 (and only 1) of these states: failed/creating/ok/bad/upgrading.
	Ok bool `protobuf:"varint,9,opt,name=ok,proto3" json:"ok,omitempty"`
	// Set if the server is in the bad state.
	// Every server is always in 1 (and only 1) of these states: failed/creating/ok/bad/upgrading.
	Bad bool `protobuf:"varint,14,opt,name=bad,proto3" json:"bad,omitempty"`
	// Set if the server is still being upgraded
	// Every server is always in 1 (and only 1) of these states: failed/creating/ok/bad/upgrading.
	Upgrading bool `protobuf:"varint,10,opt,name=upgrading,proto3" json:"upgrading,omitempty"`
	// Latest known ArangoDB version used by this server.
	// Initially this field is empty.
	Version string `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// The last started timestamp of the server
	LastStartedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_started_at,json=lastStartedAt,proto3" json:"last_started_at,omitempty"`
	// If set, a rotation of this server has been requested.
	RotationPending bool `protobuf:"varint,13,opt,name=rotation_pending,json=rotationPending,proto3" json:"rotation_pending,omitempty"`
	// If set, this server reports that it can be deleted.
	CanBeDeleted bool `protobuf:"varint,15,opt,name=can_be_deleted,json=canBeDeleted,proto3" json:"can_be_deleted,omitempty"`
	// If set, this server is leader in its type (currently applies only to agents).
	IsLeader bool `protobuf:"varint,16,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
	// Information about the data volume used to store the data
	DataVolumeInfo *DataVolumeInfo `protobuf:"bytes,20,opt,name=data_volume_info,json=dataVolumeInfo,proto3" json:"data_volume_info,omitempty"`
	// Recent number of restarts
	RecentRestarts int32 `protobuf:"varint,30,opt,name=recent_restarts,json=recentRestarts,proto3" json:"recent_restarts,omitempty"`
	// Last known memory usage in bytes
	LastMemoryUsage int64 `protobuf:"varint,31,opt,name=last_memory_usage,json=lastMemoryUsage,proto3" json:"last_memory_usage,omitempty"`
	// Last known CPU usage in vCPU units
	LastCpuUsage float32 `protobuf:"fixed32,32,opt,name=last_cpu_usage,json=lastCpuUsage,proto3" json:"last_cpu_usage,omitempty"`
	// Last known memory limit in bytes
	LastMemoryLimit int64 `protobuf:"varint,33,opt,name=last_memory_limit,json=lastMemoryLimit,proto3" json:"last_memory_limit,omitempty"`
	// Last known CPU limit in vCPU units
	LastCpuLimit float32 `protobuf:"fixed32,34,opt,name=last_cpu_limit,json=lastCpuLimit,proto3" json:"last_cpu_limit,omitempty"`
}

func (x *Deployment_ServerStatus) Reset() {
	*x = Deployment_ServerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_ServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_ServerStatus) ProtoMessage() {}

func (x *Deployment_ServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_ServerStatus.ProtoReflect.Descriptor instead.
func (*Deployment_ServerStatus) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Deployment_ServerStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment_ServerStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Deployment_ServerStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Deployment_ServerStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Deployment_ServerStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *Deployment_ServerStatus) GetMemberOfCluster() bool {
	if x != nil {
		return x.MemberOfCluster
	}
	return false
}

func (x *Deployment_ServerStatus) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *Deployment_ServerStatus) GetCreating() bool {
	if x != nil {
		return x.Creating
	}
	return false
}

func (x *Deployment_ServerStatus) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *Deployment_ServerStatus) GetBad() bool {
	if x != nil {
		return x.Bad
	}
	return false
}

func (x *Deployment_ServerStatus) GetUpgrading() bool {
	if x != nil {
		return x.Upgrading
	}
	return false
}

func (x *Deployment_ServerStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Deployment_ServerStatus) GetLastStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStartedAt
	}
	return nil
}

func (x *Deployment_ServerStatus) GetRotationPending() bool {
	if x != nil {
		return x.RotationPending
	}
	return false
}

func (x *Deployment_ServerStatus) GetCanBeDeleted() bool {
	if x != nil {
		return x.CanBeDeleted
	}
	return false
}

func (x *Deployment_ServerStatus) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *Deployment_ServerStatus) GetDataVolumeInfo() *DataVolumeInfo {
	if x != nil {
		return x.DataVolumeInfo
	}
	return nil
}

func (x *Deployment_ServerStatus) GetRecentRestarts() int32 {
	if x != nil {
		return x.RecentRestarts
	}
	return 0
}

func (x *Deployment_ServerStatus) GetLastMemoryUsage() int64 {
	if x != nil {
		return x.LastMemoryUsage
	}
	return 0
}

func (x *Deployment_ServerStatus) GetLastCpuUsage() float32 {
	if x != nil {
		return x.LastCpuUsage
	}
	return 0
}

func (x *Deployment_ServerStatus) GetLastMemoryLimit() int64 {
	if x != nil {
		return x.LastMemoryLimit
	}
	return 0
}

func (x *Deployment_ServerStatus) GetLastCpuLimit() float32 {
	if x != nil {
		return x.LastCpuLimit
	}
	return 0
}

// Status of the deployment
// All members of this field are read-only.
type Deployment_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoint URL used to reach the deployment
	// This value will be empty during the creation of the deployment.
	// This field always contains the URL of the low port (8529) of the
	// deployment.
	// If a certificate with well known certificate is used, this
	// port is using the well known certificate.
	// Otherwise this port is using the self-signed certificate.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Human readable description of the status of the deployment.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Set once the deployment has been created.
	Created bool `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	// Set if the deployment is ready to be used.
	// If the deployment has downtime (e.g. because of changing a CA certificate)
	// this will go to false until the downtime is over.
	Ready bool `protobuf:"varint,4,opt,name=ready,proto3" json:"ready,omitempty"`
	// Set if the deployment is being upgraded.
	Upgrading bool `protobuf:"varint,5,opt,name=upgrading,proto3" json:"upgrading,omitempty"`
	// Versions of running servers
	ServerVersions []string `protobuf:"bytes,6,rep,name=server_versions,json=serverVersions,proto3" json:"server_versions,omitempty"`
	// Status of individual servers of the deployment
	Servers []*Deployment_ServerStatus `protobuf:"bytes,7,rep,name=servers,proto3" json:"servers,omitempty"`
	// Set if the ready boolean is transitioned to true for the very first time.
	BootstrappedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=bootstrapped_at,json=bootstrappedAt,proto3" json:"bootstrapped_at,omitempty"`
	// Set if bootstrapped_at has a value, otherwise false.
	Bootstrapped bool `protobuf:"varint,9,opt,name=bootstrapped,proto3" json:"bootstrapped,omitempty"`
	// Endpoint URL used to reach the deployment on the port that uses
	// the self-signed certificate.
	// This endpoint is recommended for machine-to-database connections.
	EndpointSelfSigned string `protobuf:"bytes,10,opt,name=endpoint_self_signed,json=endpointSelfSigned,proto3" json:"endpoint_self_signed,omitempty"`
	// Endpoint URL used to reach the deployment on default port (443)
	// This value will be empty during the creation of the deployment.
	// If a certificate with well known certificate is used, this
	// port is using the well known certificate.
	// Otherwise this port is using the self-signed certificate.
	// This endpoint is recommended for human-to-database connections.
	EndpointDefault string `protobuf:"bytes,11,opt,name=endpoint_default,json=endpointDefault,proto3" json:"endpoint_default,omitempty"`
	// If set, this deployment has a private endpoint, however can contain the public endpoint as well.
	// When switching from a public endpoint to a private endpoint the public endpoint will
	// be available for an hour to support seemlessly migration to the private endpoint.
	PrivateEndpoint bool `protobuf:"varint,20,opt,name=private_endpoint,json=privateEndpoint,proto3" json:"private_endpoint,omitempty"`
	// If set, this deployment has a private endpoint only.
	// When switching from a public endpoint to a private endpoint the public endpoint will
	// be available for an hour to support seemlessly migration to the private endpoint.
	PrivateEndpointOnly bool `protobuf:"varint,21,opt,name=private_endpoint_only,json=privateEndpointOnly,proto3" json:"private_endpoint_only,omitempty"`
	// Endpoint URL used to reach the deployment which is configured as a private endpoint.
	// This field always contains the URL of the low port (8529) of the
	// deployment.
	// If a certificate with well known certificate is used, this
	// port is using the well known certificate, note that the alternate DNS names are not part of this certificate.
	// Otherwise this port is using the self-signed certificate.
	// This endpoint is recommended for human-to-database connections.
	// If no private endpoint is configured this field will be empty.
	EndpointPrivateEndpoint string `protobuf:"bytes,22,opt,name=endpoint_private_endpoint,json=endpointPrivateEndpoint,proto3" json:"endpoint_private_endpoint,omitempty"`
	// Endpoint URL used to reach the deployment on the port that uses
	// the self-signed certificate.
	// This certificate will contain the specified alternate DNS names as well,
	// so a secure TLS connection can be establised.
	// This endpoint is recommended for machine-to-database connections.
	// If no private endpoint is configured this field will be empty.
	EndpointPrivateEndpointSelfSigned string `protobuf:"bytes,23,opt,name=endpoint_private_endpoint_self_signed,json=endpointPrivateEndpointSelfSigned,proto3" json:"endpoint_private_endpoint_self_signed,omitempty"`
	// Private Endpoint URL used to reach the deployment on default port (443)
	// This value will be empty during the creation of the deployment & private endpoint.
	// this port is using the well known certificate.
	EndpointPrivateEndpointDefault string `protobuf:"bytes,24,opt,name=endpoint_private_endpoint_default,json=endpointPrivateEndpointDefault,proto3" json:"endpoint_private_endpoint_default,omitempty"`
	// The status of backup restore (if applicable).
	// This field will be set to empty if a new revision of the spec is available
	BackupRestoreStatus *Deployment_BackupRestoreStatus `protobuf:"bytes,100,opt,name=backup_restore_status,json=backupRestoreStatus,proto3" json:"backup_restore_status,omitempty"`
	// The total size of all backups in the external source (in bytes)
	TotalBackupSizeBytes int64 `protobuf:"varint,101,opt,name=total_backup_size_bytes,json=totalBackupSizeBytes,proto3" json:"total_backup_size_bytes,omitempty"`
	// Set if there is any backup currently uploading data to the external source
	BackupUploadInProgress bool `protobuf:"varint,102,opt,name=backup_upload_in_progress,json=backupUploadInProgress,proto3" json:"backup_upload_in_progress,omitempty"`
	// Set if the deployment is up-to-date and has no pending updates.
	IsUpToDate bool `protobuf:"varint,103,opt,name=is_up_to_date,json=isUpToDate,proto3" json:"is_up_to_date,omitempty"`
	// Set if the deployment is in read-only mode.
	ReadOnly bool `protobuf:"varint,104,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (x *Deployment_Status) Reset() {
	*x = Deployment_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_Status) ProtoMessage() {}

func (x *Deployment_Status) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_Status.ProtoReflect.Descriptor instead.
func (*Deployment_Status) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Deployment_Status) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Deployment_Status) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Deployment_Status) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

func (x *Deployment_Status) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *Deployment_Status) GetUpgrading() bool {
	if x != nil {
		return x.Upgrading
	}
	return false
}

func (x *Deployment_Status) GetServerVersions() []string {
	if x != nil {
		return x.ServerVersions
	}
	return nil
}

func (x *Deployment_Status) GetServers() []*Deployment_ServerStatus {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *Deployment_Status) GetBootstrappedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BootstrappedAt
	}
	return nil
}

func (x *Deployment_Status) GetBootstrapped() bool {
	if x != nil {
		return x.Bootstrapped
	}
	return false
}

func (x *Deployment_Status) GetEndpointSelfSigned() string {
	if x != nil {
		return x.EndpointSelfSigned
	}
	return ""
}

func (x *Deployment_Status) GetEndpointDefault() string {
	if x != nil {
		return x.EndpointDefault
	}
	return ""
}

func (x *Deployment_Status) GetPrivateEndpoint() bool {
	if x != nil {
		return x.PrivateEndpoint
	}
	return false
}

func (x *Deployment_Status) GetPrivateEndpointOnly() bool {
	if x != nil {
		return x.PrivateEndpointOnly
	}
	return false
}

func (x *Deployment_Status) GetEndpointPrivateEndpoint() string {
	if x != nil {
		return x.EndpointPrivateEndpoint
	}
	return ""
}

func (x *Deployment_Status) GetEndpointPrivateEndpointSelfSigned() string {
	if x != nil {
		return x.EndpointPrivateEndpointSelfSigned
	}
	return ""
}

func (x *Deployment_Status) GetEndpointPrivateEndpointDefault() string {
	if x != nil {
		return x.EndpointPrivateEndpointDefault
	}
	return ""
}

func (x *Deployment_Status) GetBackupRestoreStatus() *Deployment_BackupRestoreStatus {
	if x != nil {
		return x.BackupRestoreStatus
	}
	return nil
}

func (x *Deployment_Status) GetTotalBackupSizeBytes() int64 {
	if x != nil {
		return x.TotalBackupSizeBytes
	}
	return 0
}

func (x *Deployment_Status) GetBackupUploadInProgress() bool {
	if x != nil {
		return x.BackupUploadInProgress
	}
	return false
}

func (x *Deployment_Status) GetIsUpToDate() bool {
	if x != nil {
		return x.IsUpToDate
	}
	return false
}

func (x *Deployment_Status) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

// The status of backup restore
// All members of this message are read-only.
type Deployment_BackupRestoreStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The revision of the used BackupRestoreSpec
	Revision int32 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// The timestamp of when the backup restore status was updated.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Set if the deployment is preparing or restoring a backup
	Restoring bool `protobuf:"varint,10,opt,name=restoring,proto3" json:"restoring,omitempty"`
	// Status of the restore backup operation.
	// Enum of the following values: "<empty>|Preparing|Restoring|Restored|Failed"
	Status string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Failure reason of the backup restore (if applicable)
	FailureReason string `protobuf:"bytes,12,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *Deployment_BackupRestoreStatus) Reset() {
	*x = Deployment_BackupRestoreStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_BackupRestoreStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_BackupRestoreStatus) ProtoMessage() {}

func (x *Deployment_BackupRestoreStatus) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_BackupRestoreStatus.ProtoReflect.Descriptor instead.
func (*Deployment_BackupRestoreStatus) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Deployment_BackupRestoreStatus) GetRevision() int32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Deployment_BackupRestoreStatus) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Deployment_BackupRestoreStatus) GetRestoring() bool {
	if x != nil {
		return x.Restoring
	}
	return false
}

func (x *Deployment_BackupRestoreStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Deployment_BackupRestoreStatus) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

// Expiration of the deployment.
// All members of this message are read-only.
type Deployment_Expiration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expiration timestamp of the deployment
	// If not set, the deployment will not expire.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Human readable reason for why the deployment expires (or does not expire).
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The timestamp of when the last "this deployment will expire at" email was
	// send.
	// If not set, no such email has been send.
	LastWarningEmailSendAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_warning_email_send_at,json=lastWarningEmailSendAt,proto3" json:"last_warning_email_send_at,omitempty"`
	// List of email addresses to which the last warning email has been send.
	// Not set when no such email has been send.
	LastWarningEmailSendTo []string `protobuf:"bytes,4,rep,name=last_warning_email_send_to,json=lastWarningEmailSendTo,proto3" json:"last_warning_email_send_to,omitempty"`
}

func (x *Deployment_Expiration) Reset() {
	*x = Deployment_Expiration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_Expiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_Expiration) ProtoMessage() {}

func (x *Deployment_Expiration) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_Expiration.ProtoReflect.Descriptor instead.
func (*Deployment_Expiration) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Deployment_Expiration) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Deployment_Expiration) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Deployment_Expiration) GetLastWarningEmailSendAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastWarningEmailSendAt
	}
	return nil
}

func (x *Deployment_Expiration) GetLastWarningEmailSendTo() []string {
	if x != nil {
		return x.LastWarningEmailSendTo
	}
	return nil
}

// Information about a backup restore.
// All members of this message are read-only.
type Deployment_BackupRestoreSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The revision of this BackupRestoreSpec
	Revision int32 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// The timestamp of when the last revision has been updated.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Identifier of the user that restored this backup.
	// This is a read-only value.
	RestoredById string `protobuf:"bytes,3,opt,name=restored_by_id,json=restoredById,proto3" json:"restored_by_id,omitempty"`
	// Identifier of a backup to restore to.
	BackupId string `protobuf:"bytes,10,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
}

func (x *Deployment_BackupRestoreSpec) Reset() {
	*x = Deployment_BackupRestoreSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_BackupRestoreSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_BackupRestoreSpec) ProtoMessage() {}

func (x *Deployment_BackupRestoreSpec) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_BackupRestoreSpec.ProtoReflect.Descriptor instead.
func (*Deployment_BackupRestoreSpec) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 7}
}

func (x *Deployment_BackupRestoreSpec) GetRevision() int32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Deployment_BackupRestoreSpec) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Deployment_BackupRestoreSpec) GetRestoredById() string {
	if x != nil {
		return x.RestoredById
	}
	return ""
}

func (x *Deployment_BackupRestoreSpec) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

// Deployment's notification settings
type Deployment_NotificationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email addresses that notifications related to this deployment should be sent to.
	EmailAddresses []string `protobuf:"bytes,1,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
}

func (x *Deployment_NotificationSettings) Reset() {
	*x = Deployment_NotificationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_NotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_NotificationSettings) ProtoMessage() {}

func (x *Deployment_NotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_NotificationSettings.ProtoReflect.Descriptor instead.
func (*Deployment_NotificationSettings) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 8}
}

func (x *Deployment_NotificationSettings) GetEmailAddresses() []string {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

// Deployment's disk autoscaling settings
type Deployment_DiskAutoSizeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum allowed disk size that a node can reach (in GB).
	// [Deprecated] This setting isn't supported anymore.
	MaximumNodeDiskSize int32 `protobuf:"varint,1,opt,name=maximum_node_disk_size,json=maximumNodeDiskSize,proto3" json:"maximum_node_disk_size,omitempty"`
}

func (x *Deployment_DiskAutoSizeSettings) Reset() {
	*x = Deployment_DiskAutoSizeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_DiskAutoSizeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_DiskAutoSizeSettings) ProtoMessage() {}

func (x *Deployment_DiskAutoSizeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_DiskAutoSizeSettings.ProtoReflect.Descriptor instead.
func (*Deployment_DiskAutoSizeSettings) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 9}
}

func (x *Deployment_DiskAutoSizeSettings) GetMaximumNodeDiskSize() int32 {
	if x != nil {
		return x.MaximumNodeDiskSize
	}
	return 0
}

// Features that are available to deployments of this model type.
type DeploymentModel_Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, ML is available as a trial only.
	MlFreeTrial bool `protobuf:"varint,1,opt,name=ml_free_trial,json=mlFreeTrial,proto3" json:"ml_free_trial,omitempty"`
	// If set, private endpoints are allowed for this deployment model.
	PrivateEndpoints bool `protobuf:"varint,2,opt,name=private_endpoints,json=privateEndpoints,proto3" json:"private_endpoints,omitempty"`
	// If set, metrics endpoint integration is allowed for this deployment model.
	MetricsEndpoint bool `protobuf:"varint,3,opt,name=metrics_endpoint,json=metricsEndpoint,proto3" json:"metrics_endpoint,omitempty"`
	// If set, backups for this deployment model are allowed to be uploaded to the cloud.
	BackupUploads bool `protobuf:"varint,4,opt,name=backup_uploads,json=backupUploads,proto3" json:"backup_uploads,omitempty"`
}

func (x *DeploymentModel_Features) Reset() {
	*x = DeploymentModel_Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentModel_Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentModel_Features) ProtoMessage() {}

func (x *DeploymentModel_Features) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentModel_Features.ProtoReflect.Descriptor instead.
func (*DeploymentModel_Features) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DeploymentModel_Features) GetMlFreeTrial() bool {
	if x != nil {
		return x.MlFreeTrial
	}
	return false
}

func (x *DeploymentModel_Features) GetPrivateEndpoints() bool {
	if x != nil {
		return x.PrivateEndpoints
	}
	return false
}

func (x *DeploymentModel_Features) GetMetricsEndpoint() bool {
	if x != nil {
		return x.MetricsEndpoint
	}
	return false
}

func (x *DeploymentModel_Features) GetBackupUploads() bool {
	if x != nil {
		return x.BackupUploads
	}
	return false
}

type ServersSpecLimits_Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum value
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum value
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// Set of allowed values.
	// If this field is non-empty, only one of these values
	// is allowed.
	AllowedValues []int32 `protobuf:"varint,3,rep,packed,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
}

func (x *ServersSpecLimits_Limits) Reset() {
	*x = ServersSpecLimits_Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServersSpecLimits_Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServersSpecLimits_Limits) ProtoMessage() {}

func (x *ServersSpecLimits_Limits) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServersSpecLimits_Limits.ProtoReflect.Descriptor instead.
func (*ServersSpecLimits_Limits) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ServersSpecLimits_Limits) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ServersSpecLimits_Limits) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ServersSpecLimits_Limits) GetAllowedValues() []int32 {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

// Instructions for a specific driver
type ConnectDriverInstructions_DriverInstructions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human readable name of the driver.
	// E.g. "ArangoDB Go driver"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Lines of code
	Code []string `protobuf:"bytes,2,rep,name=code,proto3" json:"code,omitempty"`
	// Human readable remarks
	Remarks []string `protobuf:"bytes,3,rep,name=remarks,proto3" json:"remarks,omitempty"`
	// URL for getting more information on the driver.
	DriverUrl string `protobuf:"bytes,4,opt,name=driver_url,json=driverUrl,proto3" json:"driver_url,omitempty"`
}

func (x *ConnectDriverInstructions_DriverInstructions) Reset() {
	*x = ConnectDriverInstructions_DriverInstructions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectDriverInstructions_DriverInstructions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectDriverInstructions_DriverInstructions) ProtoMessage() {}

func (x *ConnectDriverInstructions_DriverInstructions) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectDriverInstructions_DriverInstructions.ProtoReflect.Descriptor instead.
func (*ConnectDriverInstructions_DriverInstructions) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{29, 0}
}

func (x *ConnectDriverInstructions_DriverInstructions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectDriverInstructions_DriverInstructions) GetCode() []string {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ConnectDriverInstructions_DriverInstructions) GetRemarks() []string {
	if x != nil {
		return x.Remarks
	}
	return nil
}

func (x *ConnectDriverInstructions_DriverInstructions) GetDriverUrl() string {
	if x != nil {
		return x.DriverUrl
	}
	return ""
}

type DeploymentPrice_NetworkTransferPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price per GB of network transfer into the database
	IngressPricePerGb float32 `protobuf:"fixed32,1,opt,name=ingress_price_per_gb,json=ingressPricePerGb,proto3" json:"ingress_price_per_gb,omitempty"`
	// Price per GB of network transfer out of the database
	EgressPricePerGb float32 `protobuf:"fixed32,2,opt,name=egress_price_per_gb,json=egressPricePerGb,proto3" json:"egress_price_per_gb,omitempty"`
	// Description of this price
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DeploymentPrice_NetworkTransferPrice) Reset() {
	*x = DeploymentPrice_NetworkTransferPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentPrice_NetworkTransferPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPrice_NetworkTransferPrice) ProtoMessage() {}

func (x *DeploymentPrice_NetworkTransferPrice) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPrice_NetworkTransferPrice.ProtoReflect.Descriptor instead.
func (*DeploymentPrice_NetworkTransferPrice) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32, 0}
}

func (x *DeploymentPrice_NetworkTransferPrice) GetIngressPricePerGb() float32 {
	if x != nil {
		return x.IngressPricePerGb
	}
	return 0
}

func (x *DeploymentPrice_NetworkTransferPrice) GetEgressPricePerGb() float32 {
	if x != nil {
		return x.EgressPricePerGb
	}
	return 0
}

func (x *DeploymentPrice_NetworkTransferPrice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DeploymentPrice_BackupPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price per GB/hour of uploaded backup storage
	PricePerGbPerHour float32 `protobuf:"fixed32,1,opt,name=price_per_gb_per_hour,json=pricePerGbPerHour,proto3" json:"price_per_gb_per_hour,omitempty"`
}

func (x *DeploymentPrice_BackupPrice) Reset() {
	*x = DeploymentPrice_BackupPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentPrice_BackupPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPrice_BackupPrice) ProtoMessage() {}

func (x *DeploymentPrice_BackupPrice) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPrice_BackupPrice.ProtoReflect.Descriptor instead.
func (*DeploymentPrice_BackupPrice) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32, 1}
}

func (x *DeploymentPrice_BackupPrice) GetPricePerGbPerHour() float32 {
	if x != nil {
		return x.PricePerGbPerHour
	}
	return 0
}

type DeploymentPrice_AuditLogPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price per GB/hour of audit logs in cloud storage (destination=cloud)
	PricePerGbPerHour float32 `protobuf:"fixed32,1,opt,name=price_per_gb_per_hour,json=pricePerGbPerHour,proto3" json:"price_per_gb_per_hour,omitempty"`
	// Price per 1.000 HTTPS Post invocations (destination=https-post)
	HttpsPostInvocationPricePer_1000 float32 `protobuf:"fixed32,2,opt,name=https_post_invocation_price_per_1000,json=httpsPostInvocationPricePer1000,proto3" json:"https_post_invocation_price_per_1000,omitempty"`
	// Price per GB HTTPS Post body size (destination=https-post)
	HttpsPostBodySizePricePerGb float32 `protobuf:"fixed32,3,opt,name=https_post_body_size_price_per_gb,json=httpsPostBodySizePricePerGb,proto3" json:"https_post_body_size_price_per_gb,omitempty"`
}

func (x *DeploymentPrice_AuditLogPrice) Reset() {
	*x = DeploymentPrice_AuditLogPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentPrice_AuditLogPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPrice_AuditLogPrice) ProtoMessage() {}

func (x *DeploymentPrice_AuditLogPrice) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPrice_AuditLogPrice.ProtoReflect.Descriptor instead.
func (*DeploymentPrice_AuditLogPrice) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32, 2}
}

func (x *DeploymentPrice_AuditLogPrice) GetPricePerGbPerHour() float32 {
	if x != nil {
		return x.PricePerGbPerHour
	}
	return 0
}

func (x *DeploymentPrice_AuditLogPrice) GetHttpsPostInvocationPricePer_1000() float32 {
	if x != nil {
		return x.HttpsPostInvocationPricePer_1000
	}
	return 0
}

func (x *DeploymentPrice_AuditLogPrice) GetHttpsPostBodySizePricePerGb() float32 {
	if x != nil {
		return x.HttpsPostBodySizePricePerGb
	}
	return 0
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x1d, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x40,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x20, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd4, 0x35, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x6f, 0x78, 0x78, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x78, 0x78, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41,
	0x74, 0x12, 0x57, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x26, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x69, 0x73, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x6b, 0x0a, 0x16, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x56, 0x0a,
	0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x79, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x16,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x62, 0x0a, 0x20,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x54, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x7c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x74, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xf5, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x6d, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x6f, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0xe3, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x69,
	0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x64, 0x69, 0x73, 0x6b,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x5c, 0x0a, 0x2b, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xe4, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x69, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5d,
	0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0xe5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a,
	0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x22, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1f, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0xe8, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x76, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xe9, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x56, 0x73,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xea, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xeb, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x1a, 0x6d, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0xac, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x44, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x1a, 0x88, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xb0, 0x06, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x62, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0xa4, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x49, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x25, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x21, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0xd2, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xf3, 0x01, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x6f, 0x1a, 0xb6, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x3f, 0x0a, 0x14, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x14, 0x44,
	0x69, 0x73, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x66, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd1, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70,
	0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe1, 0x01, 0x0a,
	0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x22, 0xda, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x74, 0x6c, 0x1a, 0xad, 0x01,
	0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6c,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6d, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x54, 0x0a,
	0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x61, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x53, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x50, 0x55,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x59, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x50, 0x55, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x12, 0x6b, 0x0a, 0x16, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa8, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe9, 0x05, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x68, 0x0a, 0x17, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x64,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x09, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x64,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x12, 0x64, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x5e, 0x0a, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x10, 0x64,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x5a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0e, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x53, 0x0a, 0x06,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x94, 0x03, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf6, 0x03, 0x0a, 0x0e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xd3, 0x04, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xa5, 0x02, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5e, 0x0a, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x1a, 0x75, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x75,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x75, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x5f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x73, 0x76, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x74, 0x73, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x73, 0x76, 0x22, 0x91, 0x05, 0x0a, 0x16, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x22, 0xbb,
	0x06, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x74, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x56,
	0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x98, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x67, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x47, 0x62, 0x12,
	0x2d, 0x0a, 0x13, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x47, 0x62, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x3f, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x62, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x47, 0x62, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75,
	0x72, 0x1a, 0xd8, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x62, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x47, 0x62, 0x50, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x4d, 0x0a, 0x24, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x31, 0x30, 0x30, 0x30, 0x12, 0x46, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x47, 0x62, 0x22, 0x7c, 0x0a, 0x12,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6d, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x34,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x68,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x6b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x76,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xf2, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x7d, 0x0a, 0x14, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x32, 0xbe, 0x27, 0x0a, 0x0b, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7f, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x22, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x22, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x94, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x22, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x32, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xf3, 0x01, 0x0a, 0x2d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x53, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4d, 0x3a, 0x01, 0x2a, 0x1a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x2d, 0x72, 0x6f, 0x6f, 0x74,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xbb, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x34, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2f, 0x7b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x7f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x76, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x12, 0xb5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x50, 0x55, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x50, 0x55, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x50, 0x55, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x70, 0x75, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x12, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x27, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xa9, 0x01, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x69,
	0x7a, 0x65, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x69, 0x7a, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0xb9, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2e, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa4, 0x01, 0x0a,
	0x18, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x31, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x16, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3d, 0x22, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2d, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x31, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x2a, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_data_proto_goTypes = []interface{}{
	(NotificationSeverity)(0),                                    // 0: arangodb.cloud.data.v1.NotificationSeverity
	(*RotateDeploymentServerRequest)(nil),                        // 1: arangodb.cloud.data.v1.RotateDeploymentServerRequest
	(*CreateTestDatabaseResponse)(nil),                           // 2: arangodb.cloud.data.v1.CreateTestDatabaseResponse
	(*CreateTestDatabaseRequest)(nil),                            // 3: arangodb.cloud.data.v1.CreateTestDatabaseRequest
	(*RebalanceDeploymentShardsRequest)(nil),                     // 4: arangodb.cloud.data.v1.RebalanceDeploymentShardsRequest
	(*Deployment)(nil),                                           // 5: arangodb.cloud.data.v1.Deployment
	(*NodeSize)(nil),                                             // 6: arangodb.cloud.data.v1.NodeSize
	(*NodeSizeList)(nil),                                         // 7: arangodb.cloud.data.v1.NodeSizeList
	(*NodeSizesRequest)(nil),                                     // 8: arangodb.cloud.data.v1.NodeSizesRequest
	(*DeploymentModel)(nil),                                      // 9: arangodb.cloud.data.v1.DeploymentModel
	(*DeploymentModelList)(nil),                                  // 10: arangodb.cloud.data.v1.DeploymentModelList
	(*ListDeploymentModelsRequest)(nil),                          // 11: arangodb.cloud.data.v1.ListDeploymentModelsRequest
	(*CPUSize)(nil),                                              // 12: arangodb.cloud.data.v1.CPUSize
	(*CPUSizeList)(nil),                                          // 13: arangodb.cloud.data.v1.CPUSizeList
	(*ListCPUSizesRequest)(nil),                                  // 14: arangodb.cloud.data.v1.ListCPUSizesRequest
	(*DeploymentCredentialsRequest)(nil),                         // 15: arangodb.cloud.data.v1.DeploymentCredentialsRequest
	(*DeploymentCredentials)(nil),                                // 16: arangodb.cloud.data.v1.DeploymentCredentials
	(*DeploymentList)(nil),                                       // 17: arangodb.cloud.data.v1.DeploymentList
	(*Version)(nil),                                              // 18: arangodb.cloud.data.v1.Version
	(*ReplaceVersionBy)(nil),                                     // 19: arangodb.cloud.data.v1.ReplaceVersionBy
	(*UpgradeVersionRecommendation)(nil),                         // 20: arangodb.cloud.data.v1.UpgradeVersionRecommendation
	(*VersionList)(nil),                                          // 21: arangodb.cloud.data.v1.VersionList
	(*ListVersionsRequest)(nil),                                  // 22: arangodb.cloud.data.v1.ListVersionsRequest
	(*ServersSpecLimitsRequest)(nil),                             // 23: arangodb.cloud.data.v1.ServersSpecLimitsRequest
	(*ServersSpecLimits)(nil),                                    // 24: arangodb.cloud.data.v1.ServersSpecLimits
	(*CalculateDeploymentSizeRequest)(nil),                       // 25: arangodb.cloud.data.v1.CalculateDeploymentSizeRequest
	(*DeploymentSize)(nil),                                       // 26: arangodb.cloud.data.v1.DeploymentSize
	(*DeploymentSizeRequest)(nil),                                // 27: arangodb.cloud.data.v1.DeploymentSizeRequest
	(*DeploymentSizeRecommendation)(nil),                         // 28: arangodb.cloud.data.v1.DeploymentSizeRecommendation
	(*DataVolumeInfo)(nil),                                       // 29: arangodb.cloud.data.v1.DataVolumeInfo
	(*ConnectDriverInstructions)(nil),                            // 30: arangodb.cloud.data.v1.ConnectDriverInstructions
	(*ImportDataInstructions)(nil),                               // 31: arangodb.cloud.data.v1.ImportDataInstructions
	(*DeploymentPriceRequest)(nil),                               // 32: arangodb.cloud.data.v1.DeploymentPriceRequest
	(*DeploymentPrice)(nil),                                      // 33: arangodb.cloud.data.v1.DeploymentPrice
	(*DeploymentFeatures)(nil),                                   // 34: arangodb.cloud.data.v1.DeploymentFeatures
	(*DeploymentFeaturesRequest)(nil),                            // 35: arangodb.cloud.data.v1.DeploymentFeaturesRequest
	(*UpdateDeploymentScheduledRootPasswordRotationRequest)(nil), // 36: arangodb.cloud.data.v1.UpdateDeploymentScheduledRootPasswordRotationRequest
	(*ListDiskPerformancesRequest)(nil),                          // 37: arangodb.cloud.data.v1.ListDiskPerformancesRequest
	(*GetDiskPerformanceRequest)(nil),                            // 38: arangodb.cloud.data.v1.GetDiskPerformanceRequest
	(*DiskPerformanceList)(nil),                                  // 39: arangodb.cloud.data.v1.DiskPerformanceList
	(*DiskPerformance)(nil),                                      // 40: arangodb.cloud.data.v1.DiskPerformance
	(*Notification)(nil),                                         // 41: arangodb.cloud.data.v1.Notification
	(*ListDeploymentsByFilterRequest)(nil),                       // 42: arangodb.cloud.data.v1.ListDeploymentsByFilterRequest
	(*Deployment_CertificateSpec)(nil),                           // 43: arangodb.cloud.data.v1.Deployment.CertificateSpec
	(*Deployment_ServersSpec)(nil),                               // 44: arangodb.cloud.data.v1.Deployment.ServersSpec
	(*Deployment_ModelSpec)(nil),                                 // 45: arangodb.cloud.data.v1.Deployment.ModelSpec
	(*Deployment_ServerStatus)(nil),                              // 46: arangodb.cloud.data.v1.Deployment.ServerStatus
	(*Deployment_Status)(nil),                                    // 47: arangodb.cloud.data.v1.Deployment.Status
	(*Deployment_BackupRestoreStatus)(nil),                       // 48: arangodb.cloud.data.v1.Deployment.BackupRestoreStatus
	(*Deployment_Expiration)(nil),                                // 49: arangodb.cloud.data.v1.Deployment.Expiration
	(*Deployment_BackupRestoreSpec)(nil),                         // 50: arangodb.cloud.data.v1.Deployment.BackupRestoreSpec
	(*Deployment_NotificationSettings)(nil),                      // 51: arangodb.cloud.data.v1.Deployment.NotificationSettings
	(*Deployment_DiskAutoSizeSettings)(nil),                      // 52: arangodb.cloud.data.v1.Deployment.DiskAutoSizeSettings
	nil,                                                          // 53: arangodb.cloud.data.v1.Deployment.NotificationsEntry
	(*DeploymentModel_Features)(nil),                             // 54: arangodb.cloud.data.v1.DeploymentModel.Features
	(*ServersSpecLimits_Limits)(nil),                             // 55: arangodb.cloud.data.v1.ServersSpecLimits.Limits
	(*ConnectDriverInstructions_DriverInstructions)(nil),         // 56: arangodb.cloud.data.v1.ConnectDriverInstructions.DriverInstructions
	(*DeploymentPrice_NetworkTransferPrice)(nil),                 // 57: arangodb.cloud.data.v1.DeploymentPrice.NetworkTransferPrice
	(*DeploymentPrice_BackupPrice)(nil),                          // 58: arangodb.cloud.data.v1.DeploymentPrice.BackupPrice
	(*DeploymentPrice_AuditLogPrice)(nil),                        // 59: arangodb.cloud.data.v1.DeploymentPrice.AuditLogPrice
	(*timestamppb.Timestamp)(nil),                                // 60: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                                  // 61: google.protobuf.Duration
	(*v1.Budget)(nil),                                            // 62: arangodb.cloud.common.v1.Budget
	(*v1.ListOptions)(nil),                                       // 63: arangodb.cloud.common.v1.ListOptions
	(*v1.Empty)(nil),                                             // 64: arangodb.cloud.common.v1.Empty
	(*v1.IDOptions)(nil),                                         // 65: arangodb.cloud.common.v1.IDOptions
	(*v1.Version)(nil),                                           // 66: arangodb.cloud.common.v1.Version
}
var file_data_proto_depIdxs = []int32{
	60, // 0: arangodb.cloud.data.v1.Deployment.created_at:type_name -> google.protobuf.Timestamp
	60, // 1: arangodb.cloud.data.v1.Deployment.deleted_at:type_name -> google.protobuf.Timestamp
	60, // 2: arangodb.cloud.data.v1.Deployment.last_paused_at:type_name -> google.protobuf.Timestamp
	60, // 3: arangodb.cloud.data.v1.Deployment.last_resumed_at:type_name -> google.protobuf.Timestamp
	60, // 4: arangodb.cloud.data.v1.Deployment.prepaid_deployment_starts_at:type_name -> google.protobuf.Timestamp
	60, // 5: arangodb.cloud.data.v1.Deployment.prepaid_deployment_ends_at:type_name -> google.protobuf.Timestamp
	19, // 6: arangodb.cloud.data.v1.Deployment.replace_version_by:type_name -> arangodb.cloud.data.v1.ReplaceVersionBy
	20, // 7: arangodb.cloud.data.v1.Deployment.upgrade_recommendation:type_name -> arangodb.cloud.data.v1.UpgradeVersionRecommendation
	43, // 8: arangodb.cloud.data.v1.Deployment.certificates:type_name -> arangodb.cloud.data.v1.Deployment.CertificateSpec
	44, // 9: arangodb.cloud.data.v1.Deployment.servers:type_name -> arangodb.cloud.data.v1.Deployment.ServersSpec
	45, // 10: arangodb.cloud.data.v1.Deployment.model:type_name -> arangodb.cloud.data.v1.Deployment.ModelSpec
	61, // 11: arangodb.cloud.data.v1.Deployment.disk_rate_limit_period:type_name -> google.protobuf.Duration
	60, // 12: arangodb.cloud.data.v1.Deployment.last_disk_performance_updated_at:type_name -> google.protobuf.Timestamp
	60, // 13: arangodb.cloud.data.v1.Deployment.last_disk_size_updated_at:type_name -> google.protobuf.Timestamp
	61, // 14: arangodb.cloud.data.v1.Deployment.disk_rate_limit_active:type_name -> google.protobuf.Duration
	47, // 15: arangodb.cloud.data.v1.Deployment.status:type_name -> arangodb.cloud.data.v1.Deployment.Status
	26, // 16: arangodb.cloud.data.v1.Deployment.size:type_name -> arangodb.cloud.data.v1.DeploymentSize
	49, // 17: arangodb.cloud.data.v1.Deployment.expiration:type_name -> arangodb.cloud.data.v1.Deployment.Expiration
	50, // 18: arangodb.cloud.data.v1.Deployment.backup_restore:type_name -> arangodb.cloud.data.v1.Deployment.BackupRestoreSpec
	28, // 19: arangodb.cloud.data.v1.Deployment.deployment_recommendations:type_name -> arangodb.cloud.data.v1.DeploymentSizeRecommendation
	51, // 20: arangodb.cloud.data.v1.Deployment.notification_settings:type_name -> arangodb.cloud.data.v1.Deployment.NotificationSettings
	52, // 21: arangodb.cloud.data.v1.Deployment.disk_auto_size_settings:type_name -> arangodb.cloud.data.v1.Deployment.DiskAutoSizeSettings
	60, // 22: arangodb.cloud.data.v1.Deployment.last_root_password_rotated_at:type_name -> google.protobuf.Timestamp
	53, // 23: arangodb.cloud.data.v1.Deployment.notifications:type_name -> arangodb.cloud.data.v1.Deployment.NotificationsEntry
	6,  // 24: arangodb.cloud.data.v1.NodeSizeList.items:type_name -> arangodb.cloud.data.v1.NodeSize
	54, // 25: arangodb.cloud.data.v1.DeploymentModel.features:type_name -> arangodb.cloud.data.v1.DeploymentModel.Features
	9,  // 26: arangodb.cloud.data.v1.DeploymentModelList.items:type_name -> arangodb.cloud.data.v1.DeploymentModel
	12, // 27: arangodb.cloud.data.v1.CPUSizeList.items:type_name -> arangodb.cloud.data.v1.CPUSize
	5,  // 28: arangodb.cloud.data.v1.DeploymentList.items:type_name -> arangodb.cloud.data.v1.Deployment
	62, // 29: arangodb.cloud.data.v1.DeploymentList.budget:type_name -> arangodb.cloud.common.v1.Budget
	19, // 30: arangodb.cloud.data.v1.Version.replace_by:type_name -> arangodb.cloud.data.v1.ReplaceVersionBy
	20, // 31: arangodb.cloud.data.v1.Version.upgrade_recommendation:type_name -> arangodb.cloud.data.v1.UpgradeVersionRecommendation
	60, // 32: arangodb.cloud.data.v1.ReplaceVersionBy.auto_update_date:type_name -> google.protobuf.Timestamp
	18, // 33: arangodb.cloud.data.v1.VersionList.items:type_name -> arangodb.cloud.data.v1.Version
	63, // 34: arangodb.cloud.data.v1.ListVersionsRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	55, // 35: arangodb.cloud.data.v1.ServersSpecLimits.coordinators:type_name -> arangodb.cloud.data.v1.ServersSpecLimits.Limits
	55, // 36: arangodb.cloud.data.v1.ServersSpecLimits.coordinator_memory_size:type_name -> arangodb.cloud.data.v1.ServersSpecLimits.Limits
	55, // 37: arangodb.cloud.data.v1.ServersSpecLimits.dbservers:type_name -> arangodb.cloud.data.v1.ServersSpecLimits.Limits
	55, // 38: arangodb.cloud.data.v1.ServersSpecLimits.dbserver_memory_size:type_name -> arangodb.cloud.data.v1.ServersSpecLimits.Limits
	55, // 39: arangodb.cloud.data.v1.ServersSpecLimits.dbserver_disk_size:type_name -> arangodb.cloud.data.v1.ServersSpecLimits.Limits
	55, // 40: arangodb.cloud.data.v1.ServersSpecLimits.node_memory_size:type_name -> arangodb.cloud.data.v1.ServersSpecLimits.Limits
	55, // 41: arangodb.cloud.data.v1.ServersSpecLimits.node_count:type_name -> arangodb.cloud.data.v1.ServersSpecLimits.Limits
	27, // 42: arangodb.cloud.data.v1.DeploymentSizeRecommendation.request:type_name -> arangodb.cloud.data.v1.DeploymentSizeRequest
	60, // 43: arangodb.cloud.data.v1.DeploymentSizeRecommendation.created_at:type_name -> google.protobuf.Timestamp
	60, // 44: arangodb.cloud.data.v1.DataVolumeInfo.measured_at:type_name -> google.protobuf.Timestamp
	56, // 45: arangodb.cloud.data.v1.ConnectDriverInstructions.drivers:type_name -> arangodb.cloud.data.v1.ConnectDriverInstructions.DriverInstructions
	57, // 46: arangodb.cloud.data.v1.DeploymentPrice.network_transfer_prices:type_name -> arangodb.cloud.data.v1.DeploymentPrice.NetworkTransferPrice
	58, // 47: arangodb.cloud.data.v1.DeploymentPrice.backup_price:type_name -> arangodb.cloud.data.v1.DeploymentPrice.BackupPrice
	59, // 48: arangodb.cloud.data.v1.DeploymentPrice.auditlog_price:type_name -> arangodb.cloud.data.v1.DeploymentPrice.AuditLogPrice
	40, // 49: arangodb.cloud.data.v1.DiskPerformanceList.items:type_name -> arangodb.cloud.data.v1.DiskPerformance
	0,  // 50: arangodb.cloud.data.v1.Notification.severity:type_name -> arangodb.cloud.data.v1.NotificationSeverity
	60, // 51: arangodb.cloud.data.v1.Notification.created_at:type_name -> google.protobuf.Timestamp
	60, // 52: arangodb.cloud.data.v1.Notification.updated_at:type_name -> google.protobuf.Timestamp
	60, // 53: arangodb.cloud.data.v1.Notification.expires_at:type_name -> google.protobuf.Timestamp
	60, // 54: arangodb.cloud.data.v1.ListDeploymentsByFilterRequest.expires_after:type_name -> google.protobuf.Timestamp
	60, // 55: arangodb.cloud.data.v1.ListDeploymentsByFilterRequest.expires_before:type_name -> google.protobuf.Timestamp
	63, // 56: arangodb.cloud.data.v1.ListDeploymentsByFilterRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	60, // 57: arangodb.cloud.data.v1.Deployment.ServerStatus.created_at:type_name -> google.protobuf.Timestamp
	60, // 58: arangodb.cloud.data.v1.Deployment.ServerStatus.last_started_at:type_name -> google.protobuf.Timestamp
	29, // 59: arangodb.cloud.data.v1.Deployment.ServerStatus.data_volume_info:type_name -> arangodb.cloud.data.v1.DataVolumeInfo
	46, // 60: arangodb.cloud.data.v1.Deployment.Status.servers:type_name -> arangodb.cloud.data.v1.Deployment.ServerStatus
	60, // 61: arangodb.cloud.data.v1.Deployment.Status.bootstrapped_at:type_name -> google.protobuf.Timestamp
	48, // 62: arangodb.cloud.data.v1.Deployment.Status.backup_restore_status:type_name -> arangodb.cloud.data.v1.Deployment.BackupRestoreStatus
	60, // 63: arangodb.cloud.data.v1.Deployment.BackupRestoreStatus.last_updated_at:type_name -> google.protobuf.Timestamp
	60, // 64: arangodb.cloud.data.v1.Deployment.Expiration.expires_at:type_name -> google.protobuf.Timestamp
	60, // 65: arangodb.cloud.data.v1.Deployment.Expiration.last_warning_email_send_at:type_name -> google.protobuf.Timestamp
	60, // 66: arangodb.cloud.data.v1.Deployment.BackupRestoreSpec.last_updated_at:type_name -> google.protobuf.Timestamp
	41, // 67: arangodb.cloud.data.v1.Deployment.NotificationsEntry.value:type_name -> arangodb.cloud.data.v1.Notification
	64, // 68: arangodb.cloud.data.v1.DataService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	63, // 69: arangodb.cloud.data.v1.DataService.ListDeployments:input_type -> arangodb.cloud.common.v1.ListOptions
	42, // 70: arangodb.cloud.data.v1.DataService.ListDeploymentsByFilter:input_type -> arangodb.cloud.data.v1.ListDeploymentsByFilterRequest
	65, // 71: arangodb.cloud.data.v1.DataService.GetDeployment:input_type -> arangodb.cloud.common.v1.IDOptions
	65, // 72: arangodb.cloud.data.v1.DataService.GetDeploymentUpdates:input_type -> arangodb.cloud.common.v1.IDOptions
	5,  // 73: arangodb.cloud.data.v1.DataService.CreateDeployment:input_type -> arangodb.cloud.data.v1.Deployment
	5,  // 74: arangodb.cloud.data.v1.DataService.UpdateDeployment:input_type -> arangodb.cloud.data.v1.Deployment
	36, // 75: arangodb.cloud.data.v1.DataService.UpdateDeploymentScheduledRootPasswordRotation:input_type -> arangodb.cloud.data.v1.UpdateDeploymentScheduledRootPasswordRotationRequest
	65, // 76: arangodb.cloud.data.v1.DataService.DeleteDeployment:input_type -> arangodb.cloud.common.v1.IDOptions
	15, // 77: arangodb.cloud.data.v1.DataService.GetDeploymentCredentials:input_type -> arangodb.cloud.data.v1.DeploymentCredentialsRequest
	22, // 78: arangodb.cloud.data.v1.DataService.ListVersions:input_type -> arangodb.cloud.data.v1.ListVersionsRequest
	64, // 79: arangodb.cloud.data.v1.DataService.GetDefaultVersion:input_type -> arangodb.cloud.common.v1.Empty
	65, // 80: arangodb.cloud.data.v1.DataService.GetVersion:input_type -> arangodb.cloud.common.v1.IDOptions
	23, // 81: arangodb.cloud.data.v1.DataService.GetServersSpecLimits:input_type -> arangodb.cloud.data.v1.ServersSpecLimitsRequest
	8,  // 82: arangodb.cloud.data.v1.DataService.ListNodeSizes:input_type -> arangodb.cloud.data.v1.NodeSizesRequest
	11, // 83: arangodb.cloud.data.v1.DataService.ListDeploymentModels:input_type -> arangodb.cloud.data.v1.ListDeploymentModelsRequest
	14, // 84: arangodb.cloud.data.v1.DataService.ListCPUSizes:input_type -> arangodb.cloud.data.v1.ListCPUSizesRequest
	65, // 85: arangodb.cloud.data.v1.DataService.GetDeploymentModel:input_type -> arangodb.cloud.common.v1.IDOptions
	25, // 86: arangodb.cloud.data.v1.DataService.CalculateDeploymentSize:input_type -> arangodb.cloud.data.v1.CalculateDeploymentSizeRequest
	27, // 87: arangodb.cloud.data.v1.DataService.RecommendDeploymentSize:input_type -> arangodb.cloud.data.v1.DeploymentSizeRequest
	65, // 88: arangodb.cloud.data.v1.DataService.GetConnectDriverInstructions:input_type -> arangodb.cloud.common.v1.IDOptions
	65, // 89: arangodb.cloud.data.v1.DataService.GetImportDataInstructions:input_type -> arangodb.cloud.common.v1.IDOptions
	32, // 90: arangodb.cloud.data.v1.DataService.CalculateDeploymentPrice:input_type -> arangodb.cloud.data.v1.DeploymentPriceRequest
	35, // 91: arangodb.cloud.data.v1.DataService.GetDeploymentFeatures:input_type -> arangodb.cloud.data.v1.DeploymentFeaturesRequest
	65, // 92: arangodb.cloud.data.v1.DataService.PauseDeployment:input_type -> arangodb.cloud.common.v1.IDOptions
	65, // 93: arangodb.cloud.data.v1.DataService.ResumeDeployment:input_type -> arangodb.cloud.common.v1.IDOptions
	1,  // 94: arangodb.cloud.data.v1.DataService.RotateDeploymentServer:input_type -> arangodb.cloud.data.v1.RotateDeploymentServerRequest
	3,  // 95: arangodb.cloud.data.v1.DataService.CreateTestDatabase:input_type -> arangodb.cloud.data.v1.CreateTestDatabaseRequest
	4,  // 96: arangodb.cloud.data.v1.DataService.RebalanceDeploymentShards:input_type -> arangodb.cloud.data.v1.RebalanceDeploymentShardsRequest
	37, // 97: arangodb.cloud.data.v1.DataService.ListDiskPerformances:input_type -> arangodb.cloud.data.v1.ListDiskPerformancesRequest
	38, // 98: arangodb.cloud.data.v1.DataService.GetDiskPerformance:input_type -> arangodb.cloud.data.v1.GetDiskPerformanceRequest
	66, // 99: arangodb.cloud.data.v1.DataService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	17, // 100: arangodb.cloud.data.v1.DataService.ListDeployments:output_type -> arangodb.cloud.data.v1.DeploymentList
	17, // 101: arangodb.cloud.data.v1.DataService.ListDeploymentsByFilter:output_type -> arangodb.cloud.data.v1.DeploymentList
	5,  // 102: arangodb.cloud.data.v1.DataService.GetDeployment:output_type -> arangodb.cloud.data.v1.Deployment
	5,  // 103: arangodb.cloud.data.v1.DataService.GetDeploymentUpdates:output_type -> arangodb.cloud.data.v1.Deployment
	5,  // 104: arangodb.cloud.data.v1.DataService.CreateDeployment:output_type -> arangodb.cloud.data.v1.Deployment
	5,  // 105: arangodb.cloud.data.v1.DataService.UpdateDeployment:output_type -> arangodb.cloud.data.v1.Deployment
	64, // 106: arangodb.cloud.data.v1.DataService.UpdateDeploymentScheduledRootPasswordRotation:output_type -> arangodb.cloud.common.v1.Empty
	64, // 107: arangodb.cloud.data.v1.DataService.DeleteDeployment:output_type -> arangodb.cloud.common.v1.Empty
	16, // 108: arangodb.cloud.data.v1.DataService.GetDeploymentCredentials:output_type -> arangodb.cloud.data.v1.DeploymentCredentials
	21, // 109: arangodb.cloud.data.v1.DataService.ListVersions:output_type -> arangodb.cloud.data.v1.VersionList
	18, // 110: arangodb.cloud.data.v1.DataService.GetDefaultVersion:output_type -> arangodb.cloud.data.v1.Version
	18, // 111: arangodb.cloud.data.v1.DataService.GetVersion:output_type -> arangodb.cloud.data.v1.Version
	24, // 112: arangodb.cloud.data.v1.DataService.GetServersSpecLimits:output_type -> arangodb.cloud.data.v1.ServersSpecLimits
	7,  // 113: arangodb.cloud.data.v1.DataService.ListNodeSizes:output_type -> arangodb.cloud.data.v1.NodeSizeList
	10, // 114: arangodb.cloud.data.v1.DataService.ListDeploymentModels:output_type -> arangodb.cloud.data.v1.DeploymentModelList
	13, // 115: arangodb.cloud.data.v1.DataService.ListCPUSizes:output_type -> arangodb.cloud.data.v1.CPUSizeList
	9,  // 116: arangodb.cloud.data.v1.DataService.GetDeploymentModel:output_type -> arangodb.cloud.data.v1.DeploymentModel
	26, // 117: arangodb.cloud.data.v1.DataService.CalculateDeploymentSize:output_type -> arangodb.cloud.data.v1.DeploymentSize
	28, // 118: arangodb.cloud.data.v1.DataService.RecommendDeploymentSize:output_type -> arangodb.cloud.data.v1.DeploymentSizeRecommendation
	30, // 119: arangodb.cloud.data.v1.DataService.GetConnectDriverInstructions:output_type -> arangodb.cloud.data.v1.ConnectDriverInstructions
	31, // 120: arangodb.cloud.data.v1.DataService.GetImportDataInstructions:output_type -> arangodb.cloud.data.v1.ImportDataInstructions
	33, // 121: arangodb.cloud.data.v1.DataService.CalculateDeploymentPrice:output_type -> arangodb.cloud.data.v1.DeploymentPrice
	34, // 122: arangodb.cloud.data.v1.DataService.GetDeploymentFeatures:output_type -> arangodb.cloud.data.v1.DeploymentFeatures
	64, // 123: arangodb.cloud.data.v1.DataService.PauseDeployment:output_type -> arangodb.cloud.common.v1.Empty
	64, // 124: arangodb.cloud.data.v1.DataService.ResumeDeployment:output_type -> arangodb.cloud.common.v1.Empty
	64, // 125: arangodb.cloud.data.v1.DataService.RotateDeploymentServer:output_type -> arangodb.cloud.common.v1.Empty
	2,  // 126: arangodb.cloud.data.v1.DataService.CreateTestDatabase:output_type -> arangodb.cloud.data.v1.CreateTestDatabaseResponse
	64, // 127: arangodb.cloud.data.v1.DataService.RebalanceDeploymentShards:output_type -> arangodb.cloud.common.v1.Empty
	39, // 128: arangodb.cloud.data.v1.DataService.ListDiskPerformances:output_type -> arangodb.cloud.data.v1.DiskPerformanceList
	40, // 129: arangodb.cloud.data.v1.DataService.GetDiskPerformance:output_type -> arangodb.cloud.data.v1.DiskPerformance
	99, // [99:130] is the sub-list for method output_type
	68, // [68:99] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateDeploymentServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebalanceDeploymentShardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSizesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentModelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCPUSizesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceVersionBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeVersionRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServersSpecLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServersSpecLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateDeploymentSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentSizeRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataVolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectDriverInstructions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDataInstructions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeploymentScheduledRootPasswordRotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiskPerformancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPerformanceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_CertificateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_ServersSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_ModelSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_ServerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_BackupRestoreStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_Expiration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_BackupRestoreSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_NotificationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_DiskAutoSizeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentModel_Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServersSpecLimits_Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectDriverInstructions_DriverInstructions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentPrice_NetworkTransferPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentPrice_BackupPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentPrice_AuditLogPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		EnumInfos:         file_data_proto_enumTypes,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all deployments in the project identified by the given context ID.
	// Required permissions:
	// - data.deployment.list on the project identified by the given context ID
	ListDeployments(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*DeploymentList, error)
	// Fetch all deployments in the organization identified by the given filter.
	// Only the deployments with sufficient permissions are returned.
	// If the caller has no such permission on any of the deployments (in the organization) an empty list is returned, not an error.
	// Required permissions:
	// - None (authenticated only)
	// - data.deployment.list on the filtered deployment(s)
	ListDeploymentsByFilter(ctx context.Context, in *ListDeploymentsByFilterRequest, opts ...grpc.CallOption) (*DeploymentList, error)
	// Fetch a deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Deployment, error)
	// Fetch all updates (spec and/or status) of the deployment that matches the given request.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeploymentUpdates(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (DataService_GetDeploymentUpdatesClient, error)
	// Create a new deployment
	// Required permissions:
	// - data.deployment.create on the project that owns the deployment
	// - network.privateendpointservice.create on the project that owns the deployment (if private_endpoint field is set)
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error)
	// Update a deployment
	// Required permissions:
	// - data.deployment.update on the deployment
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	UpdateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error)
	// Update the setting for scheduled root password rotation
	// Required permissions:
	// - data.deployment.update-scheduled-root-password-rotation
	UpdateDeploymentScheduledRootPasswordRotation(ctx context.Context, in *UpdateDeploymentScheduledRootPasswordRotationRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Delete a deployment
	// Note that deployments are initially only marked for deletion.
	// Once all their resources are removed the deployment itself is removed.
	// Required permissions:
	// - data.deployment.delete on the deployment
	DeleteDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch credentials for accessing deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	// - data.deploymentcredentials.get on the deployment identified by the given ID
	GetDeploymentCredentials(ctx context.Context, in *DeploymentCredentialsRequest, opts ...grpc.CallOption) (*DeploymentCredentials, error)
	// Fetch all ArangoDB versions that are available for deployments.
	// Required permissions:
	// - None
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*VersionList, error)
	// Fetch the default ArangoDB version for new deployment.
	// Required permissions:
	// - None
	GetDefaultVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*Version, error)
	// Fetch the ArangoDB version by its id (semver).
	// Required permissions:
	// - None
	GetVersion(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Version, error)
	// Fetch the limits for server specifications for deployments
	// owned by the given projected, created in the given region.
	// Required permissions:
	// - data.limits.get on the requested project
	// - data.deployment.get on the specified deployment (if deployment_id is set)
	// This method is deprecated and will be remove in the very near future, do not use this method anymore
	GetServersSpecLimits(ctx context.Context, in *ServersSpecLimitsRequest, opts ...grpc.CallOption) (*ServersSpecLimits, error)
	// Fetch the node sizes available for deployments
	// owned by the project with given ID, created in the given region with given ID.
	// If project ID "all" is used, then all node sizes for the region with given
	// ID are returned.
	// Required permissions:
	// - data.nodesize.list on the requested deployment (if deployment ID is set)
	// - data.nodesize.list on the requested project (if project ID does not equal "all")
	// - data.nodesize.list on the requested organization (if organization ID is set)
	// - None if project ID does equals "all"
	ListNodeSizes(ctx context.Context, in *NodeSizesRequest, opts ...grpc.CallOption) (*NodeSizeList, error)
	// Fetch the models available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.deploymentmodel.list on the requested project
	ListDeploymentModels(ctx context.Context, in *ListDeploymentModelsRequest, opts ...grpc.CallOption) (*DeploymentModelList, error)
	// Fetch the CPU sizes available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.cpusize.list on the requested project
	ListCPUSizes(ctx context.Context, in *ListCPUSizesRequest, opts ...grpc.CallOption) (*CPUSizeList, error)
	// Get the deployment model identified by the provided ID.
	// Required permissions:
	// - None (authenticated only)
	GetDeploymentModel(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DeploymentModel, error)
	// Calculate the total size of a deployment with given arguments.
	// Required permissions:
	// - none
	CalculateDeploymentSize(ctx context.Context, in *CalculateDeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSize, error)
	// Recommend a deployment size, for a oneshard or sharded deployments, using the
	// given input values.
	// Required permissions:
	// - none
	RecommendDeploymentSize(ctx context.Context, in *DeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSizeRecommendation, error)
	// Fetch instructions for connecting drivers to the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetConnectDriverInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ConnectDriverInstructions, error)
	// Fetch instructions for importing data into the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetImportDataInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ImportDataInstructions, error)
	// Calculate the price of a deployment of given settings.
	// Required permissions:
	// - data.deploymentprice.calculate
	CalculateDeploymentPrice(ctx context.Context, in *DeploymentPriceRequest, opts ...grpc.CallOption) (*DeploymentPrice, error)
	// Get the features that will be available to a deployment in the given context.
	// Required permissions:
	// - data.deploymentfeatures.get on the project that is given in the request.
	GetDeploymentFeatures(ctx context.Context, in *DeploymentFeaturesRequest, opts ...grpc.CallOption) (*DeploymentFeatures, error)
	// Pauses a deployment indentified by the given ID.
	// When PauseDeployment is invoked on a deployment that is not allowed to pause or has is_paused set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.pause on the deployment
	PauseDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Resumes a paused deployment identified by the given id.
	// When ResumeDeployment is invoked on a deployment that has is_paused not set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.resume on the deployment
	ResumeDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Rotate a server for a deployment.
	// This causes the server to restart after condition are deemed safe for a restart.
	// Required permissions:
	// - data.deployment.rotate-server on the deployment
	RotateDeploymentServer(ctx context.Context, in *RotateDeploymentServerRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Create a test database and user for a deployment. Returns the output containing the created
	// database name, password, username, host and port.
	// Required permissions:
	// - data.deployment.create-test-database on the deployment
	CreateTestDatabase(ctx context.Context, in *CreateTestDatabaseRequest, opts ...grpc.CallOption) (*CreateTestDatabaseResponse, error)
	// RebalanceDeploymentShards rebalances shards for deployment across the DB servers.
	// Prerelease: This function is not yet available in production.
	// Required permissions:
	// - data.deployment.rebalance-shards on the deployment
	RebalanceDeploymentShards(ctx context.Context, in *RebalanceDeploymentShardsRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Lists disk performances that match all of the given filters.
	// Required permissions:
	// - data.diskperformance.list on the deployment (if deployment ID is provided)
	// - data.diskperformance.list on the organization (if organization ID is provided, but deployment ID is not)
	// - None, authenticated only (if no deployment ID is provided)
	ListDiskPerformances(ctx context.Context, in *ListDiskPerformancesRequest, opts ...grpc.CallOption) (*DiskPerformanceList, error)
	// Get the disk performance for the requested disk performance ID.
	// Required permissions:
	// - None, authenticated only
	GetDiskPerformance(ctx context.Context, in *GetDiskPerformanceRequest, opts ...grpc.CallOption) (*DiskPerformance, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDeployments(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*DeploymentList, error) {
	out := new(DeploymentList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDeploymentsByFilter(ctx context.Context, in *ListDeploymentsByFilterRequest, opts ...grpc.CallOption) (*DeploymentList, error) {
	out := new(DeploymentList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ListDeploymentsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentUpdates(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (DataService_GetDeploymentUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[0], "/arangodb.cloud.data.v1.DataService/GetDeploymentUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceGetDeploymentUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_GetDeploymentUpdatesClient interface {
	Recv() (*Deployment, error)
	grpc.ClientStream
}

type dataServiceGetDeploymentUpdatesClient struct {
	grpc.ClientStream
}

func (x *dataServiceGetDeploymentUpdatesClient) Recv() (*Deployment, error) {
	m := new(Deployment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/UpdateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDeploymentScheduledRootPasswordRotation(ctx context.Context, in *UpdateDeploymentScheduledRootPasswordRotationRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/UpdateDeploymentScheduledRootPasswordRotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentCredentials(ctx context.Context, in *DeploymentCredentialsRequest, opts ...grpc.CallOption) (*DeploymentCredentials, error) {
	out := new(DeploymentCredentials)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetDeploymentCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*VersionList, error) {
	out := new(VersionList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ListVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDefaultVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetDefaultVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetVersion(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetServersSpecLimits(ctx context.Context, in *ServersSpecLimitsRequest, opts ...grpc.CallOption) (*ServersSpecLimits, error) {
	out := new(ServersSpecLimits)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetServersSpecLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListNodeSizes(ctx context.Context, in *NodeSizesRequest, opts ...grpc.CallOption) (*NodeSizeList, error) {
	out := new(NodeSizeList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ListNodeSizes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDeploymentModels(ctx context.Context, in *ListDeploymentModelsRequest, opts ...grpc.CallOption) (*DeploymentModelList, error) {
	out := new(DeploymentModelList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ListDeploymentModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListCPUSizes(ctx context.Context, in *ListCPUSizesRequest, opts ...grpc.CallOption) (*CPUSizeList, error) {
	out := new(CPUSizeList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ListCPUSizes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentModel(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DeploymentModel, error) {
	out := new(DeploymentModel)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetDeploymentModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CalculateDeploymentSize(ctx context.Context, in *CalculateDeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSize, error) {
	out := new(DeploymentSize)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/CalculateDeploymentSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RecommendDeploymentSize(ctx context.Context, in *DeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSizeRecommendation, error) {
	out := new(DeploymentSizeRecommendation)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/RecommendDeploymentSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetConnectDriverInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ConnectDriverInstructions, error) {
	out := new(ConnectDriverInstructions)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetConnectDriverInstructions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetImportDataInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ImportDataInstructions, error) {
	out := new(ImportDataInstructions)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetImportDataInstructions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CalculateDeploymentPrice(ctx context.Context, in *DeploymentPriceRequest, opts ...grpc.CallOption) (*DeploymentPrice, error) {
	out := new(DeploymentPrice)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/CalculateDeploymentPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentFeatures(ctx context.Context, in *DeploymentFeaturesRequest, opts ...grpc.CallOption) (*DeploymentFeatures, error) {
	out := new(DeploymentFeatures)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetDeploymentFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) PauseDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/PauseDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ResumeDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ResumeDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RotateDeploymentServer(ctx context.Context, in *RotateDeploymentServerRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/RotateDeploymentServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateTestDatabase(ctx context.Context, in *CreateTestDatabaseRequest, opts ...grpc.CallOption) (*CreateTestDatabaseResponse, error) {
	out := new(CreateTestDatabaseResponse)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/CreateTestDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RebalanceDeploymentShards(ctx context.Context, in *RebalanceDeploymentShardsRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/RebalanceDeploymentShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDiskPerformances(ctx context.Context, in *ListDiskPerformancesRequest, opts ...grpc.CallOption) (*DiskPerformanceList, error) {
	out := new(DiskPerformanceList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/ListDiskPerformances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDiskPerformance(ctx context.Context, in *GetDiskPerformanceRequest, opts ...grpc.CallOption) (*DiskPerformance, error) {
	out := new(DiskPerformance)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.data.v1.DataService/GetDiskPerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
type DataServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all deployments in the project identified by the given context ID.
	// Required permissions:
	// - data.deployment.list on the project identified by the given context ID
	ListDeployments(context.Context, *v1.ListOptions) (*DeploymentList, error)
	// Fetch all deployments in the organization identified by the given filter.
	// Only the deployments with sufficient permissions are returned.
	// If the caller has no such permission on any of the deployments (in the organization) an empty list is returned, not an error.
	// Required permissions:
	// - None (authenticated only)
	// - data.deployment.list on the filtered deployment(s)
	ListDeploymentsByFilter(context.Context, *ListDeploymentsByFilterRequest) (*DeploymentList, error)
	// Fetch a deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeployment(context.Context, *v1.IDOptions) (*Deployment, error)
	// Fetch all updates (spec and/or status) of the deployment that matches the given request.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeploymentUpdates(*v1.IDOptions, DataService_GetDeploymentUpdatesServer) error
	// Create a new deployment
	// Required permissions:
	// - data.deployment.create on the project that owns the deployment
	// - network.privateendpointservice.create on the project that owns the deployment (if private_endpoint field is set)
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	CreateDeployment(context.Context, *Deployment) (*Deployment, error)
	// Update a deployment
	// Required permissions:
	// - data.deployment.update on the deployment
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	UpdateDeployment(context.Context, *Deployment) (*Deployment, error)
	// Update the setting for scheduled root password rotation
	// Required permissions:
	// - data.deployment.update-scheduled-root-password-rotation
	UpdateDeploymentScheduledRootPasswordRotation(context.Context, *UpdateDeploymentScheduledRootPasswordRotationRequest) (*v1.Empty, error)
	// Delete a deployment
	// Note that deployments are initially only marked for deletion.
	// Once all their resources are removed the deployment itself is removed.
	// Required permissions:
	// - data.deployment.delete on the deployment
	DeleteDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Fetch credentials for accessing deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	// - data.deploymentcredentials.get on the deployment identified by the given ID
	GetDeploymentCredentials(context.Context, *DeploymentCredentialsRequest) (*DeploymentCredentials, error)
	// Fetch all ArangoDB versions that are available for deployments.
	// Required permissions:
	// - None
	ListVersions(context.Context, *ListVersionsRequest) (*VersionList, error)
	// Fetch the default ArangoDB version for new deployment.
	// Required permissions:
	// - None
	GetDefaultVersion(context.Context, *v1.Empty) (*Version, error)
	// Fetch the ArangoDB version by its id (semver).
	// Required permissions:
	// - None
	GetVersion(context.Context, *v1.IDOptions) (*Version, error)
	// Fetch the limits for server specifications for deployments
	// owned by the given projected, created in the given region.
	// Required permissions:
	// - data.limits.get on the requested project
	// - data.deployment.get on the specified deployment (if deployment_id is set)
	// This method is deprecated and will be remove in the very near future, do not use this method anymore
	GetServersSpecLimits(context.Context, *ServersSpecLimitsRequest) (*ServersSpecLimits, error)
	// Fetch the node sizes available for deployments
	// owned by the project with given ID, created in the given region with given ID.
	// If project ID "all" is used, then all node sizes for the region with given
	// ID are returned.
	// Required permissions:
	// - data.nodesize.list on the requested deployment (if deployment ID is set)
	// - data.nodesize.list on the requested project (if project ID does not equal "all")
	// - data.nodesize.list on the requested organization (if organization ID is set)
	// - None if project ID does equals "all"
	ListNodeSizes(context.Context, *NodeSizesRequest) (*NodeSizeList, error)
	// Fetch the models available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.deploymentmodel.list on the requested project
	ListDeploymentModels(context.Context, *ListDeploymentModelsRequest) (*DeploymentModelList, error)
	// Fetch the CPU sizes available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.cpusize.list on the requested project
	ListCPUSizes(context.Context, *ListCPUSizesRequest) (*CPUSizeList, error)
	// Get the deployment model identified by the provided ID.
	// Required permissions:
	// - None (authenticated only)
	GetDeploymentModel(context.Context, *v1.IDOptions) (*DeploymentModel, error)
	// Calculate the total size of a deployment with given arguments.
	// Required permissions:
	// - none
	CalculateDeploymentSize(context.Context, *CalculateDeploymentSizeRequest) (*DeploymentSize, error)
	// Recommend a deployment size, for a oneshard or sharded deployments, using the
	// given input values.
	// Required permissions:
	// - none
	RecommendDeploymentSize(context.Context, *DeploymentSizeRequest) (*DeploymentSizeRecommendation, error)
	// Fetch instructions for connecting drivers to the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetConnectDriverInstructions(context.Context, *v1.IDOptions) (*ConnectDriverInstructions, error)
	// Fetch instructions for importing data into the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetImportDataInstructions(context.Context, *v1.IDOptions) (*ImportDataInstructions, error)
	// Calculate the price of a deployment of given settings.
	// Required permissions:
	// - data.deploymentprice.calculate
	CalculateDeploymentPrice(context.Context, *DeploymentPriceRequest) (*DeploymentPrice, error)
	// Get the features that will be available to a deployment in the given context.
	// Required permissions:
	// - data.deploymentfeatures.get on the project that is given in the request.
	GetDeploymentFeatures(context.Context, *DeploymentFeaturesRequest) (*DeploymentFeatures, error)
	// Pauses a deployment indentified by the given ID.
	// When PauseDeployment is invoked on a deployment that is not allowed to pause or has is_paused set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.pause on the deployment
	PauseDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Resumes a paused deployment identified by the given id.
	// When ResumeDeployment is invoked on a deployment that has is_paused not set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.resume on the deployment
	ResumeDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Rotate a server for a deployment.
	// This causes the server to restart after condition are deemed safe for a restart.
	// Required permissions:
	// - data.deployment.rotate-server on the deployment
	RotateDeploymentServer(context.Context, *RotateDeploymentServerRequest) (*v1.Empty, error)
	// Create a test database and user for a deployment. Returns the output containing the created
	// database name, password, username, host and port.
	// Required permissions:
	// - data.deployment.create-test-database on the deployment
	CreateTestDatabase(context.Context, *CreateTestDatabaseRequest) (*CreateTestDatabaseResponse, error)
	// RebalanceDeploymentShards rebalances shards for deployment across the DB servers.
	// Prerelease: This function is not yet available in production.
	// Required permissions:
	// - data.deployment.rebalance-shards on the deployment
	RebalanceDeploymentShards(context.Context, *RebalanceDeploymentShardsRequest) (*v1.Empty, error)
	// Lists disk performances that match all of the given filters.
	// Required permissions:
	// - data.diskperformance.list on the deployment (if deployment ID is provided)
	// - data.diskperformance.list on the organization (if organization ID is provided, but deployment ID is not)
	// - None, authenticated only (if no deployment ID is provided)
	ListDiskPerformances(context.Context, *ListDiskPerformancesRequest) (*DiskPerformanceList, error)
	// Get the disk performance for the requested disk performance ID.
	// Required permissions:
	// - None, authenticated only
	GetDiskPerformance(context.Context, *GetDiskPerformanceRequest) (*DiskPerformance, error)
}

// UnimplementedDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (*UnimplementedDataServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedDataServiceServer) ListDeployments(context.Context, *v1.ListOptions) (*DeploymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (*UnimplementedDataServiceServer) ListDeploymentsByFilter(context.Context, *ListDeploymentsByFilterRequest) (*DeploymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentsByFilter not implemented")
}
func (*UnimplementedDataServiceServer) GetDeployment(context.Context, *v1.IDOptions) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (*UnimplementedDataServiceServer) GetDeploymentUpdates(*v1.IDOptions, DataService_GetDeploymentUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeploymentUpdates not implemented")
}
func (*UnimplementedDataServiceServer) CreateDeployment(context.Context, *Deployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (*UnimplementedDataServiceServer) UpdateDeployment(context.Context, *Deployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (*UnimplementedDataServiceServer) UpdateDeploymentScheduledRootPasswordRotation(context.Context, *UpdateDeploymentScheduledRootPasswordRotationRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentScheduledRootPasswordRotation not implemented")
}
func (*UnimplementedDataServiceServer) DeleteDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (*UnimplementedDataServiceServer) GetDeploymentCredentials(context.Context, *DeploymentCredentialsRequest) (*DeploymentCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentCredentials not implemented")
}
func (*UnimplementedDataServiceServer) ListVersions(context.Context, *ListVersionsRequest) (*VersionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (*UnimplementedDataServiceServer) GetDefaultVersion(context.Context, *v1.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVersion not implemented")
}
func (*UnimplementedDataServiceServer) GetVersion(context.Context, *v1.IDOptions) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedDataServiceServer) GetServersSpecLimits(context.Context, *ServersSpecLimitsRequest) (*ServersSpecLimits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersSpecLimits not implemented")
}
func (*UnimplementedDataServiceServer) ListNodeSizes(context.Context, *NodeSizesRequest) (*NodeSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeSizes not implemented")
}
func (*UnimplementedDataServiceServer) ListDeploymentModels(context.Context, *ListDeploymentModelsRequest) (*DeploymentModelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentModels not implemented")
}
func (*UnimplementedDataServiceServer) ListCPUSizes(context.Context, *ListCPUSizesRequest) (*CPUSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCPUSizes not implemented")
}
func (*UnimplementedDataServiceServer) GetDeploymentModel(context.Context, *v1.IDOptions) (*DeploymentModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentModel not implemented")
}
func (*UnimplementedDataServiceServer) CalculateDeploymentSize(context.Context, *CalculateDeploymentSizeRequest) (*DeploymentSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDeploymentSize not implemented")
}
func (*UnimplementedDataServiceServer) RecommendDeploymentSize(context.Context, *DeploymentSizeRequest) (*DeploymentSizeRecommendation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendDeploymentSize not implemented")
}
func (*UnimplementedDataServiceServer) GetConnectDriverInstructions(context.Context, *v1.IDOptions) (*ConnectDriverInstructions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectDriverInstructions not implemented")
}
func (*UnimplementedDataServiceServer) GetImportDataInstructions(context.Context, *v1.IDOptions) (*ImportDataInstructions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportDataInstructions not implemented")
}
func (*UnimplementedDataServiceServer) CalculateDeploymentPrice(context.Context, *DeploymentPriceRequest) (*DeploymentPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDeploymentPrice not implemented")
}
func (*UnimplementedDataServiceServer) GetDeploymentFeatures(context.Context, *DeploymentFeaturesRequest) (*DeploymentFeatures, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentFeatures not implemented")
}
func (*UnimplementedDataServiceServer) PauseDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseDeployment not implemented")
}
func (*UnimplementedDataServiceServer) ResumeDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeDeployment not implemented")
}
func (*UnimplementedDataServiceServer) RotateDeploymentServer(context.Context, *RotateDeploymentServerRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateDeploymentServer not implemented")
}
func (*UnimplementedDataServiceServer) CreateTestDatabase(context.Context, *CreateTestDatabaseRequest) (*CreateTestDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestDatabase not implemented")
}
func (*UnimplementedDataServiceServer) RebalanceDeploymentShards(context.Context, *RebalanceDeploymentShardsRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebalanceDeploymentShards not implemented")
}
func (*UnimplementedDataServiceServer) ListDiskPerformances(context.Context, *ListDiskPerformancesRequest) (*DiskPerformanceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskPerformances not implemented")
}
func (*UnimplementedDataServiceServer) GetDiskPerformance(context.Context, *GetDiskPerformanceRequest) (*DiskPerformance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskPerformance not implemented")
}

func RegisterDataServiceServer(s *grpc.Server, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDeployments(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDeploymentsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDeploymentsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ListDeploymentsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDeploymentsByFilter(ctx, req.(*ListDeploymentsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.IDOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).GetDeploymentUpdates(m, &dataServiceGetDeploymentUpdatesServer{stream})
}

type DataService_GetDeploymentUpdatesServer interface {
	Send(*Deployment) error
	grpc.ServerStream
}

type dataServiceGetDeploymentUpdatesServer struct {
	grpc.ServerStream
}

func (x *dataServiceGetDeploymentUpdatesServer) Send(m *Deployment) error {
	return x.ServerStream.SendMsg(m)
}

func _DataService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/UpdateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDeploymentScheduledRootPasswordRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentScheduledRootPasswordRotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDeploymentScheduledRootPasswordRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/UpdateDeploymentScheduledRootPasswordRotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDeploymentScheduledRootPasswordRotation(ctx, req.(*UpdateDeploymentScheduledRootPasswordRotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeploymentCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetDeploymentCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeploymentCredentials(ctx, req.(*DeploymentCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ListVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListVersions(ctx, req.(*ListVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDefaultVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDefaultVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetDefaultVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDefaultVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetVersion(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetServersSpecLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersSpecLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetServersSpecLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetServersSpecLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetServersSpecLimits(ctx, req.(*ServersSpecLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListNodeSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListNodeSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ListNodeSizes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListNodeSizes(ctx, req.(*NodeSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDeploymentModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDeploymentModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ListDeploymentModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDeploymentModels(ctx, req.(*ListDeploymentModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListCPUSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCPUSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListCPUSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ListCPUSizes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListCPUSizes(ctx, req.(*ListCPUSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeploymentModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetDeploymentModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeploymentModel(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CalculateDeploymentSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDeploymentSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CalculateDeploymentSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/CalculateDeploymentSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CalculateDeploymentSize(ctx, req.(*CalculateDeploymentSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RecommendDeploymentSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RecommendDeploymentSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/RecommendDeploymentSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RecommendDeploymentSize(ctx, req.(*DeploymentSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetConnectDriverInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetConnectDriverInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetConnectDriverInstructions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetConnectDriverInstructions(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetImportDataInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetImportDataInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetImportDataInstructions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetImportDataInstructions(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CalculateDeploymentPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CalculateDeploymentPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/CalculateDeploymentPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CalculateDeploymentPrice(ctx, req.(*DeploymentPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeploymentFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetDeploymentFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeploymentFeatures(ctx, req.(*DeploymentFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_PauseDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).PauseDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/PauseDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).PauseDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ResumeDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ResumeDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ResumeDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ResumeDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RotateDeploymentServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateDeploymentServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RotateDeploymentServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/RotateDeploymentServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RotateDeploymentServer(ctx, req.(*RotateDeploymentServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateTestDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateTestDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/CreateTestDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateTestDatabase(ctx, req.(*CreateTestDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RebalanceDeploymentShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceDeploymentShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RebalanceDeploymentShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/RebalanceDeploymentShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RebalanceDeploymentShards(ctx, req.(*RebalanceDeploymentShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDiskPerformances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiskPerformancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDiskPerformances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/ListDiskPerformances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDiskPerformances(ctx, req.(*ListDiskPerformancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDiskPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDiskPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.data.v1.DataService/GetDiskPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDiskPerformance(ctx, req.(*GetDiskPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.data.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _DataService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _DataService_ListDeployments_Handler,
		},
		{
			MethodName: "ListDeploymentsByFilter",
			Handler:    _DataService_ListDeploymentsByFilter_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _DataService_GetDeployment_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _DataService_CreateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _DataService_UpdateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeploymentScheduledRootPasswordRotation",
			Handler:    _DataService_UpdateDeploymentScheduledRootPasswordRotation_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _DataService_DeleteDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentCredentials",
			Handler:    _DataService_GetDeploymentCredentials_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _DataService_ListVersions_Handler,
		},
		{
			MethodName: "GetDefaultVersion",
			Handler:    _DataService_GetDefaultVersion_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _DataService_GetVersion_Handler,
		},
		{
			MethodName: "GetServersSpecLimits",
			Handler:    _DataService_GetServersSpecLimits_Handler,
		},
		{
			MethodName: "ListNodeSizes",
			Handler:    _DataService_ListNodeSizes_Handler,
		},
		{
			MethodName: "ListDeploymentModels",
			Handler:    _DataService_ListDeploymentModels_Handler,
		},
		{
			MethodName: "ListCPUSizes",
			Handler:    _DataService_ListCPUSizes_Handler,
		},
		{
			MethodName: "GetDeploymentModel",
			Handler:    _DataService_GetDeploymentModel_Handler,
		},
		{
			MethodName: "CalculateDeploymentSize",
			Handler:    _DataService_CalculateDeploymentSize_Handler,
		},
		{
			MethodName: "RecommendDeploymentSize",
			Handler:    _DataService_RecommendDeploymentSize_Handler,
		},
		{
			MethodName: "GetConnectDriverInstructions",
			Handler:    _DataService_GetConnectDriverInstructions_Handler,
		},
		{
			MethodName: "GetImportDataInstructions",
			Handler:    _DataService_GetImportDataInstructions_Handler,
		},
		{
			MethodName: "CalculateDeploymentPrice",
			Handler:    _DataService_CalculateDeploymentPrice_Handler,
		},
		{
			MethodName: "GetDeploymentFeatures",
			Handler:    _DataService_GetDeploymentFeatures_Handler,
		},
		{
			MethodName: "PauseDeployment",
			Handler:    _DataService_PauseDeployment_Handler,
		},
		{
			MethodName: "ResumeDeployment",
			Handler:    _DataService_ResumeDeployment_Handler,
		},
		{
			MethodName: "RotateDeploymentServer",
			Handler:    _DataService_RotateDeploymentServer_Handler,
		},
		{
			MethodName: "CreateTestDatabase",
			Handler:    _DataService_CreateTestDatabase_Handler,
		},
		{
			MethodName: "RebalanceDeploymentShards",
			Handler:    _DataService_RebalanceDeploymentShards_Handler,
		},
		{
			MethodName: "ListDiskPerformances",
			Handler:    _DataService_ListDiskPerformances_Handler,
		},
		{
			MethodName: "GetDiskPerformance",
			Handler:    _DataService_GetDiskPerformance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeploymentUpdates",
			Handler:       _DataService_GetDeploymentUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
