//
// DISCLAIMER
//
// Copyright 2020-2024 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: data.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataService_GetAPIVersion_FullMethodName                                 = "/arangodb.cloud.data.v1.DataService/GetAPIVersion"
	DataService_ListDeployments_FullMethodName                               = "/arangodb.cloud.data.v1.DataService/ListDeployments"
	DataService_ListDeploymentsByFilter_FullMethodName                       = "/arangodb.cloud.data.v1.DataService/ListDeploymentsByFilter"
	DataService_GetDeployment_FullMethodName                                 = "/arangodb.cloud.data.v1.DataService/GetDeployment"
	DataService_GetDeploymentUpdates_FullMethodName                          = "/arangodb.cloud.data.v1.DataService/GetDeploymentUpdates"
	DataService_CreateDeployment_FullMethodName                              = "/arangodb.cloud.data.v1.DataService/CreateDeployment"
	DataService_UpdateDeployment_FullMethodName                              = "/arangodb.cloud.data.v1.DataService/UpdateDeployment"
	DataService_UpdateDeploymentScheduledRootPasswordRotation_FullMethodName = "/arangodb.cloud.data.v1.DataService/UpdateDeploymentScheduledRootPasswordRotation"
	DataService_DeleteDeployment_FullMethodName                              = "/arangodb.cloud.data.v1.DataService/DeleteDeployment"
	DataService_GetDeploymentCredentials_FullMethodName                      = "/arangodb.cloud.data.v1.DataService/GetDeploymentCredentials"
	DataService_ListVersions_FullMethodName                                  = "/arangodb.cloud.data.v1.DataService/ListVersions"
	DataService_GetDefaultVersion_FullMethodName                             = "/arangodb.cloud.data.v1.DataService/GetDefaultVersion"
	DataService_GetVersion_FullMethodName                                    = "/arangodb.cloud.data.v1.DataService/GetVersion"
	DataService_GetServersSpecLimits_FullMethodName                          = "/arangodb.cloud.data.v1.DataService/GetServersSpecLimits"
	DataService_ListNodeSizes_FullMethodName                                 = "/arangodb.cloud.data.v1.DataService/ListNodeSizes"
	DataService_ListDeploymentModels_FullMethodName                          = "/arangodb.cloud.data.v1.DataService/ListDeploymentModels"
	DataService_ListCPUSizes_FullMethodName                                  = "/arangodb.cloud.data.v1.DataService/ListCPUSizes"
	DataService_GetDeploymentModel_FullMethodName                            = "/arangodb.cloud.data.v1.DataService/GetDeploymentModel"
	DataService_CalculateDeploymentSize_FullMethodName                       = "/arangodb.cloud.data.v1.DataService/CalculateDeploymentSize"
	DataService_RecommendDeploymentSize_FullMethodName                       = "/arangodb.cloud.data.v1.DataService/RecommendDeploymentSize"
	DataService_GetConnectDriverInstructions_FullMethodName                  = "/arangodb.cloud.data.v1.DataService/GetConnectDriverInstructions"
	DataService_GetImportDataInstructions_FullMethodName                     = "/arangodb.cloud.data.v1.DataService/GetImportDataInstructions"
	DataService_CalculateDeploymentPrice_FullMethodName                      = "/arangodb.cloud.data.v1.DataService/CalculateDeploymentPrice"
	DataService_GetDeploymentFeatures_FullMethodName                         = "/arangodb.cloud.data.v1.DataService/GetDeploymentFeatures"
	DataService_PauseDeployment_FullMethodName                               = "/arangodb.cloud.data.v1.DataService/PauseDeployment"
	DataService_ResumeDeployment_FullMethodName                              = "/arangodb.cloud.data.v1.DataService/ResumeDeployment"
	DataService_RotateDeploymentServer_FullMethodName                        = "/arangodb.cloud.data.v1.DataService/RotateDeploymentServer"
	DataService_CreateTestDatabase_FullMethodName                            = "/arangodb.cloud.data.v1.DataService/CreateTestDatabase"
	DataService_RebalanceDeploymentShards_FullMethodName                     = "/arangodb.cloud.data.v1.DataService/RebalanceDeploymentShards"
	DataService_ListDiskPerformances_FullMethodName                          = "/arangodb.cloud.data.v1.DataService/ListDiskPerformances"
	DataService_GetDiskPerformance_FullMethodName                            = "/arangodb.cloud.data.v1.DataService/GetDiskPerformance"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataService is the API used to configure data objects.
type DataServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all deployments in the project identified by the given context ID.
	// Required permissions:
	// - data.deployment.list on the project identified by the given context ID
	ListDeployments(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*DeploymentList, error)
	// Fetch all deployments in the organization identified by the given filter.
	// Only the deployments with sufficient permissions are returned.
	// If the caller has no such permission on any of the deployments (in the organization) an empty list is returned, not an error.
	// Required permissions:
	// - None (authenticated only)
	// - data.deployment.list on the filtered deployment(s)
	ListDeploymentsByFilter(ctx context.Context, in *ListDeploymentsByFilterRequest, opts ...grpc.CallOption) (*DeploymentList, error)
	// Fetch a deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Deployment, error)
	// Fetch all updates (spec and/or status) of the deployment that matches the given request.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeploymentUpdates(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Deployment], error)
	// Create a new deployment
	// Required permissions:
	// - data.deployment.create on the project that owns the deployment
	// - network.privateendpointservice.create on the project that owns the deployment (if private_endpoint field is set)
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error)
	// Update a deployment
	// Required permissions:
	// - data.deployment.update on the deployment
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	UpdateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error)
	// Update the setting for scheduled root password rotation
	// Required permissions:
	// - data.deployment.update-scheduled-root-password-rotation
	UpdateDeploymentScheduledRootPasswordRotation(ctx context.Context, in *UpdateDeploymentScheduledRootPasswordRotationRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Delete a deployment
	// Note that deployments are initially only marked for deletion.
	// Once all their resources are removed the deployment itself is removed.
	// Required permissions:
	// - data.deployment.delete on the deployment
	DeleteDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch credentials for accessing deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	// - data.deploymentcredentials.get on the deployment identified by the given ID
	GetDeploymentCredentials(ctx context.Context, in *DeploymentCredentialsRequest, opts ...grpc.CallOption) (*DeploymentCredentials, error)
	// Fetch all ArangoDB versions that are available for deployments.
	// Required permissions:
	// - None
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*VersionList, error)
	// Fetch the default ArangoDB version for new deployment.
	// Required permissions:
	// - None
	GetDefaultVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*Version, error)
	// Fetch the ArangoDB version by its id (semver).
	// Required permissions:
	// - None
	GetVersion(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Version, error)
	// Fetch the limits for server specifications for deployments
	// owned by the given projected, created in the given region.
	// Required permissions:
	// - data.limits.get on the requested project
	// - data.deployment.get on the specified deployment (if deployment_id is set)
	// This method is deprecated and will be remove in the very near future, do not use this method anymore
	GetServersSpecLimits(ctx context.Context, in *ServersSpecLimitsRequest, opts ...grpc.CallOption) (*ServersSpecLimits, error)
	// Fetch the node sizes available for deployments
	// owned by the project with given ID, created in the given region with given ID.
	// If project ID "all" is used, then all node sizes for the region with given
	// ID are returned.
	// Required permissions:
	// - data.nodesize.list on the requested deployment (if deployment ID is set)
	// - data.nodesize.list on the requested project (if project ID does not equal "all")
	// - data.nodesize.list on the requested organization (if organization ID is set)
	// - None if project ID does equals "all"
	ListNodeSizes(ctx context.Context, in *NodeSizesRequest, opts ...grpc.CallOption) (*NodeSizeList, error)
	// Fetch the models available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.deploymentmodel.list on the requested project
	ListDeploymentModels(ctx context.Context, in *ListDeploymentModelsRequest, opts ...grpc.CallOption) (*DeploymentModelList, error)
	// Fetch the CPU sizes available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.cpusize.list on the requested project
	ListCPUSizes(ctx context.Context, in *ListCPUSizesRequest, opts ...grpc.CallOption) (*CPUSizeList, error)
	// Get the deployment model identified by the provided ID.
	// Required permissions:
	// - None (authenticated only)
	GetDeploymentModel(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DeploymentModel, error)
	// Calculate the total size of a deployment with given arguments.
	// Required permissions:
	// - none
	CalculateDeploymentSize(ctx context.Context, in *CalculateDeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSize, error)
	// Recommend a deployment size, for a oneshard or sharded deployments, using the
	// given input values.
	// Required permissions:
	// - none
	RecommendDeploymentSize(ctx context.Context, in *DeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSizeRecommendation, error)
	// Fetch instructions for connecting drivers to the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetConnectDriverInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ConnectDriverInstructions, error)
	// Fetch instructions for importing data into the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetImportDataInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ImportDataInstructions, error)
	// Calculate the price of a deployment of given settings.
	// Required permissions:
	// - data.deploymentprice.calculate
	CalculateDeploymentPrice(ctx context.Context, in *DeploymentPriceRequest, opts ...grpc.CallOption) (*DeploymentPrice, error)
	// Get the features that will be available to a deployment in the given context.
	// Required permissions:
	// - data.deploymentfeatures.get on the project that is given in the request.
	GetDeploymentFeatures(ctx context.Context, in *DeploymentFeaturesRequest, opts ...grpc.CallOption) (*DeploymentFeatures, error)
	// Pauses a deployment indentified by the given ID.
	// When PauseDeployment is invoked on a deployment that is not allowed to pause or has is_paused set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.pause on the deployment
	PauseDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Resumes a paused deployment identified by the given id.
	// When ResumeDeployment is invoked on a deployment that has is_paused not set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.resume on the deployment
	ResumeDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Rotate a server for a deployment.
	// This causes the server to restart after condition are deemed safe for a restart.
	// Required permissions:
	// - data.deployment.rotate-server on the deployment
	RotateDeploymentServer(ctx context.Context, in *RotateDeploymentServerRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Create a test database and user for a deployment. Returns the output containing the created
	// database name, password, username, host and port.
	// Required permissions:
	// - data.deployment.create-test-database on the deployment
	CreateTestDatabase(ctx context.Context, in *CreateTestDatabaseRequest, opts ...grpc.CallOption) (*CreateTestDatabaseResponse, error)
	// RebalanceDeploymentShards rebalances shards for deployment across the DB servers.
	// Prerelease: This function is not yet available in production.
	// Required permissions:
	// - data.deployment.rebalance-shards on the deployment
	RebalanceDeploymentShards(ctx context.Context, in *RebalanceDeploymentShardsRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Lists disk performances that match all of the given filters.
	// Required permissions:
	// - data.diskperformance.list on the deployment (if deployment ID is provided)
	// - data.diskperformance.list on the organization (if organization ID is provided, but deployment ID is not)
	// - None, authenticated only (if no deployment ID is provided)
	ListDiskPerformances(ctx context.Context, in *ListDiskPerformancesRequest, opts ...grpc.CallOption) (*DiskPerformanceList, error)
	// Get the disk performance for the requested disk performance ID.
	// Required permissions:
	// - None, authenticated only
	GetDiskPerformance(ctx context.Context, in *GetDiskPerformanceRequest, opts ...grpc.CallOption) (*DiskPerformance, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, DataService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDeployments(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*DeploymentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentList)
	err := c.cc.Invoke(ctx, DataService_ListDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDeploymentsByFilter(ctx context.Context, in *ListDeploymentsByFilterRequest, opts ...grpc.CallOption) (*DeploymentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentList)
	err := c.cc.Invoke(ctx, DataService_ListDeploymentsByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Deployment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Deployment)
	err := c.cc.Invoke(ctx, DataService_GetDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentUpdates(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Deployment], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], DataService_GetDeploymentUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.IDOptions, Deployment]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_GetDeploymentUpdatesClient = grpc.ServerStreamingClient[Deployment]

func (c *dataServiceClient) CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Deployment)
	err := c.cc.Invoke(ctx, DataService_CreateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Deployment)
	err := c.cc.Invoke(ctx, DataService_UpdateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDeploymentScheduledRootPasswordRotation(ctx context.Context, in *UpdateDeploymentScheduledRootPasswordRotationRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, DataService_UpdateDeploymentScheduledRootPasswordRotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, DataService_DeleteDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentCredentials(ctx context.Context, in *DeploymentCredentialsRequest, opts ...grpc.CallOption) (*DeploymentCredentials, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentCredentials)
	err := c.cc.Invoke(ctx, DataService_GetDeploymentCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*VersionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionList)
	err := c.cc.Invoke(ctx, DataService_ListVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDefaultVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Version)
	err := c.cc.Invoke(ctx, DataService_GetDefaultVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetVersion(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Version)
	err := c.cc.Invoke(ctx, DataService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetServersSpecLimits(ctx context.Context, in *ServersSpecLimitsRequest, opts ...grpc.CallOption) (*ServersSpecLimits, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServersSpecLimits)
	err := c.cc.Invoke(ctx, DataService_GetServersSpecLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListNodeSizes(ctx context.Context, in *NodeSizesRequest, opts ...grpc.CallOption) (*NodeSizeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeSizeList)
	err := c.cc.Invoke(ctx, DataService_ListNodeSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDeploymentModels(ctx context.Context, in *ListDeploymentModelsRequest, opts ...grpc.CallOption) (*DeploymentModelList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentModelList)
	err := c.cc.Invoke(ctx, DataService_ListDeploymentModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListCPUSizes(ctx context.Context, in *ListCPUSizesRequest, opts ...grpc.CallOption) (*CPUSizeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CPUSizeList)
	err := c.cc.Invoke(ctx, DataService_ListCPUSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentModel(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*DeploymentModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentModel)
	err := c.cc.Invoke(ctx, DataService_GetDeploymentModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CalculateDeploymentSize(ctx context.Context, in *CalculateDeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSize, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentSize)
	err := c.cc.Invoke(ctx, DataService_CalculateDeploymentSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RecommendDeploymentSize(ctx context.Context, in *DeploymentSizeRequest, opts ...grpc.CallOption) (*DeploymentSizeRecommendation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentSizeRecommendation)
	err := c.cc.Invoke(ctx, DataService_RecommendDeploymentSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetConnectDriverInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ConnectDriverInstructions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectDriverInstructions)
	err := c.cc.Invoke(ctx, DataService_GetConnectDriverInstructions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetImportDataInstructions(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*ImportDataInstructions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportDataInstructions)
	err := c.cc.Invoke(ctx, DataService_GetImportDataInstructions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CalculateDeploymentPrice(ctx context.Context, in *DeploymentPriceRequest, opts ...grpc.CallOption) (*DeploymentPrice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentPrice)
	err := c.cc.Invoke(ctx, DataService_CalculateDeploymentPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeploymentFeatures(ctx context.Context, in *DeploymentFeaturesRequest, opts ...grpc.CallOption) (*DeploymentFeatures, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentFeatures)
	err := c.cc.Invoke(ctx, DataService_GetDeploymentFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) PauseDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, DataService_PauseDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ResumeDeployment(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, DataService_ResumeDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RotateDeploymentServer(ctx context.Context, in *RotateDeploymentServerRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, DataService_RotateDeploymentServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateTestDatabase(ctx context.Context, in *CreateTestDatabaseRequest, opts ...grpc.CallOption) (*CreateTestDatabaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTestDatabaseResponse)
	err := c.cc.Invoke(ctx, DataService_CreateTestDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RebalanceDeploymentShards(ctx context.Context, in *RebalanceDeploymentShardsRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, DataService_RebalanceDeploymentShards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDiskPerformances(ctx context.Context, in *ListDiskPerformancesRequest, opts ...grpc.CallOption) (*DiskPerformanceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiskPerformanceList)
	err := c.cc.Invoke(ctx, DataService_ListDiskPerformances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDiskPerformance(ctx context.Context, in *GetDiskPerformanceRequest, opts ...grpc.CallOption) (*DiskPerformance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiskPerformance)
	err := c.cc.Invoke(ctx, DataService_GetDiskPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
//
// DataService is the API used to configure data objects.
type DataServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all deployments in the project identified by the given context ID.
	// Required permissions:
	// - data.deployment.list on the project identified by the given context ID
	ListDeployments(context.Context, *v1.ListOptions) (*DeploymentList, error)
	// Fetch all deployments in the organization identified by the given filter.
	// Only the deployments with sufficient permissions are returned.
	// If the caller has no such permission on any of the deployments (in the organization) an empty list is returned, not an error.
	// Required permissions:
	// - None (authenticated only)
	// - data.deployment.list on the filtered deployment(s)
	ListDeploymentsByFilter(context.Context, *ListDeploymentsByFilterRequest) (*DeploymentList, error)
	// Fetch a deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeployment(context.Context, *v1.IDOptions) (*Deployment, error)
	// Fetch all updates (spec and/or status) of the deployment that matches the given request.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetDeploymentUpdates(*v1.IDOptions, grpc.ServerStreamingServer[Deployment]) error
	// Create a new deployment
	// Required permissions:
	// - data.deployment.create on the project that owns the deployment
	// - network.privateendpointservice.create on the project that owns the deployment (if private_endpoint field is set)
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	CreateDeployment(context.Context, *Deployment) (*Deployment, error)
	// Update a deployment
	// Required permissions:
	// - data.deployment.update on the deployment
	// Note that deployment.status & deployment.expiration are ignored
	// in this request.
	UpdateDeployment(context.Context, *Deployment) (*Deployment, error)
	// Update the setting for scheduled root password rotation
	// Required permissions:
	// - data.deployment.update-scheduled-root-password-rotation
	UpdateDeploymentScheduledRootPasswordRotation(context.Context, *UpdateDeploymentScheduledRootPasswordRotationRequest) (*v1.Empty, error)
	// Delete a deployment
	// Note that deployments are initially only marked for deletion.
	// Once all their resources are removed the deployment itself is removed.
	// Required permissions:
	// - data.deployment.delete on the deployment
	DeleteDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Fetch credentials for accessing deployment by its id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	// - data.deploymentcredentials.get on the deployment identified by the given ID
	GetDeploymentCredentials(context.Context, *DeploymentCredentialsRequest) (*DeploymentCredentials, error)
	// Fetch all ArangoDB versions that are available for deployments.
	// Required permissions:
	// - None
	ListVersions(context.Context, *ListVersionsRequest) (*VersionList, error)
	// Fetch the default ArangoDB version for new deployment.
	// Required permissions:
	// - None
	GetDefaultVersion(context.Context, *v1.Empty) (*Version, error)
	// Fetch the ArangoDB version by its id (semver).
	// Required permissions:
	// - None
	GetVersion(context.Context, *v1.IDOptions) (*Version, error)
	// Fetch the limits for server specifications for deployments
	// owned by the given projected, created in the given region.
	// Required permissions:
	// - data.limits.get on the requested project
	// - data.deployment.get on the specified deployment (if deployment_id is set)
	// This method is deprecated and will be remove in the very near future, do not use this method anymore
	GetServersSpecLimits(context.Context, *ServersSpecLimitsRequest) (*ServersSpecLimits, error)
	// Fetch the node sizes available for deployments
	// owned by the project with given ID, created in the given region with given ID.
	// If project ID "all" is used, then all node sizes for the region with given
	// ID are returned.
	// Required permissions:
	// - data.nodesize.list on the requested deployment (if deployment ID is set)
	// - data.nodesize.list on the requested project (if project ID does not equal "all")
	// - data.nodesize.list on the requested organization (if organization ID is set)
	// - None if project ID does equals "all"
	ListNodeSizes(context.Context, *NodeSizesRequest) (*NodeSizeList, error)
	// Fetch the models available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.deploymentmodel.list on the requested project
	ListDeploymentModels(context.Context, *ListDeploymentModelsRequest) (*DeploymentModelList, error)
	// Fetch the CPU sizes available for deployments owned by the project with given ID.
	// Required permissions:
	// - data.cpusize.list on the requested project
	ListCPUSizes(context.Context, *ListCPUSizesRequest) (*CPUSizeList, error)
	// Get the deployment model identified by the provided ID.
	// Required permissions:
	// - None (authenticated only)
	GetDeploymentModel(context.Context, *v1.IDOptions) (*DeploymentModel, error)
	// Calculate the total size of a deployment with given arguments.
	// Required permissions:
	// - none
	CalculateDeploymentSize(context.Context, *CalculateDeploymentSizeRequest) (*DeploymentSize, error)
	// Recommend a deployment size, for a oneshard or sharded deployments, using the
	// given input values.
	// Required permissions:
	// - none
	RecommendDeploymentSize(context.Context, *DeploymentSizeRequest) (*DeploymentSizeRecommendation, error)
	// Fetch instructions for connecting drivers to the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetConnectDriverInstructions(context.Context, *v1.IDOptions) (*ConnectDriverInstructions, error)
	// Fetch instructions for importing data into the deployment identified by the given id.
	// Required permissions:
	// - data.deployment.get on the deployment identified by the given ID
	GetImportDataInstructions(context.Context, *v1.IDOptions) (*ImportDataInstructions, error)
	// Calculate the price of a deployment of given settings.
	// Required permissions:
	// - data.deploymentprice.calculate
	CalculateDeploymentPrice(context.Context, *DeploymentPriceRequest) (*DeploymentPrice, error)
	// Get the features that will be available to a deployment in the given context.
	// Required permissions:
	// - data.deploymentfeatures.get on the project that is given in the request.
	GetDeploymentFeatures(context.Context, *DeploymentFeaturesRequest) (*DeploymentFeatures, error)
	// Pauses a deployment indentified by the given ID.
	// When PauseDeployment is invoked on a deployment that is not allowed to pause or has is_paused set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.pause on the deployment
	PauseDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Resumes a paused deployment identified by the given id.
	// When ResumeDeployment is invoked on a deployment that has is_paused not set, an PreconditionFailed error is returned.
	// Required permissions:
	// - data.deployment.resume on the deployment
	ResumeDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Rotate a server for a deployment.
	// This causes the server to restart after condition are deemed safe for a restart.
	// Required permissions:
	// - data.deployment.rotate-server on the deployment
	RotateDeploymentServer(context.Context, *RotateDeploymentServerRequest) (*v1.Empty, error)
	// Create a test database and user for a deployment. Returns the output containing the created
	// database name, password, username, host and port.
	// Required permissions:
	// - data.deployment.create-test-database on the deployment
	CreateTestDatabase(context.Context, *CreateTestDatabaseRequest) (*CreateTestDatabaseResponse, error)
	// RebalanceDeploymentShards rebalances shards for deployment across the DB servers.
	// Prerelease: This function is not yet available in production.
	// Required permissions:
	// - data.deployment.rebalance-shards on the deployment
	RebalanceDeploymentShards(context.Context, *RebalanceDeploymentShardsRequest) (*v1.Empty, error)
	// Lists disk performances that match all of the given filters.
	// Required permissions:
	// - data.diskperformance.list on the deployment (if deployment ID is provided)
	// - data.diskperformance.list on the organization (if organization ID is provided, but deployment ID is not)
	// - None, authenticated only (if no deployment ID is provided)
	ListDiskPerformances(context.Context, *ListDiskPerformancesRequest) (*DiskPerformanceList, error)
	// Get the disk performance for the requested disk performance ID.
	// Required permissions:
	// - None, authenticated only
	GetDiskPerformance(context.Context, *GetDiskPerformanceRequest) (*DiskPerformance, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedDataServiceServer) ListDeployments(context.Context, *v1.ListOptions) (*DeploymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedDataServiceServer) ListDeploymentsByFilter(context.Context, *ListDeploymentsByFilterRequest) (*DeploymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentsByFilter not implemented")
}
func (UnimplementedDataServiceServer) GetDeployment(context.Context, *v1.IDOptions) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDataServiceServer) GetDeploymentUpdates(*v1.IDOptions, grpc.ServerStreamingServer[Deployment]) error {
	return status.Errorf(codes.Unimplemented, "method GetDeploymentUpdates not implemented")
}
func (UnimplementedDataServiceServer) CreateDeployment(context.Context, *Deployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedDataServiceServer) UpdateDeployment(context.Context, *Deployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedDataServiceServer) UpdateDeploymentScheduledRootPasswordRotation(context.Context, *UpdateDeploymentScheduledRootPasswordRotationRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentScheduledRootPasswordRotation not implemented")
}
func (UnimplementedDataServiceServer) DeleteDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedDataServiceServer) GetDeploymentCredentials(context.Context, *DeploymentCredentialsRequest) (*DeploymentCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentCredentials not implemented")
}
func (UnimplementedDataServiceServer) ListVersions(context.Context, *ListVersionsRequest) (*VersionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedDataServiceServer) GetDefaultVersion(context.Context, *v1.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVersion not implemented")
}
func (UnimplementedDataServiceServer) GetVersion(context.Context, *v1.IDOptions) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDataServiceServer) GetServersSpecLimits(context.Context, *ServersSpecLimitsRequest) (*ServersSpecLimits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersSpecLimits not implemented")
}
func (UnimplementedDataServiceServer) ListNodeSizes(context.Context, *NodeSizesRequest) (*NodeSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeSizes not implemented")
}
func (UnimplementedDataServiceServer) ListDeploymentModels(context.Context, *ListDeploymentModelsRequest) (*DeploymentModelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentModels not implemented")
}
func (UnimplementedDataServiceServer) ListCPUSizes(context.Context, *ListCPUSizesRequest) (*CPUSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCPUSizes not implemented")
}
func (UnimplementedDataServiceServer) GetDeploymentModel(context.Context, *v1.IDOptions) (*DeploymentModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentModel not implemented")
}
func (UnimplementedDataServiceServer) CalculateDeploymentSize(context.Context, *CalculateDeploymentSizeRequest) (*DeploymentSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDeploymentSize not implemented")
}
func (UnimplementedDataServiceServer) RecommendDeploymentSize(context.Context, *DeploymentSizeRequest) (*DeploymentSizeRecommendation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendDeploymentSize not implemented")
}
func (UnimplementedDataServiceServer) GetConnectDriverInstructions(context.Context, *v1.IDOptions) (*ConnectDriverInstructions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectDriverInstructions not implemented")
}
func (UnimplementedDataServiceServer) GetImportDataInstructions(context.Context, *v1.IDOptions) (*ImportDataInstructions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportDataInstructions not implemented")
}
func (UnimplementedDataServiceServer) CalculateDeploymentPrice(context.Context, *DeploymentPriceRequest) (*DeploymentPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDeploymentPrice not implemented")
}
func (UnimplementedDataServiceServer) GetDeploymentFeatures(context.Context, *DeploymentFeaturesRequest) (*DeploymentFeatures, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentFeatures not implemented")
}
func (UnimplementedDataServiceServer) PauseDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseDeployment not implemented")
}
func (UnimplementedDataServiceServer) ResumeDeployment(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeDeployment not implemented")
}
func (UnimplementedDataServiceServer) RotateDeploymentServer(context.Context, *RotateDeploymentServerRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateDeploymentServer not implemented")
}
func (UnimplementedDataServiceServer) CreateTestDatabase(context.Context, *CreateTestDatabaseRequest) (*CreateTestDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestDatabase not implemented")
}
func (UnimplementedDataServiceServer) RebalanceDeploymentShards(context.Context, *RebalanceDeploymentShardsRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebalanceDeploymentShards not implemented")
}
func (UnimplementedDataServiceServer) ListDiskPerformances(context.Context, *ListDiskPerformancesRequest) (*DiskPerformanceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskPerformances not implemented")
}
func (UnimplementedDataServiceServer) GetDiskPerformance(context.Context, *GetDiskPerformanceRequest) (*DiskPerformance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskPerformance not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDeployments(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDeploymentsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDeploymentsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListDeploymentsByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDeploymentsByFilter(ctx, req.(*ListDeploymentsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.IDOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).GetDeploymentUpdates(m, &grpc.GenericServerStream[v1.IDOptions, Deployment]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_GetDeploymentUpdatesServer = grpc.ServerStreamingServer[Deployment]

func _DataService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDeploymentScheduledRootPasswordRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentScheduledRootPasswordRotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDeploymentScheduledRootPasswordRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateDeploymentScheduledRootPasswordRotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDeploymentScheduledRootPasswordRotation(ctx, req.(*UpdateDeploymentScheduledRootPasswordRotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeploymentCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetDeploymentCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeploymentCredentials(ctx, req.(*DeploymentCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListVersions(ctx, req.(*ListVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDefaultVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDefaultVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetDefaultVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDefaultVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetVersion(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetServersSpecLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersSpecLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetServersSpecLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetServersSpecLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetServersSpecLimits(ctx, req.(*ServersSpecLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListNodeSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListNodeSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListNodeSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListNodeSizes(ctx, req.(*NodeSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDeploymentModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDeploymentModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListDeploymentModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDeploymentModels(ctx, req.(*ListDeploymentModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListCPUSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCPUSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListCPUSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListCPUSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListCPUSizes(ctx, req.(*ListCPUSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeploymentModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetDeploymentModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeploymentModel(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CalculateDeploymentSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDeploymentSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CalculateDeploymentSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CalculateDeploymentSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CalculateDeploymentSize(ctx, req.(*CalculateDeploymentSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RecommendDeploymentSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RecommendDeploymentSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_RecommendDeploymentSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RecommendDeploymentSize(ctx, req.(*DeploymentSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetConnectDriverInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetConnectDriverInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetConnectDriverInstructions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetConnectDriverInstructions(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetImportDataInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetImportDataInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetImportDataInstructions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetImportDataInstructions(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CalculateDeploymentPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CalculateDeploymentPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CalculateDeploymentPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CalculateDeploymentPrice(ctx, req.(*DeploymentPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeploymentFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeploymentFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetDeploymentFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeploymentFeatures(ctx, req.(*DeploymentFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_PauseDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).PauseDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_PauseDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).PauseDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ResumeDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ResumeDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ResumeDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ResumeDeployment(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RotateDeploymentServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateDeploymentServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RotateDeploymentServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_RotateDeploymentServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RotateDeploymentServer(ctx, req.(*RotateDeploymentServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateTestDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateTestDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateTestDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateTestDatabase(ctx, req.(*CreateTestDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RebalanceDeploymentShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceDeploymentShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RebalanceDeploymentShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_RebalanceDeploymentShards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RebalanceDeploymentShards(ctx, req.(*RebalanceDeploymentShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDiskPerformances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiskPerformancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDiskPerformances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListDiskPerformances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDiskPerformances(ctx, req.(*ListDiskPerformancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDiskPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDiskPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetDiskPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDiskPerformance(ctx, req.(*GetDiskPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.data.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _DataService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _DataService_ListDeployments_Handler,
		},
		{
			MethodName: "ListDeploymentsByFilter",
			Handler:    _DataService_ListDeploymentsByFilter_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _DataService_GetDeployment_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _DataService_CreateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _DataService_UpdateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeploymentScheduledRootPasswordRotation",
			Handler:    _DataService_UpdateDeploymentScheduledRootPasswordRotation_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _DataService_DeleteDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentCredentials",
			Handler:    _DataService_GetDeploymentCredentials_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _DataService_ListVersions_Handler,
		},
		{
			MethodName: "GetDefaultVersion",
			Handler:    _DataService_GetDefaultVersion_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _DataService_GetVersion_Handler,
		},
		{
			MethodName: "GetServersSpecLimits",
			Handler:    _DataService_GetServersSpecLimits_Handler,
		},
		{
			MethodName: "ListNodeSizes",
			Handler:    _DataService_ListNodeSizes_Handler,
		},
		{
			MethodName: "ListDeploymentModels",
			Handler:    _DataService_ListDeploymentModels_Handler,
		},
		{
			MethodName: "ListCPUSizes",
			Handler:    _DataService_ListCPUSizes_Handler,
		},
		{
			MethodName: "GetDeploymentModel",
			Handler:    _DataService_GetDeploymentModel_Handler,
		},
		{
			MethodName: "CalculateDeploymentSize",
			Handler:    _DataService_CalculateDeploymentSize_Handler,
		},
		{
			MethodName: "RecommendDeploymentSize",
			Handler:    _DataService_RecommendDeploymentSize_Handler,
		},
		{
			MethodName: "GetConnectDriverInstructions",
			Handler:    _DataService_GetConnectDriverInstructions_Handler,
		},
		{
			MethodName: "GetImportDataInstructions",
			Handler:    _DataService_GetImportDataInstructions_Handler,
		},
		{
			MethodName: "CalculateDeploymentPrice",
			Handler:    _DataService_CalculateDeploymentPrice_Handler,
		},
		{
			MethodName: "GetDeploymentFeatures",
			Handler:    _DataService_GetDeploymentFeatures_Handler,
		},
		{
			MethodName: "PauseDeployment",
			Handler:    _DataService_PauseDeployment_Handler,
		},
		{
			MethodName: "ResumeDeployment",
			Handler:    _DataService_ResumeDeployment_Handler,
		},
		{
			MethodName: "RotateDeploymentServer",
			Handler:    _DataService_RotateDeploymentServer_Handler,
		},
		{
			MethodName: "CreateTestDatabase",
			Handler:    _DataService_CreateTestDatabase_Handler,
		},
		{
			MethodName: "RebalanceDeploymentShards",
			Handler:    _DataService_RebalanceDeploymentShards_Handler,
		},
		{
			MethodName: "ListDiskPerformances",
			Handler:    _DataService_ListDiskPerformances_Handler,
		},
		{
			MethodName: "GetDiskPerformance",
			Handler:    _DataService_GetDiskPerformance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeploymentUpdates",
			Handler:       _DataService_GetDeploymentUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
