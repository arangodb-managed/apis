//
// DISCLAIMER
//
// Copyright 2020-2021 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//
// Author Ewout Prangsma
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: metrics.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricsService_GetAPIVersion_FullMethodName      = "/arangodb.cloud.metrics.v1.MetricsService/GetAPIVersion"
	MetricsService_ListTokens_FullMethodName         = "/arangodb.cloud.metrics.v1.MetricsService/ListTokens"
	MetricsService_GetToken_FullMethodName           = "/arangodb.cloud.metrics.v1.MetricsService/GetToken"
	MetricsService_CreateToken_FullMethodName        = "/arangodb.cloud.metrics.v1.MetricsService/CreateToken"
	MetricsService_UpdateToken_FullMethodName        = "/arangodb.cloud.metrics.v1.MetricsService/UpdateToken"
	MetricsService_RevokeToken_FullMethodName        = "/arangodb.cloud.metrics.v1.MetricsService/RevokeToken"
	MetricsService_DeleteToken_FullMethodName        = "/arangodb.cloud.metrics.v1.MetricsService/DeleteToken"
	MetricsService_GetMetricsEndpoint_FullMethodName = "/arangodb.cloud.metrics.v1.MetricsService/GetMetricsEndpoint"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MetricsService is the API used to configure various metrics objects.
// Prerelease: This Service is not yet available in production
type MetricsServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all metrics token in the deployment identified by the given deployment ID.
	// Required permissions:
	// - metrics.token.list on the deployment identified by the given deployment ID
	ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*TokenList, error)
	// Fetch a metrics token by its id.
	// Required permissions:
	// - metrics.token.get on the token identified by the given ID
	GetToken(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Token, error)
	// Create a new metrics token.
	// Required permissions:
	// - metrics.token.create on the deployment that owns the token
	CreateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
	// Update a metrics token.
	// Note that you can only change the metadata (name & description) of the
	// token.
	// Required permissions:
	// - metrics.token.update on the token
	UpdateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
	// Revoke a metrics token.
	// Once a token is revoked, it can no longer be used for authentication.
	// Required permissions:
	// - metrics.token.revoke on the token
	RevokeToken(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Delete a metrics token.
	// Note that token are initially only marked for deleted.
	// Once all the resources that depend on it are removed the token itself is deleted
	// and cannot be restored.
	// Required permissions:
	// - metrics.token.delete on the token
	DeleteToken(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch the endpoint to use for getting metrics for a deployment with given id.
	// Required permissions:
	// - metrics.endpoint.get on the deployment identified by the given ID
	GetMetricsEndpoint(ctx context.Context, in *GetMetricsEndpointRequest, opts ...grpc.CallOption) (*MetricsEndpoint, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, MetricsService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*TokenList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenList)
	err := c.cc.Invoke(ctx, MetricsService_ListTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetToken(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, MetricsService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) CreateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, MetricsService_CreateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) UpdateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, MetricsService_UpdateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) RevokeToken(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, MetricsService_RevokeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) DeleteToken(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, MetricsService_DeleteToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetMetricsEndpoint(ctx context.Context, in *GetMetricsEndpointRequest, opts ...grpc.CallOption) (*MetricsEndpoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsEndpoint)
	err := c.cc.Invoke(ctx, MetricsService_GetMetricsEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility.
//
// MetricsService is the API used to configure various metrics objects.
// Prerelease: This Service is not yet available in production
type MetricsServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all metrics token in the deployment identified by the given deployment ID.
	// Required permissions:
	// - metrics.token.list on the deployment identified by the given deployment ID
	ListTokens(context.Context, *ListTokensRequest) (*TokenList, error)
	// Fetch a metrics token by its id.
	// Required permissions:
	// - metrics.token.get on the token identified by the given ID
	GetToken(context.Context, *v1.IDOptions) (*Token, error)
	// Create a new metrics token.
	// Required permissions:
	// - metrics.token.create on the deployment that owns the token
	CreateToken(context.Context, *Token) (*Token, error)
	// Update a metrics token.
	// Note that you can only change the metadata (name & description) of the
	// token.
	// Required permissions:
	// - metrics.token.update on the token
	UpdateToken(context.Context, *Token) (*Token, error)
	// Revoke a metrics token.
	// Once a token is revoked, it can no longer be used for authentication.
	// Required permissions:
	// - metrics.token.revoke on the token
	RevokeToken(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Delete a metrics token.
	// Note that token are initially only marked for deleted.
	// Once all the resources that depend on it are removed the token itself is deleted
	// and cannot be restored.
	// Required permissions:
	// - metrics.token.delete on the token
	DeleteToken(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Fetch the endpoint to use for getting metrics for a deployment with given id.
	// Required permissions:
	// - metrics.endpoint.get on the deployment identified by the given ID
	GetMetricsEndpoint(context.Context, *GetMetricsEndpointRequest) (*MetricsEndpoint, error)
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsServiceServer struct{}

func (UnimplementedMetricsServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedMetricsServiceServer) ListTokens(context.Context, *ListTokensRequest) (*TokenList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (UnimplementedMetricsServiceServer) GetToken(context.Context, *v1.IDOptions) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedMetricsServiceServer) CreateToken(context.Context, *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedMetricsServiceServer) UpdateToken(context.Context, *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedMetricsServiceServer) RevokeToken(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedMetricsServiceServer) DeleteToken(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedMetricsServiceServer) GetMetricsEndpoint(context.Context, *GetMetricsEndpointRequest) (*MetricsEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsEndpoint not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}
func (UnimplementedMetricsServiceServer) testEmbeddedByValue()                        {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_ListTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).ListTokens(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetToken(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).CreateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).UpdateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_RevokeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).RevokeToken(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).DeleteToken(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetMetricsEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetMetricsEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_GetMetricsEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetMetricsEndpoint(ctx, req.(*GetMetricsEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.metrics.v1.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _MetricsService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _MetricsService_ListTokens_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _MetricsService_GetToken_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _MetricsService_CreateToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _MetricsService_UpdateToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _MetricsService_RevokeToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _MetricsService_DeleteToken_Handler,
		},
		{
			MethodName: "GetMetricsEndpoint",
			Handler:    _MetricsService_GetMetricsEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}
