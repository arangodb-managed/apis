//
// DISCLAIMER
//
// Copyright 2020-2022 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: security.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IPAllowlist represents a list of CIDR ranges from which a deployment is accessible.
type IPAllowlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the allowlist.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of the allowlist.
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Name of the allowlist.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the allowlist.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Identifier of the project that contains this allowlist.
	ProjectId string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// List of CIDR ranges.
	// Values must follow format as defined in RFC 4632 and RFC 4291.
	CidrRanges []string `protobuf:"bytes,6,rep,name=cidr_ranges,json=cidrRanges,proto3" json:"cidr_ranges,omitempty"`
	// The creation timestamp of this allowlist.
	// This is a read-only value.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the allowlist
	// This is a read-only value.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this allowlist is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,9,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Identifier of the user who created this allowlist.
	// This is a read-only value.
	CreatedById string `protobuf:"bytes,10,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// If set, this allow list cannot be deleted.
	// To delete, first update the with locked set to false.
	Locked bool `protobuf:"varint,11,opt,name=locked,proto3" json:"locked,omitempty"`
	// The list of warnings which are related to the IP allow list.
	// This is a read-only value.
	Warnings []string `protobuf:"bytes,12,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// If set, a few additional IP addresses are added to allow for remote
	// connectivity inspection of the deployment by the ArangoGraph Insights Platform.
	RemoteInspectionAllowed bool `protobuf:"varint,13,opt,name=remote_inspection_allowed,json=remoteInspectionAllowed,proto3" json:"remote_inspection_allowed,omitempty"`
}

func (x *IPAllowlist) Reset() {
	*x = IPAllowlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAllowlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAllowlist) ProtoMessage() {}

func (x *IPAllowlist) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAllowlist.ProtoReflect.Descriptor instead.
func (*IPAllowlist) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{0}
}

func (x *IPAllowlist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IPAllowlist) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *IPAllowlist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IPAllowlist) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IPAllowlist) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IPAllowlist) GetCidrRanges() []string {
	if x != nil {
		return x.CidrRanges
	}
	return nil
}

func (x *IPAllowlist) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *IPAllowlist) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *IPAllowlist) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *IPAllowlist) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *IPAllowlist) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *IPAllowlist) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *IPAllowlist) GetRemoteInspectionAllowed() bool {
	if x != nil {
		return x.RemoteInspectionAllowed
	}
	return false
}

// List of IP allowlists.
type IPAllowlistList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*IPAllowlist `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *IPAllowlistList) Reset() {
	*x = IPAllowlistList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAllowlistList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAllowlistList) ProtoMessage() {}

func (x *IPAllowlistList) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAllowlistList.ProtoReflect.Descriptor instead.
func (*IPAllowlistList) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{1}
}

func (x *IPAllowlistList) GetItems() []*IPAllowlist {
	if x != nil {
		return x.Items
	}
	return nil
}

// IAMProvider provides configuration for a custom Identity & Access management provider
// for deployments.
type IAMProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the provider.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of the provider.
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Name of the provider.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the provider.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Identifier of the project that contains this provider.
	ProjectId string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Type of provider
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// The creation timestamp of this provider.
	// This is a read-only value.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the provider
	// This is a read-only value.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this provider is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,9,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Identifier of the user who created this provider.
	// This is a read-only value.
	CreatedById string `protobuf:"bytes,10,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// Set when this provider is the default in its project.
	// This is a read-only value.
	IsDefault bool `protobuf:"varint,11,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// If set, this IAM provider cannot be deleted.
	// To delete, first update the with locked set to false.
	Locked       bool                      `protobuf:"varint,12,opt,name=locked,proto3" json:"locked,omitempty"`
	LdapSettings *IAMProvider_LDAPSettings `protobuf:"bytes,101,opt,name=ldap_settings,json=ldapSettings,proto3" json:"ldap_settings,omitempty"`
}

func (x *IAMProvider) Reset() {
	*x = IAMProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAMProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAMProvider) ProtoMessage() {}

func (x *IAMProvider) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAMProvider.ProtoReflect.Descriptor instead.
func (*IAMProvider) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{2}
}

func (x *IAMProvider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IAMProvider) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *IAMProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IAMProvider) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IAMProvider) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IAMProvider) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IAMProvider) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *IAMProvider) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *IAMProvider) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *IAMProvider) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *IAMProvider) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *IAMProvider) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *IAMProvider) GetLdapSettings() *IAMProvider_LDAPSettings {
	if x != nil {
		return x.LdapSettings
	}
	return nil
}

// List of IAM providers.
type IAMProviderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*IAMProvider `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *IAMProviderList) Reset() {
	*x = IAMProviderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAMProviderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAMProviderList) ProtoMessage() {}

func (x *IAMProviderList) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAMProviderList.ProtoReflect.Descriptor instead.
func (*IAMProviderList) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{3}
}

func (x *IAMProviderList) GetItems() []*IAMProvider {
	if x != nil {
		return x.Items
	}
	return nil
}

// LDAP provider specific settings
type IAMProvider_LDAPSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname or IP address of the server
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Port number of the server (defaults to 389)
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Base distinguished name under which the search takes place
	BaseDistinguishedName string `protobuf:"bytes,3,opt,name=base_distinguished_name,json=baseDistinguishedName,proto3" json:"base_distinguished_name,omitempty"`
	// distinguished name for a read-only LDAP user to which ArangoDB can bind to search the LDAP server
	BindDistinguishedName string `protobuf:"bytes,4,opt,name=bind_distinguished_name,json=bindDistinguishedName,proto3" json:"bind_distinguished_name,omitempty"`
	// Password name for a read-only LDAP user to which ArangoDB can bind to search the LDAP server.
	// This is a set-only field. During get/list requests, this field will be empty.
	BindPassword string `protobuf:"bytes,5,opt,name=bind_password,json=bindPassword,proto3" json:"bind_password,omitempty"`
	// Refresh rate in seconds (defaults to 300)
	RefreshRate int32 `protobuf:"varint,6,opt,name=refresh_rate,json=refreshRate,proto3" json:"refresh_rate,omitempty"`
	// PEM encoded version of the CA certificate used by the LDAP server.
	TlsCaCertificatePem string `protobuf:"bytes,10,opt,name=tls_ca_certificate_pem,json=tlsCaCertificatePem,proto3" json:"tls_ca_certificate_pem,omitempty"`
	// If set, calls into the underlying LDAP library are serialized.
	// This option can be used to work around thread-unsafe LDAP library functionality.
	Serialized bool `protobuf:"varint,20,opt,name=serialized,proto3" json:"serialized,omitempty"`
	// Timeout (in seconds) used when waiting to enter the LDAP library call serialization lock.
	// This is only meaningful when serialized has been set to true.
	SerializeTimeoutSec int32 `protobuf:"varint,21,opt,name=serialize_timeout_sec,json=serializeTimeoutSec,proto3" json:"serialize_timeout_sec,omitempty"`
	// Number of retries to attempt a connection to the LDAP server.
	// Setting this to values greater than zero will make ArangoDB retry to contact the
	// LDAP server in case no connection can be made initially.
	Retries int32 `protobuf:"varint,22,opt,name=retries,proto3" json:"retries,omitempty"`
	// If set, the LDAP library will implicitly restart connections.
	Restart bool `protobuf:"varint,23,opt,name=restart,proto3" json:"restart,omitempty"`
	// If set, the LDAP library will implicitly chase referrals.
	Referrals bool `protobuf:"varint,24,opt,name=referrals,proto3" json:"referrals,omitempty"`
	// Timeout value (in seconds) for synchronous LDAP API calls (a value of 0 means default timeout).
	TimeoutSec int32 `protobuf:"varint,25,opt,name=timeout_sec,json=timeoutSec,proto3" json:"timeout_sec,omitempty"`
	// Timeout value (in seconds) after which network operations following the initial
	// connection return in case of no activity (a value of 0 means default timeout).
	NetworkTimeoutSec int32 `protobuf:"varint,26,opt,name=network_timeout_sec,json=networkTimeoutSec,proto3" json:"network_timeout_sec,omitempty"`
	// If set, the LDAP library will connect asynchronously.
	AsyncConnect bool `protobuf:"varint,27,opt,name=async_connect,json=asyncConnect,proto3" json:"async_connect,omitempty"`
	// Prefix for simple authentication
	Prefix string `protobuf:"bytes,100,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Suffix for simple authentication
	Suffix string `protobuf:"bytes,101,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// LDAP search scope with possible values "base" (just search the base distinguished name),
	// "sub" (recursive search under the base distinguished name) or
	// "one" (search the base’s immediate children) (default: "sub").
	SearchScope string `protobuf:"bytes,200,opt,name=search_scope,json=searchScope,proto3" json:"search_scope,omitempty"`
	// LDAP filter expression which limits the set of LDAP users being considered
	// (default: "objectClass=*"" which means all objects).
	SearchFilter string `protobuf:"bytes,201,opt,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"`
	// Specifies the attribute in the user objects which is used to match the ArangoDB user name (default: "uid").
	SearchAttribute string `protobuf:"bytes,202,opt,name=search_attribute,json=searchAttribute,proto3" json:"search_attribute,omitempty"`
	// If set, this field specifies the name of the attribute used to fetch the roles of a user.
	RolesAttributeName string `protobuf:"bytes,300,opt,name=roles_attribute_name,json=rolesAttributeName,proto3" json:"roles_attribute_name,omitempty"`
	// If set, then the string {USER} in the value of this field is replaced with the distinguished
	// name of the authenticated LDAP user and the resulting search expression is used to
	// match distinguished names of LDAP objects representing roles of that user.
	RolesSearch string `protobuf:"bytes,301,opt,name=roles_search,json=rolesSearch,proto3" json:"roles_search,omitempty"`
	// Regular expression that is used to filter roles.
	// Only roles that match the regular expression are used.
	RolesInclude string `protobuf:"bytes,400,opt,name=roles_include,json=rolesInclude,proto3" json:"roles_include,omitempty"`
	// Regular expression that is used to filter roles.
	// Only roles that do not match the regular expression are used.
	RolesExclude string `protobuf:"bytes,401,opt,name=roles_exclude,json=rolesExclude,proto3" json:"roles_exclude,omitempty"`
	// A regular expression in the format of a replacement text (/re/text/).
	// This regular expression is applied to the role name found.
	// This is especially useful in the roles-search variant to extract the real role name out of the dn value.
	RolesTransformation string `protobuf:"bytes,402,opt,name=roles_transformation,json=rolesTransformation,proto3" json:"roles_transformation,omitempty"`
	// Name of role associated with the superuser.
	// Any user belonging to this role gains superuser status.
	// This role is checked after applying the roles_transformation expression.
	SuperUserRole string `protobuf:"bytes,403,opt,name=super_user_role,json=superUserRole,proto3" json:"super_user_role,omitempty"`
}

func (x *IAMProvider_LDAPSettings) Reset() {
	*x = IAMProvider_LDAPSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAMProvider_LDAPSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAMProvider_LDAPSettings) ProtoMessage() {}

func (x *IAMProvider_LDAPSettings) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAMProvider_LDAPSettings.ProtoReflect.Descriptor instead.
func (*IAMProvider_LDAPSettings) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IAMProvider_LDAPSettings) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *IAMProvider_LDAPSettings) GetBaseDistinguishedName() string {
	if x != nil {
		return x.BaseDistinguishedName
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetBindDistinguishedName() string {
	if x != nil {
		return x.BindDistinguishedName
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetBindPassword() string {
	if x != nil {
		return x.BindPassword
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetRefreshRate() int32 {
	if x != nil {
		return x.RefreshRate
	}
	return 0
}

func (x *IAMProvider_LDAPSettings) GetTlsCaCertificatePem() string {
	if x != nil {
		return x.TlsCaCertificatePem
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetSerialized() bool {
	if x != nil {
		return x.Serialized
	}
	return false
}

func (x *IAMProvider_LDAPSettings) GetSerializeTimeoutSec() int32 {
	if x != nil {
		return x.SerializeTimeoutSec
	}
	return 0
}

func (x *IAMProvider_LDAPSettings) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *IAMProvider_LDAPSettings) GetRestart() bool {
	if x != nil {
		return x.Restart
	}
	return false
}

func (x *IAMProvider_LDAPSettings) GetReferrals() bool {
	if x != nil {
		return x.Referrals
	}
	return false
}

func (x *IAMProvider_LDAPSettings) GetTimeoutSec() int32 {
	if x != nil {
		return x.TimeoutSec
	}
	return 0
}

func (x *IAMProvider_LDAPSettings) GetNetworkTimeoutSec() int32 {
	if x != nil {
		return x.NetworkTimeoutSec
	}
	return 0
}

func (x *IAMProvider_LDAPSettings) GetAsyncConnect() bool {
	if x != nil {
		return x.AsyncConnect
	}
	return false
}

func (x *IAMProvider_LDAPSettings) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetSearchScope() string {
	if x != nil {
		return x.SearchScope
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetSearchFilter() string {
	if x != nil {
		return x.SearchFilter
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetSearchAttribute() string {
	if x != nil {
		return x.SearchAttribute
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetRolesAttributeName() string {
	if x != nil {
		return x.RolesAttributeName
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetRolesSearch() string {
	if x != nil {
		return x.RolesSearch
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetRolesInclude() string {
	if x != nil {
		return x.RolesInclude
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetRolesExclude() string {
	if x != nil {
		return x.RolesExclude
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetRolesTransformation() string {
	if x != nil {
		return x.RolesTransformation
	}
	return ""
}

func (x *IAMProvider_LDAPSettings) GetSuperUserRole() string {
	if x != nil {
		return x.SuperUserRole
	}
	return ""
}

var File_security_proto protoreflect.FileDescriptor

var file_security_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xce, 0x03, 0x0a, 0x0b, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x69,
	0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x0f, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c,
	0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x0b, 0x0a, 0x0b, 0x49, 0x41, 0x4d, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x59, 0x0a, 0x0d, 0x6c, 0x64, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c,
	0x6c, 0x64, 0x61, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xe9, 0x07, 0x0a,
	0x0c, 0x4c, 0x44, 0x41, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x62, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x74, 0x6c, 0x73, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x2e, 0x0a,
	0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xad, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x50, 0x0a, 0x0f, 0x49, 0x41, 0x4d, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xaa, 0x0e, 0x0a, 0x0f, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x8a, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x70, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa4, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x32, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x41, 0x4d, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x61, 0x6d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x41,
	0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa4, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x94, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x27, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x32,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x41,
	0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x41, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x1f,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_security_proto_rawDescOnce sync.Once
	file_security_proto_rawDescData = file_security_proto_rawDesc
)

func file_security_proto_rawDescGZIP() []byte {
	file_security_proto_rawDescOnce.Do(func() {
		file_security_proto_rawDescData = protoimpl.X.CompressGZIP(file_security_proto_rawDescData)
	})
	return file_security_proto_rawDescData
}

var file_security_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_security_proto_goTypes = []interface{}{
	(*IPAllowlist)(nil),              // 0: arangodb.cloud.security.v1.IPAllowlist
	(*IPAllowlistList)(nil),          // 1: arangodb.cloud.security.v1.IPAllowlistList
	(*IAMProvider)(nil),              // 2: arangodb.cloud.security.v1.IAMProvider
	(*IAMProviderList)(nil),          // 3: arangodb.cloud.security.v1.IAMProviderList
	(*IAMProvider_LDAPSettings)(nil), // 4: arangodb.cloud.security.v1.IAMProvider.LDAPSettings
	(*timestamppb.Timestamp)(nil),    // 5: google.protobuf.Timestamp
	(*v1.Empty)(nil),                 // 6: arangodb.cloud.common.v1.Empty
	(*v1.ListOptions)(nil),           // 7: arangodb.cloud.common.v1.ListOptions
	(*v1.IDOptions)(nil),             // 8: arangodb.cloud.common.v1.IDOptions
	(*v1.Version)(nil),               // 9: arangodb.cloud.common.v1.Version
}
var file_security_proto_depIdxs = []int32{
	5,  // 0: arangodb.cloud.security.v1.IPAllowlist.created_at:type_name -> google.protobuf.Timestamp
	5,  // 1: arangodb.cloud.security.v1.IPAllowlist.deleted_at:type_name -> google.protobuf.Timestamp
	0,  // 2: arangodb.cloud.security.v1.IPAllowlistList.items:type_name -> arangodb.cloud.security.v1.IPAllowlist
	5,  // 3: arangodb.cloud.security.v1.IAMProvider.created_at:type_name -> google.protobuf.Timestamp
	5,  // 4: arangodb.cloud.security.v1.IAMProvider.deleted_at:type_name -> google.protobuf.Timestamp
	4,  // 5: arangodb.cloud.security.v1.IAMProvider.ldap_settings:type_name -> arangodb.cloud.security.v1.IAMProvider.LDAPSettings
	2,  // 6: arangodb.cloud.security.v1.IAMProviderList.items:type_name -> arangodb.cloud.security.v1.IAMProvider
	6,  // 7: arangodb.cloud.security.v1.SecurityService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	7,  // 8: arangodb.cloud.security.v1.SecurityService.ListIPAllowlists:input_type -> arangodb.cloud.common.v1.ListOptions
	8,  // 9: arangodb.cloud.security.v1.SecurityService.GetIPAllowlist:input_type -> arangodb.cloud.common.v1.IDOptions
	0,  // 10: arangodb.cloud.security.v1.SecurityService.CreateIPAllowlist:input_type -> arangodb.cloud.security.v1.IPAllowlist
	0,  // 11: arangodb.cloud.security.v1.SecurityService.UpdateIPAllowlist:input_type -> arangodb.cloud.security.v1.IPAllowlist
	8,  // 12: arangodb.cloud.security.v1.SecurityService.DeleteIPAllowlist:input_type -> arangodb.cloud.common.v1.IDOptions
	7,  // 13: arangodb.cloud.security.v1.SecurityService.ListIAMProviders:input_type -> arangodb.cloud.common.v1.ListOptions
	8,  // 14: arangodb.cloud.security.v1.SecurityService.GetIAMProvider:input_type -> arangodb.cloud.common.v1.IDOptions
	2,  // 15: arangodb.cloud.security.v1.SecurityService.CreateIAMProvider:input_type -> arangodb.cloud.security.v1.IAMProvider
	2,  // 16: arangodb.cloud.security.v1.SecurityService.UpdateIAMProvider:input_type -> arangodb.cloud.security.v1.IAMProvider
	8,  // 17: arangodb.cloud.security.v1.SecurityService.DeleteIAMProvider:input_type -> arangodb.cloud.common.v1.IDOptions
	2,  // 18: arangodb.cloud.security.v1.SecurityService.SetDefaultIAMProvider:input_type -> arangodb.cloud.security.v1.IAMProvider
	9,  // 19: arangodb.cloud.security.v1.SecurityService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	1,  // 20: arangodb.cloud.security.v1.SecurityService.ListIPAllowlists:output_type -> arangodb.cloud.security.v1.IPAllowlistList
	0,  // 21: arangodb.cloud.security.v1.SecurityService.GetIPAllowlist:output_type -> arangodb.cloud.security.v1.IPAllowlist
	0,  // 22: arangodb.cloud.security.v1.SecurityService.CreateIPAllowlist:output_type -> arangodb.cloud.security.v1.IPAllowlist
	0,  // 23: arangodb.cloud.security.v1.SecurityService.UpdateIPAllowlist:output_type -> arangodb.cloud.security.v1.IPAllowlist
	6,  // 24: arangodb.cloud.security.v1.SecurityService.DeleteIPAllowlist:output_type -> arangodb.cloud.common.v1.Empty
	3,  // 25: arangodb.cloud.security.v1.SecurityService.ListIAMProviders:output_type -> arangodb.cloud.security.v1.IAMProviderList
	2,  // 26: arangodb.cloud.security.v1.SecurityService.GetIAMProvider:output_type -> arangodb.cloud.security.v1.IAMProvider
	2,  // 27: arangodb.cloud.security.v1.SecurityService.CreateIAMProvider:output_type -> arangodb.cloud.security.v1.IAMProvider
	2,  // 28: arangodb.cloud.security.v1.SecurityService.UpdateIAMProvider:output_type -> arangodb.cloud.security.v1.IAMProvider
	6,  // 29: arangodb.cloud.security.v1.SecurityService.DeleteIAMProvider:output_type -> arangodb.cloud.common.v1.Empty
	6,  // 30: arangodb.cloud.security.v1.SecurityService.SetDefaultIAMProvider:output_type -> arangodb.cloud.common.v1.Empty
	19, // [19:31] is the sub-list for method output_type
	7,  // [7:19] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_security_proto_init() }
func file_security_proto_init() {
	if File_security_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_security_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAllowlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAllowlistList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAMProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAMProviderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAMProvider_LDAPSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_security_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_security_proto_goTypes,
		DependencyIndexes: file_security_proto_depIdxs,
		MessageInfos:      file_security_proto_msgTypes,
	}.Build()
	File_security_proto = out.File
	file_security_proto_rawDesc = nil
	file_security_proto_goTypes = nil
	file_security_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SecurityServiceClient is the client API for SecurityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecurityServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all IP allowlists that belong to the project identified by the given
	// context ID.
	// Required permissions:
	// - security.ipallowlist.list on the project identified by the given context ID.
	ListIPAllowlists(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*IPAllowlistList, error)
	// Fetch an IP allowlist by its id.
	// Required permissions:
	// - security.ipallowlist.get on the IP allowlist
	GetIPAllowlist(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*IPAllowlist, error)
	// Create a new IP allowlist
	// Required permissions:
	// - security.ipallowlist.create on the project that owns the IP allowlist.
	CreateIPAllowlist(ctx context.Context, in *IPAllowlist, opts ...grpc.CallOption) (*IPAllowlist, error)
	// Update an IP allowlist
	// Required permissions:
	// - security.ipallowlist.update on the IP allowlist
	UpdateIPAllowlist(ctx context.Context, in *IPAllowlist, opts ...grpc.CallOption) (*IPAllowlist, error)
	// Delete an IP allowlist.
	// Note that IP allowlists are initially only marked for deletion.
	// Once all their dependent deployments are removed, the allowlist is removed.
	// Required permissions:
	// - security.ipallowlist.delete on the IP allowlist
	DeleteIPAllowlist(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch all IAM providers that belong to the project identified by the given
	// context ID.
	// Required permissions:
	// - security.iamprovider.list on the project identified by the given context ID.
	ListIAMProviders(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*IAMProviderList, error)
	// Fetch an IAM provider by its id.
	// Required permissions:
	// - security.iamprovider.get on the IAM provider
	GetIAMProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*IAMProvider, error)
	// Create a new IAM provider
	// Required permissions:
	// - security.iamprovider.create on the project that owns the IAM provider.
	CreateIAMProvider(ctx context.Context, in *IAMProvider, opts ...grpc.CallOption) (*IAMProvider, error)
	// Update an IAM provider
	// Required permissions:
	// - security.iamprovider.update on the IAM provider
	UpdateIAMProvider(ctx context.Context, in *IAMProvider, opts ...grpc.CallOption) (*IAMProvider, error)
	// Delete an IAM provider.
	// Note that IAM providers are initially only marked for deletion.
	// Once all their dependent deployments are removed, the provider is removed.
	// Required permissions:
	// - security.iamprovider.delete on the IP whitelist
	DeleteIAMProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Mark the given IAM provider as default for its containing project.
	// Required permissions:
	// - security.iamprovider.set-default on the project that owns the provider.
	SetDefaultIAMProvider(ctx context.Context, in *IAMProvider, opts ...grpc.CallOption) (*v1.Empty, error)
}

type securityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityServiceClient(cc grpc.ClientConnInterface) SecurityServiceClient {
	return &securityServiceClient{cc}
}

func (c *securityServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ListIPAllowlists(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*IPAllowlistList, error) {
	out := new(IPAllowlistList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/ListIPAllowlists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GetIPAllowlist(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*IPAllowlist, error) {
	out := new(IPAllowlist)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/GetIPAllowlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) CreateIPAllowlist(ctx context.Context, in *IPAllowlist, opts ...grpc.CallOption) (*IPAllowlist, error) {
	out := new(IPAllowlist)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/CreateIPAllowlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) UpdateIPAllowlist(ctx context.Context, in *IPAllowlist, opts ...grpc.CallOption) (*IPAllowlist, error) {
	out := new(IPAllowlist)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/UpdateIPAllowlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) DeleteIPAllowlist(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/DeleteIPAllowlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ListIAMProviders(ctx context.Context, in *v1.ListOptions, opts ...grpc.CallOption) (*IAMProviderList, error) {
	out := new(IAMProviderList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/ListIAMProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GetIAMProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*IAMProvider, error) {
	out := new(IAMProvider)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/GetIAMProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) CreateIAMProvider(ctx context.Context, in *IAMProvider, opts ...grpc.CallOption) (*IAMProvider, error) {
	out := new(IAMProvider)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/CreateIAMProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) UpdateIAMProvider(ctx context.Context, in *IAMProvider, opts ...grpc.CallOption) (*IAMProvider, error) {
	out := new(IAMProvider)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/UpdateIAMProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) DeleteIAMProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/DeleteIAMProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) SetDefaultIAMProvider(ctx context.Context, in *IAMProvider, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.security.v1.SecurityService/SetDefaultIAMProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityServiceServer is the server API for SecurityService service.
type SecurityServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all IP allowlists that belong to the project identified by the given
	// context ID.
	// Required permissions:
	// - security.ipallowlist.list on the project identified by the given context ID.
	ListIPAllowlists(context.Context, *v1.ListOptions) (*IPAllowlistList, error)
	// Fetch an IP allowlist by its id.
	// Required permissions:
	// - security.ipallowlist.get on the IP allowlist
	GetIPAllowlist(context.Context, *v1.IDOptions) (*IPAllowlist, error)
	// Create a new IP allowlist
	// Required permissions:
	// - security.ipallowlist.create on the project that owns the IP allowlist.
	CreateIPAllowlist(context.Context, *IPAllowlist) (*IPAllowlist, error)
	// Update an IP allowlist
	// Required permissions:
	// - security.ipallowlist.update on the IP allowlist
	UpdateIPAllowlist(context.Context, *IPAllowlist) (*IPAllowlist, error)
	// Delete an IP allowlist.
	// Note that IP allowlists are initially only marked for deletion.
	// Once all their dependent deployments are removed, the allowlist is removed.
	// Required permissions:
	// - security.ipallowlist.delete on the IP allowlist
	DeleteIPAllowlist(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Fetch all IAM providers that belong to the project identified by the given
	// context ID.
	// Required permissions:
	// - security.iamprovider.list on the project identified by the given context ID.
	ListIAMProviders(context.Context, *v1.ListOptions) (*IAMProviderList, error)
	// Fetch an IAM provider by its id.
	// Required permissions:
	// - security.iamprovider.get on the IAM provider
	GetIAMProvider(context.Context, *v1.IDOptions) (*IAMProvider, error)
	// Create a new IAM provider
	// Required permissions:
	// - security.iamprovider.create on the project that owns the IAM provider.
	CreateIAMProvider(context.Context, *IAMProvider) (*IAMProvider, error)
	// Update an IAM provider
	// Required permissions:
	// - security.iamprovider.update on the IAM provider
	UpdateIAMProvider(context.Context, *IAMProvider) (*IAMProvider, error)
	// Delete an IAM provider.
	// Note that IAM providers are initially only marked for deletion.
	// Once all their dependent deployments are removed, the provider is removed.
	// Required permissions:
	// - security.iamprovider.delete on the IP whitelist
	DeleteIAMProvider(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Mark the given IAM provider as default for its containing project.
	// Required permissions:
	// - security.iamprovider.set-default on the project that owns the provider.
	SetDefaultIAMProvider(context.Context, *IAMProvider) (*v1.Empty, error)
}

// UnimplementedSecurityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSecurityServiceServer struct {
}

func (*UnimplementedSecurityServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedSecurityServiceServer) ListIPAllowlists(context.Context, *v1.ListOptions) (*IPAllowlistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIPAllowlists not implemented")
}
func (*UnimplementedSecurityServiceServer) GetIPAllowlist(context.Context, *v1.IDOptions) (*IPAllowlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPAllowlist not implemented")
}
func (*UnimplementedSecurityServiceServer) CreateIPAllowlist(context.Context, *IPAllowlist) (*IPAllowlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPAllowlist not implemented")
}
func (*UnimplementedSecurityServiceServer) UpdateIPAllowlist(context.Context, *IPAllowlist) (*IPAllowlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPAllowlist not implemented")
}
func (*UnimplementedSecurityServiceServer) DeleteIPAllowlist(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPAllowlist not implemented")
}
func (*UnimplementedSecurityServiceServer) ListIAMProviders(context.Context, *v1.ListOptions) (*IAMProviderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMProviders not implemented")
}
func (*UnimplementedSecurityServiceServer) GetIAMProvider(context.Context, *v1.IDOptions) (*IAMProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIAMProvider not implemented")
}
func (*UnimplementedSecurityServiceServer) CreateIAMProvider(context.Context, *IAMProvider) (*IAMProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIAMProvider not implemented")
}
func (*UnimplementedSecurityServiceServer) UpdateIAMProvider(context.Context, *IAMProvider) (*IAMProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIAMProvider not implemented")
}
func (*UnimplementedSecurityServiceServer) DeleteIAMProvider(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIAMProvider not implemented")
}
func (*UnimplementedSecurityServiceServer) SetDefaultIAMProvider(context.Context, *IAMProvider) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultIAMProvider not implemented")
}

func RegisterSecurityServiceServer(s *grpc.Server, srv SecurityServiceServer) {
	s.RegisterService(&_SecurityService_serviceDesc, srv)
}

func _SecurityService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ListIPAllowlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ListIPAllowlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/ListIPAllowlists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ListIPAllowlists(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GetIPAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetIPAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/GetIPAllowlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetIPAllowlist(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_CreateIPAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAllowlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).CreateIPAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/CreateIPAllowlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).CreateIPAllowlist(ctx, req.(*IPAllowlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_UpdateIPAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAllowlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).UpdateIPAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/UpdateIPAllowlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).UpdateIPAllowlist(ctx, req.(*IPAllowlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_DeleteIPAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).DeleteIPAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/DeleteIPAllowlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).DeleteIPAllowlist(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ListIAMProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ListIAMProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/ListIAMProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ListIAMProviders(ctx, req.(*v1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GetIAMProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetIAMProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/GetIAMProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetIAMProvider(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_CreateIAMProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IAMProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).CreateIAMProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/CreateIAMProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).CreateIAMProvider(ctx, req.(*IAMProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_UpdateIAMProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IAMProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).UpdateIAMProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/UpdateIAMProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).UpdateIAMProvider(ctx, req.(*IAMProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_DeleteIAMProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).DeleteIAMProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/DeleteIAMProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).DeleteIAMProvider(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_SetDefaultIAMProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IAMProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).SetDefaultIAMProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.security.v1.SecurityService/SetDefaultIAMProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).SetDefaultIAMProvider(ctx, req.(*IAMProvider))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecurityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.security.v1.SecurityService",
	HandlerType: (*SecurityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _SecurityService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListIPAllowlists",
			Handler:    _SecurityService_ListIPAllowlists_Handler,
		},
		{
			MethodName: "GetIPAllowlist",
			Handler:    _SecurityService_GetIPAllowlist_Handler,
		},
		{
			MethodName: "CreateIPAllowlist",
			Handler:    _SecurityService_CreateIPAllowlist_Handler,
		},
		{
			MethodName: "UpdateIPAllowlist",
			Handler:    _SecurityService_UpdateIPAllowlist_Handler,
		},
		{
			MethodName: "DeleteIPAllowlist",
			Handler:    _SecurityService_DeleteIPAllowlist_Handler,
		},
		{
			MethodName: "ListIAMProviders",
			Handler:    _SecurityService_ListIAMProviders_Handler,
		},
		{
			MethodName: "GetIAMProvider",
			Handler:    _SecurityService_GetIAMProvider_Handler,
		},
		{
			MethodName: "CreateIAMProvider",
			Handler:    _SecurityService_CreateIAMProvider_Handler,
		},
		{
			MethodName: "UpdateIAMProvider",
			Handler:    _SecurityService_UpdateIAMProvider_Handler,
		},
		{
			MethodName: "DeleteIAMProvider",
			Handler:    _SecurityService_DeleteIAMProvider_Handler,
		},
		{
			MethodName: "SetDefaultIAMProvider",
			Handler:    _SecurityService_SetDefaultIAMProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security.proto",
}
