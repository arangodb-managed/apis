//
// DISCLAIMER
//
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: credits.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreditDebt contains the details regarding an organization's credit debt.
type CreditDebt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the organization in debt.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Amount of debt currently accrued by the specified organization.
	// Zero means no debt.
	Amount float32 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Timestamp at which this organization first ran out of credits (and went into debt).
	// Not set if there is no debt.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CreditDebt) Reset() {
	*x = CreditDebt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditDebt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditDebt) ProtoMessage() {}

func (x *CreditDebt) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditDebt.ProtoReflect.Descriptor instead.
func (*CreditDebt) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{0}
}

func (x *CreditDebt) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreditDebt) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreditDebt) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// CreditBundleUsageProjection contains a series of monthly credit usage projections.
type CreditBundleUsageProjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of credit usage projections.
	Projections []*CreditBundleUsageProjection_Projection `protobuf:"bytes,1,rep,name=projections,proto3" json:"projections,omitempty"`
}

func (x *CreditBundleUsageProjection) Reset() {
	*x = CreditBundleUsageProjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditBundleUsageProjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditBundleUsageProjection) ProtoMessage() {}

func (x *CreditBundleUsageProjection) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditBundleUsageProjection.ProtoReflect.Descriptor instead.
func (*CreditBundleUsageProjection) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{1}
}

func (x *CreditBundleUsageProjection) GetProjections() []*CreditBundleUsageProjection_Projection {
	if x != nil {
		return x.Projections
	}
	return nil
}

// Request for GetCreditBundleUsageProjection rpc.
type GetCreditBundleUsageProjectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the organization for which a credit usage projection is requested.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Maximum number of projections to return.
	// This is an optional field.
	// If unspecified, defaults to 3.
	ProjectionsLimit int32 `protobuf:"varint,2,opt,name=projections_limit,json=projectionsLimit,proto3" json:"projections_limit,omitempty"`
}

func (x *GetCreditBundleUsageProjectionRequest) Reset() {
	*x = GetCreditBundleUsageProjectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreditBundleUsageProjectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreditBundleUsageProjectionRequest) ProtoMessage() {}

func (x *GetCreditBundleUsageProjectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreditBundleUsageProjectionRequest.ProtoReflect.Descriptor instead.
func (*GetCreditBundleUsageProjectionRequest) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{2}
}

func (x *GetCreditBundleUsageProjectionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetCreditBundleUsageProjectionRequest) GetProjectionsLimit() int32 {
	if x != nil {
		return x.ProjectionsLimit
	}
	return 0
}

type CreditUsageReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of credit usage reports.
	Items []*CreditUsageReport `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CreditUsageReportList) Reset() {
	*x = CreditUsageReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsageReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsageReportList) ProtoMessage() {}

func (x *CreditUsageReportList) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsageReportList.ProtoReflect.Descriptor instead.
func (*CreditUsageReportList) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{3}
}

func (x *CreditUsageReportList) GetItems() []*CreditUsageReport {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request for ListCreditUsageReports rpc.
type ListCreditUsageReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the organization for which credit reports are listed.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Request reports that are created at or after this timestamp.
	// This is an optional field.
	From *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Request reports that are created before this timestamp.
	// This is an optional field.
	To *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Common list options
	// context_id is ignored.
	Options *v1.ListOptions `protobuf:"bytes,20,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListCreditUsageReportsRequest) Reset() {
	*x = ListCreditUsageReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCreditUsageReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditUsageReportsRequest) ProtoMessage() {}

func (x *ListCreditUsageReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditUsageReportsRequest.ProtoReflect.Descriptor instead.
func (*ListCreditUsageReportsRequest) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{4}
}

func (x *ListCreditUsageReportsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListCreditUsageReportsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListCreditUsageReportsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ListCreditUsageReportsRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// CreditUsageReport describes the monthly credit usage for a given organization.
type CreditUsageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the report.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// ID of the organization to which this report belongs.
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Amount of credits consumed between the interval in this report (between starts_at and ends_at).
	Amount float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Credit balance at the start of the month.
	OpeningBalance float32 `protobuf:"fixed32,5,opt,name=opening_balance,json=openingBalance,proto3" json:"opening_balance,omitempty"`
	// Credit balance at the end of the month.
	ClosingBalance float32 `protobuf:"fixed32,6,opt,name=closing_balance,json=closingBalance,proto3" json:"closing_balance,omitempty"`
	// Date at which this report was created.
	// This report will contain the monthly usage of the month specified in this timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// List of items in this credit usage report.
	Items []*CreditUsageReport_Item `protobuf:"bytes,100,rep,name=items,proto3" json:"items,omitempty"`
	// Status of the report.
	Status *CreditUsageReport_Status `protobuf:"bytes,200,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreditUsageReport) Reset() {
	*x = CreditUsageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsageReport) ProtoMessage() {}

func (x *CreditUsageReport) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsageReport.ProtoReflect.Descriptor instead.
func (*CreditUsageReport) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{5}
}

func (x *CreditUsageReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreditUsageReport) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreditUsageReport) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreditUsageReport) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreditUsageReport) GetOpeningBalance() float32 {
	if x != nil {
		return x.OpeningBalance
	}
	return 0
}

func (x *CreditUsageReport) GetClosingBalance() float32 {
	if x != nil {
		return x.ClosingBalance
	}
	return 0
}

func (x *CreditUsageReport) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreditUsageReport) GetItems() []*CreditUsageReport_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreditUsageReport) GetStatus() *CreditUsageReport_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// PDFDocument contains the PDF representation of a CreditUsageReport.
type PDFDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of the PDF.
	// This is a read-only field.
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	// Name of the PDF file.
	// This is a ready-only field.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *PDFDocument) Reset() {
	*x = PDFDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFDocument) ProtoMessage() {}

func (x *PDFDocument) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFDocument.ProtoReflect.Descriptor instead.
func (*PDFDocument) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{6}
}

func (x *PDFDocument) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *PDFDocument) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Request for listing credit bundle usages.
type ListCreditBundleUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The organization this credit bundle belongs to.
	// This is a required field.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// If set, list the usage for the specified credit bundle only.
	// By default, returns the usage for all credit bundles in this organization.
	// This is an optional field.
	CreditBundleId string `protobuf:"bytes,2,opt,name=credit_bundle_id,json=creditBundleId,proto3" json:"credit_bundle_id,omitempty"`
	// The date from which credit usage should be listed.
	// If unspecified, defaults to the date 7 days before `ends_at`.
	// This is an optional field.
	StartsAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	// The date until which credit usage should be listed.
	// If unspecified, defaults to the current date (at the time of calling the API).
	// This is an optional field.
	EndsAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	// If set, list the usage for the specified usage item only.
	// This is an optional field.
	UsageItemId string `protobuf:"bytes,5,opt,name=usage_item_id,json=usageItemId,proto3" json:"usage_item_id,omitempty"`
	// Common list options
	// context_id is ignored.
	Options *v1.ListOptions `protobuf:"bytes,20,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListCreditBundleUsageRequest) Reset() {
	*x = ListCreditBundleUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCreditBundleUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditBundleUsageRequest) ProtoMessage() {}

func (x *ListCreditBundleUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditBundleUsageRequest.ProtoReflect.Descriptor instead.
func (*ListCreditBundleUsageRequest) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{7}
}

func (x *ListCreditBundleUsageRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListCreditBundleUsageRequest) GetCreditBundleId() string {
	if x != nil {
		return x.CreditBundleId
	}
	return ""
}

func (x *ListCreditBundleUsageRequest) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *ListCreditBundleUsageRequest) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *ListCreditBundleUsageRequest) GetUsageItemId() string {
	if x != nil {
		return x.UsageItemId
	}
	return ""
}

func (x *ListCreditBundleUsageRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Request for listing credit bundles
type ListCreditBundlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the organization for which credit bundles are listed.
	// This is a required field.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// If set, exclude expired bundles.
	ExcludeExpired bool `protobuf:"varint,2,opt,name=exclude_expired,json=excludeExpired,proto3" json:"exclude_expired,omitempty"`
}

func (x *ListCreditBundlesRequest) Reset() {
	*x = ListCreditBundlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCreditBundlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditBundlesRequest) ProtoMessage() {}

func (x *ListCreditBundlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditBundlesRequest.ProtoReflect.Descriptor instead.
func (*ListCreditBundlesRequest) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{8}
}

func (x *ListCreditBundlesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListCreditBundlesRequest) GetExcludeExpired() bool {
	if x != nil {
		return x.ExcludeExpired
	}
	return false
}

// List of credit bundles
type CreditBundlesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CreditBundle `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CreditBundlesList) Reset() {
	*x = CreditBundlesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditBundlesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditBundlesList) ProtoMessage() {}

func (x *CreditBundlesList) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditBundlesList.ProtoReflect.Descriptor instead.
func (*CreditBundlesList) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{9}
}

func (x *CreditBundlesList) GetItems() []*CreditBundle {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreditBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the credit bundle.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this credit bundle.
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// The organization this credit bundle belongs to.
	// This is a read-only value.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The number of credits purchased in this bundle.
	// This is a read-only value.
	CreditsPurchased float32 `protobuf:"fixed32,5,opt,name=credits_purchased,json=creditsPurchased,proto3" json:"credits_purchased,omitempty"`
	// The total price of these credits.
	// This is a read-only value.
	TotalPrice float32 `protobuf:"fixed32,6,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	// Currency used for total_price.
	// This is a read-only value.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// The number of credits remaining in this bundle.
	// This is a read-only value.
	CreditsRemaining float32 `protobuf:"fixed32,8,opt,name=credits_remaining,json=creditsRemaining,proto3" json:"credits_remaining,omitempty"`
	// The date at which this bundle was purchased.
	// This is a read-only value.
	PurchasedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=purchased_at,json=purchasedAt,proto3" json:"purchased_at,omitempty"`
	// The date from which this bundle is valid.
	// This is a read-only value.
	ValidFrom *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	// The date until which this bundle is valid.
	// This is a read-only value.
	ValidUntil *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	// Timestamp of when this credit bundle was last used.
	LastUsedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
}

func (x *CreditBundle) Reset() {
	*x = CreditBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditBundle) ProtoMessage() {}

func (x *CreditBundle) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditBundle.ProtoReflect.Descriptor instead.
func (*CreditBundle) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{10}
}

func (x *CreditBundle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreditBundle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreditBundle) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreditBundle) GetCreditsPurchased() float32 {
	if x != nil {
		return x.CreditsPurchased
	}
	return 0
}

func (x *CreditBundle) GetTotalPrice() float32 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *CreditBundle) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreditBundle) GetCreditsRemaining() float32 {
	if x != nil {
		return x.CreditsRemaining
	}
	return 0
}

func (x *CreditBundle) GetPurchasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PurchasedAt
	}
	return nil
}

func (x *CreditBundle) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *CreditBundle) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

func (x *CreditBundle) GetLastUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsedAt
	}
	return nil
}

// Usage of credit bundle.
// All fields are read-only.
type CreditBundleUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of this credit bundle usage.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the usage item this credit bundle usage corresponds to.
	UsageItemId string `protobuf:"bytes,2,opt,name=usage_item_id,json=usageItemId,proto3" json:"usage_item_id,omitempty"`
	// ID of the credit bundle from which credit was used.
	CreditBundleId string `protobuf:"bytes,3,opt,name=credit_bundle_id,json=creditBundleId,proto3" json:"credit_bundle_id,omitempty"`
	// ID of the organization this credit bundle (and usage) belongs to.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Amount of credits used from the specified credit_bundle_id.
	Usage float32 `protobuf:"fixed32,5,opt,name=usage,proto3" json:"usage,omitempty"`
	// Amount of credits remaining after this usage.
	Remaining float32 `protobuf:"fixed32,6,opt,name=remaining,proto3" json:"remaining,omitempty"`
	// Timestamp at which this credit usage was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CreditBundleUsage) Reset() {
	*x = CreditBundleUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditBundleUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditBundleUsage) ProtoMessage() {}

func (x *CreditBundleUsage) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditBundleUsage.ProtoReflect.Descriptor instead.
func (*CreditBundleUsage) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{11}
}

func (x *CreditBundleUsage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreditBundleUsage) GetUsageItemId() string {
	if x != nil {
		return x.UsageItemId
	}
	return ""
}

func (x *CreditBundleUsage) GetCreditBundleId() string {
	if x != nil {
		return x.CreditBundleId
	}
	return ""
}

func (x *CreditBundleUsage) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreditBundleUsage) GetUsage() float32 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *CreditBundleUsage) GetRemaining() float32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *CreditBundleUsage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// List of CreditBundleUsages.
type CreditBundleUsageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CreditBundleUsage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CreditBundleUsageList) Reset() {
	*x = CreditBundleUsageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditBundleUsageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditBundleUsageList) ProtoMessage() {}

func (x *CreditBundleUsageList) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditBundleUsageList.ProtoReflect.Descriptor instead.
func (*CreditBundleUsageList) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{12}
}

func (x *CreditBundleUsageList) GetItems() []*CreditBundleUsage {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreditBundleUsageProjection_Projection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage value projected for the month in the provided timestamp.
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	// Timestamp (month) for which the given usage value is projected.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CreditBundleUsageProjection_Projection) Reset() {
	*x = CreditBundleUsageProjection_Projection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditBundleUsageProjection_Projection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditBundleUsageProjection_Projection) ProtoMessage() {}

func (x *CreditBundleUsageProjection_Projection) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditBundleUsageProjection_Projection.ProtoReflect.Descriptor instead.
func (*CreditBundleUsageProjection_Projection) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CreditBundleUsageProjection_Projection) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CreditBundleUsageProjection_Projection) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type CreditUsageReport_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifiers of the Credit usages that this item covers.
	CreditusageIds []string `protobuf:"bytes,1,rep,name=creditusage_ids,json=creditusageIds,proto3" json:"creditusage_ids,omitempty"`
	// Amount of credits for this item.
	Amount float32 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Human readable description of this item
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreditUsageReport_Item) Reset() {
	*x = CreditUsageReport_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsageReport_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsageReport_Item) ProtoMessage() {}

func (x *CreditUsageReport_Item) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsageReport_Item.ProtoReflect.Descriptor instead.
func (*CreditUsageReport_Item) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CreditUsageReport_Item) GetCreditusageIds() []string {
	if x != nil {
		return x.CreditusageIds
	}
	return nil
}

func (x *CreditUsageReport_Item) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreditUsageReport_Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Status of the report.
type CreditUsageReport_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, the items in this report are complete for the month specified in `created_at`.
	// No more items will be added to this report once this field is set.
	IsComplete bool `protobuf:"varint,1,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
}

func (x *CreditUsageReport_Status) Reset() {
	*x = CreditUsageReport_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credits_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsageReport_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsageReport_Status) ProtoMessage() {}

func (x *CreditUsageReport_Status) ProtoReflect() protoreflect.Message {
	mi := &file_credits_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsageReport_Status.ProtoReflect.Descriptor instead.
func (*CreditUsageReport_Status) Descriptor() ([]byte, []int) {
	return file_credits_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CreditUsageReport_Status) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

var File_credits_proto protoreflect.FileDescriptor

var file_credits_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x44, 0x65, 0x62, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe0, 0x01, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x5c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x7d, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5b,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xb0, 0x04, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x69, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x29, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x0b, 0x50, 0x44, 0x46, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x02,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x52, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe5, 0x03, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0x89,
	0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5b, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xf4, 0x0a, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0xae, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x37, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x44, 0x46, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x44, 0x46, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x70, 0x64, 0x66, 0x30, 0x01, 0x12, 0xe2, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x44, 0x65, 0x62, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x44, 0x65, 0x62, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x64, 0x65, 0x62, 0x74, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_credits_proto_rawDescOnce sync.Once
	file_credits_proto_rawDescData = file_credits_proto_rawDesc
)

func file_credits_proto_rawDescGZIP() []byte {
	file_credits_proto_rawDescOnce.Do(func() {
		file_credits_proto_rawDescData = protoimpl.X.CompressGZIP(file_credits_proto_rawDescData)
	})
	return file_credits_proto_rawDescData
}

var file_credits_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_credits_proto_goTypes = []interface{}{
	(*CreditDebt)(nil),                             // 0: arangodb.cloud.credits.v1.CreditDebt
	(*CreditBundleUsageProjection)(nil),            // 1: arangodb.cloud.credits.v1.CreditBundleUsageProjection
	(*GetCreditBundleUsageProjectionRequest)(nil),  // 2: arangodb.cloud.credits.v1.GetCreditBundleUsageProjectionRequest
	(*CreditUsageReportList)(nil),                  // 3: arangodb.cloud.credits.v1.CreditUsageReportList
	(*ListCreditUsageReportsRequest)(nil),          // 4: arangodb.cloud.credits.v1.ListCreditUsageReportsRequest
	(*CreditUsageReport)(nil),                      // 5: arangodb.cloud.credits.v1.CreditUsageReport
	(*PDFDocument)(nil),                            // 6: arangodb.cloud.credits.v1.PDFDocument
	(*ListCreditBundleUsageRequest)(nil),           // 7: arangodb.cloud.credits.v1.ListCreditBundleUsageRequest
	(*ListCreditBundlesRequest)(nil),               // 8: arangodb.cloud.credits.v1.ListCreditBundlesRequest
	(*CreditBundlesList)(nil),                      // 9: arangodb.cloud.credits.v1.CreditBundlesList
	(*CreditBundle)(nil),                           // 10: arangodb.cloud.credits.v1.CreditBundle
	(*CreditBundleUsage)(nil),                      // 11: arangodb.cloud.credits.v1.CreditBundleUsage
	(*CreditBundleUsageList)(nil),                  // 12: arangodb.cloud.credits.v1.CreditBundleUsageList
	(*CreditBundleUsageProjection_Projection)(nil), // 13: arangodb.cloud.credits.v1.CreditBundleUsageProjection.Projection
	(*CreditUsageReport_Item)(nil),                 // 14: arangodb.cloud.credits.v1.CreditUsageReport.Item
	(*CreditUsageReport_Status)(nil),               // 15: arangodb.cloud.credits.v1.CreditUsageReport.Status
	(*timestamppb.Timestamp)(nil),                  // 16: google.protobuf.Timestamp
	(*v1.ListOptions)(nil),                         // 17: arangodb.cloud.common.v1.ListOptions
	(*v1.Empty)(nil),                               // 18: arangodb.cloud.common.v1.Empty
	(*v1.IDOptions)(nil),                           // 19: arangodb.cloud.common.v1.IDOptions
	(*v1.Version)(nil),                             // 20: arangodb.cloud.common.v1.Version
}
var file_credits_proto_depIdxs = []int32{
	16, // 0: arangodb.cloud.credits.v1.CreditDebt.created_at:type_name -> google.protobuf.Timestamp
	13, // 1: arangodb.cloud.credits.v1.CreditBundleUsageProjection.projections:type_name -> arangodb.cloud.credits.v1.CreditBundleUsageProjection.Projection
	5,  // 2: arangodb.cloud.credits.v1.CreditUsageReportList.items:type_name -> arangodb.cloud.credits.v1.CreditUsageReport
	16, // 3: arangodb.cloud.credits.v1.ListCreditUsageReportsRequest.from:type_name -> google.protobuf.Timestamp
	16, // 4: arangodb.cloud.credits.v1.ListCreditUsageReportsRequest.to:type_name -> google.protobuf.Timestamp
	17, // 5: arangodb.cloud.credits.v1.ListCreditUsageReportsRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	16, // 6: arangodb.cloud.credits.v1.CreditUsageReport.created_at:type_name -> google.protobuf.Timestamp
	14, // 7: arangodb.cloud.credits.v1.CreditUsageReport.items:type_name -> arangodb.cloud.credits.v1.CreditUsageReport.Item
	15, // 8: arangodb.cloud.credits.v1.CreditUsageReport.status:type_name -> arangodb.cloud.credits.v1.CreditUsageReport.Status
	16, // 9: arangodb.cloud.credits.v1.ListCreditBundleUsageRequest.starts_at:type_name -> google.protobuf.Timestamp
	16, // 10: arangodb.cloud.credits.v1.ListCreditBundleUsageRequest.ends_at:type_name -> google.protobuf.Timestamp
	17, // 11: arangodb.cloud.credits.v1.ListCreditBundleUsageRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	10, // 12: arangodb.cloud.credits.v1.CreditBundlesList.items:type_name -> arangodb.cloud.credits.v1.CreditBundle
	16, // 13: arangodb.cloud.credits.v1.CreditBundle.purchased_at:type_name -> google.protobuf.Timestamp
	16, // 14: arangodb.cloud.credits.v1.CreditBundle.valid_from:type_name -> google.protobuf.Timestamp
	16, // 15: arangodb.cloud.credits.v1.CreditBundle.valid_until:type_name -> google.protobuf.Timestamp
	16, // 16: arangodb.cloud.credits.v1.CreditBundle.last_used_at:type_name -> google.protobuf.Timestamp
	16, // 17: arangodb.cloud.credits.v1.CreditBundleUsage.created_at:type_name -> google.protobuf.Timestamp
	11, // 18: arangodb.cloud.credits.v1.CreditBundleUsageList.items:type_name -> arangodb.cloud.credits.v1.CreditBundleUsage
	16, // 19: arangodb.cloud.credits.v1.CreditBundleUsageProjection.Projection.timestamp:type_name -> google.protobuf.Timestamp
	18, // 20: arangodb.cloud.credits.v1.CreditsService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	8,  // 21: arangodb.cloud.credits.v1.CreditsService.ListCreditBundles:input_type -> arangodb.cloud.credits.v1.ListCreditBundlesRequest
	7,  // 22: arangodb.cloud.credits.v1.CreditsService.ListCreditBundlesUsage:input_type -> arangodb.cloud.credits.v1.ListCreditBundleUsageRequest
	4,  // 23: arangodb.cloud.credits.v1.CreditsService.ListCreditUsageReports:input_type -> arangodb.cloud.credits.v1.ListCreditUsageReportsRequest
	19, // 24: arangodb.cloud.credits.v1.CreditsService.GetCreditUsageReport:input_type -> arangodb.cloud.common.v1.IDOptions
	19, // 25: arangodb.cloud.credits.v1.CreditsService.GetCreditUsageReportPDF:input_type -> arangodb.cloud.common.v1.IDOptions
	2,  // 26: arangodb.cloud.credits.v1.CreditsService.GetCreditBundleUsageProjection:input_type -> arangodb.cloud.credits.v1.GetCreditBundleUsageProjectionRequest
	19, // 27: arangodb.cloud.credits.v1.CreditsService.GetOrganizationCreditDebt:input_type -> arangodb.cloud.common.v1.IDOptions
	20, // 28: arangodb.cloud.credits.v1.CreditsService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	9,  // 29: arangodb.cloud.credits.v1.CreditsService.ListCreditBundles:output_type -> arangodb.cloud.credits.v1.CreditBundlesList
	12, // 30: arangodb.cloud.credits.v1.CreditsService.ListCreditBundlesUsage:output_type -> arangodb.cloud.credits.v1.CreditBundleUsageList
	3,  // 31: arangodb.cloud.credits.v1.CreditsService.ListCreditUsageReports:output_type -> arangodb.cloud.credits.v1.CreditUsageReportList
	5,  // 32: arangodb.cloud.credits.v1.CreditsService.GetCreditUsageReport:output_type -> arangodb.cloud.credits.v1.CreditUsageReport
	6,  // 33: arangodb.cloud.credits.v1.CreditsService.GetCreditUsageReportPDF:output_type -> arangodb.cloud.credits.v1.PDFDocument
	1,  // 34: arangodb.cloud.credits.v1.CreditsService.GetCreditBundleUsageProjection:output_type -> arangodb.cloud.credits.v1.CreditBundleUsageProjection
	0,  // 35: arangodb.cloud.credits.v1.CreditsService.GetOrganizationCreditDebt:output_type -> arangodb.cloud.credits.v1.CreditDebt
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_credits_proto_init() }
func file_credits_proto_init() {
	if File_credits_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_credits_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditDebt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditBundleUsageProjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCreditBundleUsageProjectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsageReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCreditUsageReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDFDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCreditBundleUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCreditBundlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditBundlesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditBundleUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditBundleUsageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditBundleUsageProjection_Projection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsageReport_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credits_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsageReport_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credits_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_credits_proto_goTypes,
		DependencyIndexes: file_credits_proto_depIdxs,
		MessageInfos:      file_credits_proto_msgTypes,
	}.Build()
	File_credits_proto = out.File
	file_credits_proto_rawDesc = nil
	file_credits_proto_goTypes = nil
	file_credits_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CreditsServiceClient is the client API for CreditsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CreditsServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None (authenticated only)
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// List credit bundles for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundle.list on the organization identified by the given organization ID
	ListCreditBundles(ctx context.Context, in *ListCreditBundlesRequest, opts ...grpc.CallOption) (*CreditBundlesList, error)
	// List credit bundle usages for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundleusage.list on the organization identified by the given organization ID.
	ListCreditBundlesUsage(ctx context.Context, in *ListCreditBundleUsageRequest, opts ...grpc.CallOption) (*CreditBundleUsageList, error)
	// List the credit reports for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - credit.creditusagereport.list on the organization identified by the given organization ID
	ListCreditUsageReports(ctx context.Context, in *ListCreditUsageReportsRequest, opts ...grpc.CallOption) (*CreditUsageReportList, error)
	// Get a credit usage report identified by the given ID.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReport(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditUsageReport, error)
	// Get a credit usage report identified by the given ID, as a PDF document.
	// The server sends the PDF over a stream once rendered.
	// The stream is closed after the PDF is sent.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReportPDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (CreditsService_GetCreditUsageReportPDFClient, error)
	// Get credit usage projection for an organization identified by the given organization ID.
	// This will return a projected credit usage for each month in the future, until the credits run out.
	// Required permissions:
	// - credit.creditbundleusageprojection.get on the organization identified by the given organization ID.
	GetCreditBundleUsageProjection(ctx context.Context, in *GetCreditBundleUsageProjectionRequest, opts ...grpc.CallOption) (*CreditBundleUsageProjection, error)
	// Get the total amount of credit debt accrued by an organization identified by the ID.
	// An organization starts accumulating debt from the moment it runs out of credits.
	// The debt is paid off upon purchasing additional credit bundles.
	// Note: debt usage is allowed only for a limited period of time, after which the organization's deployments are paused.
	// Required permissions:
	// - credit.creditdebt.get on the organization identified by the given organization ID.
	GetOrganizationCreditDebt(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditDebt, error)
}

type creditsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditsServiceClient(cc grpc.ClientConnInterface) CreditsServiceClient {
	return &creditsServiceClient{cc}
}

func (c *creditsServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.credits.v1.CreditsService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) ListCreditBundles(ctx context.Context, in *ListCreditBundlesRequest, opts ...grpc.CallOption) (*CreditBundlesList, error) {
	out := new(CreditBundlesList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.credits.v1.CreditsService/ListCreditBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) ListCreditBundlesUsage(ctx context.Context, in *ListCreditBundleUsageRequest, opts ...grpc.CallOption) (*CreditBundleUsageList, error) {
	out := new(CreditBundleUsageList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.credits.v1.CreditsService/ListCreditBundlesUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) ListCreditUsageReports(ctx context.Context, in *ListCreditUsageReportsRequest, opts ...grpc.CallOption) (*CreditUsageReportList, error) {
	out := new(CreditUsageReportList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.credits.v1.CreditsService/ListCreditUsageReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) GetCreditUsageReport(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditUsageReport, error) {
	out := new(CreditUsageReport)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) GetCreditUsageReportPDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (CreditsService_GetCreditUsageReportPDFClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CreditsService_serviceDesc.Streams[0], "/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReportPDF", opts...)
	if err != nil {
		return nil, err
	}
	x := &creditsServiceGetCreditUsageReportPDFClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CreditsService_GetCreditUsageReportPDFClient interface {
	Recv() (*PDFDocument, error)
	grpc.ClientStream
}

type creditsServiceGetCreditUsageReportPDFClient struct {
	grpc.ClientStream
}

func (x *creditsServiceGetCreditUsageReportPDFClient) Recv() (*PDFDocument, error) {
	m := new(PDFDocument)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *creditsServiceClient) GetCreditBundleUsageProjection(ctx context.Context, in *GetCreditBundleUsageProjectionRequest, opts ...grpc.CallOption) (*CreditBundleUsageProjection, error) {
	out := new(CreditBundleUsageProjection)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.credits.v1.CreditsService/GetCreditBundleUsageProjection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) GetOrganizationCreditDebt(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditDebt, error) {
	out := new(CreditDebt)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.credits.v1.CreditsService/GetOrganizationCreditDebt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditsServiceServer is the server API for CreditsService service.
type CreditsServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None (authenticated only)
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// List credit bundles for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundle.list on the organization identified by the given organization ID
	ListCreditBundles(context.Context, *ListCreditBundlesRequest) (*CreditBundlesList, error)
	// List credit bundle usages for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundleusage.list on the organization identified by the given organization ID.
	ListCreditBundlesUsage(context.Context, *ListCreditBundleUsageRequest) (*CreditBundleUsageList, error)
	// List the credit reports for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - credit.creditusagereport.list on the organization identified by the given organization ID
	ListCreditUsageReports(context.Context, *ListCreditUsageReportsRequest) (*CreditUsageReportList, error)
	// Get a credit usage report identified by the given ID.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReport(context.Context, *v1.IDOptions) (*CreditUsageReport, error)
	// Get a credit usage report identified by the given ID, as a PDF document.
	// The server sends the PDF over a stream once rendered.
	// The stream is closed after the PDF is sent.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReportPDF(*v1.IDOptions, CreditsService_GetCreditUsageReportPDFServer) error
	// Get credit usage projection for an organization identified by the given organization ID.
	// This will return a projected credit usage for each month in the future, until the credits run out.
	// Required permissions:
	// - credit.creditbundleusageprojection.get on the organization identified by the given organization ID.
	GetCreditBundleUsageProjection(context.Context, *GetCreditBundleUsageProjectionRequest) (*CreditBundleUsageProjection, error)
	// Get the total amount of credit debt accrued by an organization identified by the ID.
	// An organization starts accumulating debt from the moment it runs out of credits.
	// The debt is paid off upon purchasing additional credit bundles.
	// Note: debt usage is allowed only for a limited period of time, after which the organization's deployments are paused.
	// Required permissions:
	// - credit.creditdebt.get on the organization identified by the given organization ID.
	GetOrganizationCreditDebt(context.Context, *v1.IDOptions) (*CreditDebt, error)
}

// UnimplementedCreditsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCreditsServiceServer struct {
}

func (*UnimplementedCreditsServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedCreditsServiceServer) ListCreditBundles(context.Context, *ListCreditBundlesRequest) (*CreditBundlesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditBundles not implemented")
}
func (*UnimplementedCreditsServiceServer) ListCreditBundlesUsage(context.Context, *ListCreditBundleUsageRequest) (*CreditBundleUsageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditBundlesUsage not implemented")
}
func (*UnimplementedCreditsServiceServer) ListCreditUsageReports(context.Context, *ListCreditUsageReportsRequest) (*CreditUsageReportList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditUsageReports not implemented")
}
func (*UnimplementedCreditsServiceServer) GetCreditUsageReport(context.Context, *v1.IDOptions) (*CreditUsageReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditUsageReport not implemented")
}
func (*UnimplementedCreditsServiceServer) GetCreditUsageReportPDF(*v1.IDOptions, CreditsService_GetCreditUsageReportPDFServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCreditUsageReportPDF not implemented")
}
func (*UnimplementedCreditsServiceServer) GetCreditBundleUsageProjection(context.Context, *GetCreditBundleUsageProjectionRequest) (*CreditBundleUsageProjection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditBundleUsageProjection not implemented")
}
func (*UnimplementedCreditsServiceServer) GetOrganizationCreditDebt(context.Context, *v1.IDOptions) (*CreditDebt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationCreditDebt not implemented")
}

func RegisterCreditsServiceServer(s *grpc.Server, srv CreditsServiceServer) {
	s.RegisterService(&_CreditsService_serviceDesc, srv)
}

func _CreditsService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.credits.v1.CreditsService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_ListCreditBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).ListCreditBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.credits.v1.CreditsService/ListCreditBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).ListCreditBundles(ctx, req.(*ListCreditBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_ListCreditBundlesUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditBundleUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).ListCreditBundlesUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.credits.v1.CreditsService/ListCreditBundlesUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).ListCreditBundlesUsage(ctx, req.(*ListCreditBundleUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_ListCreditUsageReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditUsageReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).ListCreditUsageReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.credits.v1.CreditsService/ListCreditUsageReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).ListCreditUsageReports(ctx, req.(*ListCreditUsageReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_GetCreditUsageReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetCreditUsageReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetCreditUsageReport(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_GetCreditUsageReportPDF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.IDOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CreditsServiceServer).GetCreditUsageReportPDF(m, &creditsServiceGetCreditUsageReportPDFServer{stream})
}

type CreditsService_GetCreditUsageReportPDFServer interface {
	Send(*PDFDocument) error
	grpc.ServerStream
}

type creditsServiceGetCreditUsageReportPDFServer struct {
	grpc.ServerStream
}

func (x *creditsServiceGetCreditUsageReportPDFServer) Send(m *PDFDocument) error {
	return x.ServerStream.SendMsg(m)
}

func _CreditsService_GetCreditBundleUsageProjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditBundleUsageProjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetCreditBundleUsageProjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.credits.v1.CreditsService/GetCreditBundleUsageProjection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetCreditBundleUsageProjection(ctx, req.(*GetCreditBundleUsageProjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_GetOrganizationCreditDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetOrganizationCreditDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.credits.v1.CreditsService/GetOrganizationCreditDebt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetOrganizationCreditDebt(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _CreditsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.credits.v1.CreditsService",
	HandlerType: (*CreditsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _CreditsService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListCreditBundles",
			Handler:    _CreditsService_ListCreditBundles_Handler,
		},
		{
			MethodName: "ListCreditBundlesUsage",
			Handler:    _CreditsService_ListCreditBundlesUsage_Handler,
		},
		{
			MethodName: "ListCreditUsageReports",
			Handler:    _CreditsService_ListCreditUsageReports_Handler,
		},
		{
			MethodName: "GetCreditUsageReport",
			Handler:    _CreditsService_GetCreditUsageReport_Handler,
		},
		{
			MethodName: "GetCreditBundleUsageProjection",
			Handler:    _CreditsService_GetCreditBundleUsageProjection_Handler,
		},
		{
			MethodName: "GetOrganizationCreditDebt",
			Handler:    _CreditsService_GetOrganizationCreditDebt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCreditUsageReportPDF",
			Handler:       _CreditsService_GetCreditUsageReportPDF_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "credits.proto",
}
