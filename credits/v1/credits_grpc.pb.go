//
// DISCLAIMER
//
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: credits.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditsService_GetAPIVersion_FullMethodName                  = "/arangodb.cloud.credits.v1.CreditsService/GetAPIVersion"
	CreditsService_ListCreditBundles_FullMethodName              = "/arangodb.cloud.credits.v1.CreditsService/ListCreditBundles"
	CreditsService_ListCreditBundlesUsage_FullMethodName         = "/arangodb.cloud.credits.v1.CreditsService/ListCreditBundlesUsage"
	CreditsService_ListCreditUsageReports_FullMethodName         = "/arangodb.cloud.credits.v1.CreditsService/ListCreditUsageReports"
	CreditsService_GetCreditUsageReport_FullMethodName           = "/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReport"
	CreditsService_GetCreditUsageReportPDF_FullMethodName        = "/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReportPDF"
	CreditsService_GetCreditBundleUsageProjection_FullMethodName = "/arangodb.cloud.credits.v1.CreditsService/GetCreditBundleUsageProjection"
	CreditsService_GetOrganizationCreditDebt_FullMethodName      = "/arangodb.cloud.credits.v1.CreditsService/GetOrganizationCreditDebt"
)

// CreditsServiceClient is the client API for CreditsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CreditsService is the API used for managing credits.
type CreditsServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None (authenticated only)
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// List credit bundles for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundle.list on the organization identified by the given organization ID
	ListCreditBundles(ctx context.Context, in *ListCreditBundlesRequest, opts ...grpc.CallOption) (*CreditBundlesList, error)
	// List credit bundle usages for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundleusage.list on the organization identified by the given organization ID.
	ListCreditBundlesUsage(ctx context.Context, in *ListCreditBundleUsageRequest, opts ...grpc.CallOption) (*CreditBundleUsageList, error)
	// List the credit reports for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - credit.creditusagereport.list on the organization identified by the given organization ID
	ListCreditUsageReports(ctx context.Context, in *ListCreditUsageReportsRequest, opts ...grpc.CallOption) (*CreditUsageReportList, error)
	// Get a credit usage report identified by the given ID.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReport(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditUsageReport, error)
	// Get a credit usage report identified by the given ID, as a PDF document.
	// The server sends the PDF over a stream once rendered.
	// The stream is closed after the PDF is sent.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReportPDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PDFDocument], error)
	// Get credit usage projection for an organization identified by the given organization ID.
	// This will return a projected credit usage for each month in the future, until the credits run out.
	// Required permissions:
	// - credit.creditbundleusageprojection.get on the organization identified by the given organization ID.
	GetCreditBundleUsageProjection(ctx context.Context, in *GetCreditBundleUsageProjectionRequest, opts ...grpc.CallOption) (*CreditBundleUsageProjection, error)
	// Get the total amount of credit debt accrued by an organization identified by the ID.
	// An organization starts accumulating debt from the moment it runs out of credits.
	// The debt is paid off upon purchasing additional credit bundles.
	// Note: debt usage is allowed only for a limited period of time, after which the organization's deployments are paused.
	// Required permissions:
	// - credit.creditdebt.get on the organization identified by the given organization ID.
	GetOrganizationCreditDebt(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditDebt, error)
}

type creditsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditsServiceClient(cc grpc.ClientConnInterface) CreditsServiceClient {
	return &creditsServiceClient{cc}
}

func (c *creditsServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, CreditsService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) ListCreditBundles(ctx context.Context, in *ListCreditBundlesRequest, opts ...grpc.CallOption) (*CreditBundlesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditBundlesList)
	err := c.cc.Invoke(ctx, CreditsService_ListCreditBundles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) ListCreditBundlesUsage(ctx context.Context, in *ListCreditBundleUsageRequest, opts ...grpc.CallOption) (*CreditBundleUsageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditBundleUsageList)
	err := c.cc.Invoke(ctx, CreditsService_ListCreditBundlesUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) ListCreditUsageReports(ctx context.Context, in *ListCreditUsageReportsRequest, opts ...grpc.CallOption) (*CreditUsageReportList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditUsageReportList)
	err := c.cc.Invoke(ctx, CreditsService_ListCreditUsageReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) GetCreditUsageReport(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditUsageReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditUsageReport)
	err := c.cc.Invoke(ctx, CreditsService_GetCreditUsageReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) GetCreditUsageReportPDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PDFDocument], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CreditsService_ServiceDesc.Streams[0], CreditsService_GetCreditUsageReportPDF_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.IDOptions, PDFDocument]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CreditsService_GetCreditUsageReportPDFClient = grpc.ServerStreamingClient[PDFDocument]

func (c *creditsServiceClient) GetCreditBundleUsageProjection(ctx context.Context, in *GetCreditBundleUsageProjectionRequest, opts ...grpc.CallOption) (*CreditBundleUsageProjection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditBundleUsageProjection)
	err := c.cc.Invoke(ctx, CreditsService_GetCreditBundleUsageProjection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceClient) GetOrganizationCreditDebt(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*CreditDebt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditDebt)
	err := c.cc.Invoke(ctx, CreditsService_GetOrganizationCreditDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditsServiceServer is the server API for CreditsService service.
// All implementations must embed UnimplementedCreditsServiceServer
// for forward compatibility.
//
// CreditsService is the API used for managing credits.
type CreditsServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None (authenticated only)
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// List credit bundles for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundle.list on the organization identified by the given organization ID
	ListCreditBundles(context.Context, *ListCreditBundlesRequest) (*CreditBundlesList, error)
	// List credit bundle usages for an organization based on the provided request.
	// Required permissions:
	// - credit.creditbundleusage.list on the organization identified by the given organization ID.
	ListCreditBundlesUsage(context.Context, *ListCreditBundleUsageRequest) (*CreditBundleUsageList, error)
	// List the credit reports for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - credit.creditusagereport.list on the organization identified by the given organization ID
	ListCreditUsageReports(context.Context, *ListCreditUsageReportsRequest) (*CreditUsageReportList, error)
	// Get a credit usage report identified by the given ID.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReport(context.Context, *v1.IDOptions) (*CreditUsageReport, error)
	// Get a credit usage report identified by the given ID, as a PDF document.
	// The server sends the PDF over a stream once rendered.
	// The stream is closed after the PDF is sent.
	// Required permissions:
	// - credit.creditusagereport.get on the organization that owns the report.
	GetCreditUsageReportPDF(*v1.IDOptions, grpc.ServerStreamingServer[PDFDocument]) error
	// Get credit usage projection for an organization identified by the given organization ID.
	// This will return a projected credit usage for each month in the future, until the credits run out.
	// Required permissions:
	// - credit.creditbundleusageprojection.get on the organization identified by the given organization ID.
	GetCreditBundleUsageProjection(context.Context, *GetCreditBundleUsageProjectionRequest) (*CreditBundleUsageProjection, error)
	// Get the total amount of credit debt accrued by an organization identified by the ID.
	// An organization starts accumulating debt from the moment it runs out of credits.
	// The debt is paid off upon purchasing additional credit bundles.
	// Note: debt usage is allowed only for a limited period of time, after which the organization's deployments are paused.
	// Required permissions:
	// - credit.creditdebt.get on the organization identified by the given organization ID.
	GetOrganizationCreditDebt(context.Context, *v1.IDOptions) (*CreditDebt, error)
	mustEmbedUnimplementedCreditsServiceServer()
}

// UnimplementedCreditsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditsServiceServer struct{}

func (UnimplementedCreditsServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedCreditsServiceServer) ListCreditBundles(context.Context, *ListCreditBundlesRequest) (*CreditBundlesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditBundles not implemented")
}
func (UnimplementedCreditsServiceServer) ListCreditBundlesUsage(context.Context, *ListCreditBundleUsageRequest) (*CreditBundleUsageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditBundlesUsage not implemented")
}
func (UnimplementedCreditsServiceServer) ListCreditUsageReports(context.Context, *ListCreditUsageReportsRequest) (*CreditUsageReportList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditUsageReports not implemented")
}
func (UnimplementedCreditsServiceServer) GetCreditUsageReport(context.Context, *v1.IDOptions) (*CreditUsageReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditUsageReport not implemented")
}
func (UnimplementedCreditsServiceServer) GetCreditUsageReportPDF(*v1.IDOptions, grpc.ServerStreamingServer[PDFDocument]) error {
	return status.Errorf(codes.Unimplemented, "method GetCreditUsageReportPDF not implemented")
}
func (UnimplementedCreditsServiceServer) GetCreditBundleUsageProjection(context.Context, *GetCreditBundleUsageProjectionRequest) (*CreditBundleUsageProjection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditBundleUsageProjection not implemented")
}
func (UnimplementedCreditsServiceServer) GetOrganizationCreditDebt(context.Context, *v1.IDOptions) (*CreditDebt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationCreditDebt not implemented")
}
func (UnimplementedCreditsServiceServer) mustEmbedUnimplementedCreditsServiceServer() {}
func (UnimplementedCreditsServiceServer) testEmbeddedByValue()                        {}

// UnsafeCreditsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditsServiceServer will
// result in compilation errors.
type UnsafeCreditsServiceServer interface {
	mustEmbedUnimplementedCreditsServiceServer()
}

func RegisterCreditsServiceServer(s grpc.ServiceRegistrar, srv CreditsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditsService_ServiceDesc, srv)
}

func _CreditsService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_ListCreditBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).ListCreditBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsService_ListCreditBundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).ListCreditBundles(ctx, req.(*ListCreditBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_ListCreditBundlesUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditBundleUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).ListCreditBundlesUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsService_ListCreditBundlesUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).ListCreditBundlesUsage(ctx, req.(*ListCreditBundleUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_ListCreditUsageReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditUsageReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).ListCreditUsageReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsService_ListCreditUsageReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).ListCreditUsageReports(ctx, req.(*ListCreditUsageReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_GetCreditUsageReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetCreditUsageReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsService_GetCreditUsageReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetCreditUsageReport(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_GetCreditUsageReportPDF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.IDOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CreditsServiceServer).GetCreditUsageReportPDF(m, &grpc.GenericServerStream[v1.IDOptions, PDFDocument]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CreditsService_GetCreditUsageReportPDFServer = grpc.ServerStreamingServer[PDFDocument]

func _CreditsService_GetCreditBundleUsageProjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditBundleUsageProjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetCreditBundleUsageProjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsService_GetCreditBundleUsageProjection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetCreditBundleUsageProjection(ctx, req.(*GetCreditBundleUsageProjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsService_GetOrganizationCreditDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceServer).GetOrganizationCreditDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsService_GetOrganizationCreditDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceServer).GetOrganizationCreditDebt(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditsService_ServiceDesc is the grpc.ServiceDesc for CreditsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.credits.v1.CreditsService",
	HandlerType: (*CreditsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _CreditsService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListCreditBundles",
			Handler:    _CreditsService_ListCreditBundles_Handler,
		},
		{
			MethodName: "ListCreditBundlesUsage",
			Handler:    _CreditsService_ListCreditBundlesUsage_Handler,
		},
		{
			MethodName: "ListCreditUsageReports",
			Handler:    _CreditsService_ListCreditUsageReports_Handler,
		},
		{
			MethodName: "GetCreditUsageReport",
			Handler:    _CreditsService_GetCreditUsageReport_Handler,
		},
		{
			MethodName: "GetCreditBundleUsageProjection",
			Handler:    _CreditsService_GetCreditBundleUsageProjection_Handler,
		},
		{
			MethodName: "GetOrganizationCreditDebt",
			Handler:    _CreditsService_GetOrganizationCreditDebt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCreditUsageReportPDF",
			Handler:       _CreditsService_GetCreditUsageReportPDF_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "credits.proto",
}
