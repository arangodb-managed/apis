//
// DISCLAIMER
//
// Copyright 2020-2022 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: audit.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AuditLog holds a specification destinations that audit events should be
// sent to and it acts as a grouping of audit log archives.
type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this resource.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Name of the audit log
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the audit log
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The creation timestamp of the resource
	// This is a read-only value.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the resource
	// This is a read-only value.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this resource is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Identifier of the user who created this resource.
	// This is a read-only value.
	CreatedById string `protobuf:"bytes,8,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// Identifier of the organization that owns this audit log.
	// After creation, this value cannot be changed.
	OrganizationId string `protobuf:"bytes,9,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// If set, this AuditLog is the default for the organization.
	// This is a read-only value.
	// The default AuditLog for an organization is used to capture audit events
	// from the ArangoGraph Insights Platform. If there is no default AuditLog, audit events
	// from the ArangoGraph Insights Platform are not captured.
	// The default AuditLog is also attached to new projects in the organization.
	IsDefault bool `protobuf:"varint,10,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// Destinations that events of this AuditLog should be sent to.
	// Note that there can only be 1 destination of type "cloud".
	Destinations []*AuditLog_Destination `protobuf:"bytes,100,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0}
}

func (x *AuditLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditLog) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AuditLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuditLog) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AuditLog) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AuditLog) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *AuditLog) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *AuditLog) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *AuditLog) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *AuditLog) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *AuditLog) GetDestinations() []*AuditLog_Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

// List of AuditLog's.
type AuditLogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AuditLog `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AuditLogList) Reset() {
	*x = AuditLogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogList) ProtoMessage() {}

func (x *AuditLogList) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogList.ProtoReflect.Descriptor instead.
func (*AuditLogList) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{1}
}

func (x *AuditLogList) GetItems() []*AuditLog {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListAuditLogs
type ListAuditLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the organization to request the audit logs for.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// If set, the result includes all audit logs, including those who set to deleted,
	// however are not removed from the system currently.
	// If not set, only audit logs not indicated as deleted are returned.
	IncludeDeleted bool `protobuf:"varint,2,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
	// Optional common list options, the context_id is ignored
	Options *v1.ListOptions `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListAuditLogsRequest) Reset() {
	*x = ListAuditLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogsRequest) ProtoMessage() {}

func (x *ListAuditLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogsRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogsRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{2}
}

func (x *ListAuditLogsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListAuditLogsRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

func (x *ListAuditLogsRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// AuditLogArchive collects files of audit events in a specific region,
// usually for a specific deployment.
type AuditLogArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this resource.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// The creation timestamp of the resource
	// This is a read-only value.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the resource
	// This is a read-only value.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this resource is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Identifier of the auditlog that owns this audit log archive.
	// This is a read-only value.
	AuditlogId string `protobuf:"bytes,6,opt,name=auditlog_id,json=auditlogId,proto3" json:"auditlog_id,omitempty"`
	// If set, this archive is collecting audit events for a deployment with this ID.
	// Note that the deployment may have already been deleted.
	DeploymentId string `protobuf:"bytes,7,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Last known size of this archive in bytes.
	// Note that this field is only update periodically.
	// This is a read-only value.
	SizeInBytes uint64 `protobuf:"varint,8,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	// The timestamp of the last modification of size_in_bytes.
	// This is a read-only value.
	SizeInBytesChangedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=size_in_bytes_changed_at,json=sizeInBytesChangedAt,proto3" json:"size_in_bytes_changed_at,omitempty"`
	// If set, this archive is collecting audit events for a deployment in the project with this ID.
	// This is a read-only value.
	ProjectId string `protobuf:"bytes,10,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Last known name of the deployment identified by deployment_id.
	// This is a read-only value.
	DeploymentName string `protobuf:"bytes,11,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// Last known name of the project identified by project_id.
	// This is a read-only value.
	ProjectName string `protobuf:"bytes,12,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// If set, it is safe to delete this archive.
	// It does not mean that the caller has permission to delete the archive.
	// This is a read-only value.
	CanDelete bool `protobuf:"varint,13,opt,name=can_delete,json=canDelete,proto3" json:"can_delete,omitempty"`
}

func (x *AuditLogArchive) Reset() {
	*x = AuditLogArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogArchive) ProtoMessage() {}

func (x *AuditLogArchive) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogArchive.ProtoReflect.Descriptor instead.
func (*AuditLogArchive) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{3}
}

func (x *AuditLogArchive) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditLogArchive) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AuditLogArchive) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AuditLogArchive) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *AuditLogArchive) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *AuditLogArchive) GetAuditlogId() string {
	if x != nil {
		return x.AuditlogId
	}
	return ""
}

func (x *AuditLogArchive) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *AuditLogArchive) GetSizeInBytes() uint64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *AuditLogArchive) GetSizeInBytesChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SizeInBytesChangedAt
	}
	return nil
}

func (x *AuditLogArchive) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AuditLogArchive) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *AuditLogArchive) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *AuditLogArchive) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

// List of AuditLogArchive's.
type AuditLogArchiveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AuditLogArchive `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AuditLogArchiveList) Reset() {
	*x = AuditLogArchiveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogArchiveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogArchiveList) ProtoMessage() {}

func (x *AuditLogArchiveList) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogArchiveList.ProtoReflect.Descriptor instead.
func (*AuditLogArchiveList) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{4}
}

func (x *AuditLogArchiveList) GetItems() []*AuditLogArchive {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListAuditLogArchives
type ListAuditLogArchivesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the audit log to request the audit log archives for.
	AuditlogId string `protobuf:"bytes,1,opt,name=auditlog_id,json=auditlogId,proto3" json:"auditlog_id,omitempty"`
	// If set, the result includes all audit log archives, including those who set to deleted,
	// however are not removed from the system currently.
	// If not set, only audit log archives not indicated as deleted are returned.
	IncludeDeleted bool `protobuf:"varint,2,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
	// If set, the results will only include archive items which belong to the
	// deployment identified by this ID.
	DeploymentId string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// If set, the results will only include archive items which belong to no deployment.
	// Setting this field and specifying a deployment_id will result in an empty list.
	WithoutDeployments bool `protobuf:"varint,4,opt,name=without_deployments,json=withoutDeployments,proto3" json:"without_deployments,omitempty"`
	// If set, the results will only include archive items which belong to the
	// project identified by this ID.
	ProjectId string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Optional common list options, the context_id is ignored
	Options *v1.ListOptions `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListAuditLogArchivesRequest) Reset() {
	*x = ListAuditLogArchivesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogArchivesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogArchivesRequest) ProtoMessage() {}

func (x *ListAuditLogArchivesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogArchivesRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogArchivesRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{5}
}

func (x *ListAuditLogArchivesRequest) GetAuditlogId() string {
	if x != nil {
		return x.AuditlogId
	}
	return ""
}

func (x *ListAuditLogArchivesRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

func (x *ListAuditLogArchivesRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ListAuditLogArchivesRequest) GetWithoutDeployments() bool {
	if x != nil {
		return x.WithoutDeployments
	}
	return false
}

func (x *ListAuditLogArchivesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListAuditLogArchivesRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Single audit log event
type AuditLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When did the event happen
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Topic of the event
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// ID of the project that the event happened in (if applicable)
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the deployment that the event happened in (if applicable)
	DeploymentId string `protobuf:"bytes,4,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// ID of the server that the event happened in (if applicable)
	ServerId string `protobuf:"bytes,5,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// Instance ID of the server that the event happened in (if applicable)
	InstanceId string `protobuf:"bytes,6,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Sequence number. Must be even increasing for (deployment_id, server_id, instance_id) pairs.
	Sequence uint64 `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// ID of the user that caused the event
	UserId string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Name of database the operation is in (if applicable)
	Database string `protobuf:"bytes,9,opt,name=database,proto3" json:"database,omitempty"`
	// IP address of source of operation (if available)
	ClientIp string `protobuf:"bytes,10,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	// Authentication details
	Authentication string `protobuf:"bytes,11,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// Free format text describing the event
	Message string `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	// ID of the AuditLogArchive that contains this event (if applicable)
	AuditlogarchiveId string `protobuf:"bytes,13,opt,name=auditlogarchive_id,json=auditlogarchiveId,proto3" json:"auditlogarchive_id,omitempty"`
	// Verb of the event (if applicable)
	Verb string `protobuf:"bytes,14,opt,name=verb,proto3" json:"verb,omitempty"`
}

func (x *AuditLogEvent) Reset() {
	*x = AuditLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogEvent) ProtoMessage() {}

func (x *AuditLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogEvent.ProtoReflect.Descriptor instead.
func (*AuditLogEvent) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{6}
}

func (x *AuditLogEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AuditLogEvent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *AuditLogEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AuditLogEvent) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *AuditLogEvent) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AuditLogEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AuditLogEvent) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AuditLogEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuditLogEvent) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AuditLogEvent) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *AuditLogEvent) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

func (x *AuditLogEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AuditLogEvent) GetAuditlogarchiveId() string {
	if x != nil {
		return x.AuditlogarchiveId
	}
	return ""
}

func (x *AuditLogEvent) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

// List of AuditLogEvent's.
type AuditLogEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The audit log event items.
	Items []*AuditLogEvent `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// A cursor is opaq information to be provided by a next call to GetAuditLogEvents, to continue from this point on
	// (meaning after the last item in the provided items).
	// If the string has a non empty value there is (potentially) more data, if the string is empty (""), no more data is available.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *AuditLogEventList) Reset() {
	*x = AuditLogEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogEventList) ProtoMessage() {}

func (x *AuditLogEventList) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogEventList.ProtoReflect.Descriptor instead.
func (*AuditLogEventList) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{7}
}

func (x *AuditLogEventList) GetItems() []*AuditLogEvent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AuditLogEventList) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Request arguments for GetAuditLogEvents.
type GetAuditLogEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the audit log to request events for.
	// This field is optional when an auditlogarchive_id is specified, however if specified, it should match.
	AuditlogId string `protobuf:"bytes,1,opt,name=auditlog_id,json=auditlogId,proto3" json:"auditlog_id,omitempty"`
	// If set, include only events from this AuditLogArchive.
	// If this identifier is provided the auditlog_id is optional.
	AuditlogarchiveId string `protobuf:"bytes,2,opt,name=auditlogarchive_id,json=auditlogarchiveId,proto3" json:"auditlogarchive_id,omitempty"`
	// Request events created at or after this timestamp.
	// This is an optional field.
	From *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Request events created before this timestamp.
	// This is an optional field.
	To *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	// If non-empty, only request events with one of these topics.
	IncludedTopics []string `protobuf:"bytes,5,rep,name=included_topics,json=includedTopics,proto3" json:"included_topics,omitempty"`
	// If non-empty, leave out events with one of these topics.
	// If a topic is specified in included_topics as well as excluded_topics,
	// events of that topic will not be included in the results.
	ExcludedTopics []string `protobuf:"bytes,6,rep,name=excluded_topics,json=excludedTopics,proto3" json:"excluded_topics,omitempty"`
	// Limit the number of audit log events. Defaults to 0, meaning no limit.
	Limit int32 `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	// A cursor is opaq information provided by a previous call to GetAuditLogEvents, to continue from that point on.
	Cursor string `protobuf:"bytes,11,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *GetAuditLogEventsRequest) Reset() {
	*x = GetAuditLogEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditLogEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogEventsRequest) ProtoMessage() {}

func (x *GetAuditLogEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogEventsRequest.ProtoReflect.Descriptor instead.
func (*GetAuditLogEventsRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{8}
}

func (x *GetAuditLogEventsRequest) GetAuditlogId() string {
	if x != nil {
		return x.AuditlogId
	}
	return ""
}

func (x *GetAuditLogEventsRequest) GetAuditlogarchiveId() string {
	if x != nil {
		return x.AuditlogarchiveId
	}
	return ""
}

func (x *GetAuditLogEventsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetAuditLogEventsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetAuditLogEventsRequest) GetIncludedTopics() []string {
	if x != nil {
		return x.IncludedTopics
	}
	return nil
}

func (x *GetAuditLogEventsRequest) GetExcludedTopics() []string {
	if x != nil {
		return x.ExcludedTopics
	}
	return nil
}

func (x *GetAuditLogEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAuditLogEventsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Request arguments for DeleteAuditLogArchiveEvents.
type DeleteAuditLogArchiveEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the audit log archive to delete events from.
	AuditlogarchiveId string `protobuf:"bytes,1,opt,name=auditlogarchive_id,json=auditlogarchiveId,proto3" json:"auditlogarchive_id,omitempty"`
	// Remove events created before this timestamp.
	// Note that this timestamp will be rounded down to the nearest hour.
	To *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *DeleteAuditLogArchiveEventsRequest) Reset() {
	*x = DeleteAuditLogArchiveEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuditLogArchiveEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuditLogArchiveEventsRequest) ProtoMessage() {}

func (x *DeleteAuditLogArchiveEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuditLogArchiveEventsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAuditLogArchiveEventsRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteAuditLogArchiveEventsRequest) GetAuditlogarchiveId() string {
	if x != nil {
		return x.AuditlogarchiveId
	}
	return ""
}

func (x *DeleteAuditLogArchiveEventsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Request arguments for AttachProjectToAuditLog.
type AttachProjectToAuditLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of project to attach the AuditLog to.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ID of the AuditLog to attach.
	AuditlogId string `protobuf:"bytes,2,opt,name=auditlog_id,json=auditlogId,proto3" json:"auditlog_id,omitempty"`
}

func (x *AttachProjectToAuditLogRequest) Reset() {
	*x = AttachProjectToAuditLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachProjectToAuditLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachProjectToAuditLogRequest) ProtoMessage() {}

func (x *AttachProjectToAuditLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachProjectToAuditLogRequest.ProtoReflect.Descriptor instead.
func (*AttachProjectToAuditLogRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{10}
}

func (x *AttachProjectToAuditLogRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AttachProjectToAuditLogRequest) GetAuditlogId() string {
	if x != nil {
		return x.AuditlogId
	}
	return ""
}

// Request arguments for TestAuditLogHttpsPostDestination.
type TestAuditLogHttpsPostDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the organization.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The HTTPS post settings to test.
	Settings *AuditLog_HttpsPostSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	// Identifier of the audit log.
	// This field is optional, if specified this auditlog is used to revert the redacted content (if any).
	AuditlogId string `protobuf:"bytes,100,opt,name=auditlog_id,json=auditlogId,proto3" json:"auditlog_id,omitempty"`
	// Identifier of the destination.
	// This field is optional, if specified this identifier is used, inside the provided audit log to revert the redacted content (if any).
	DestinationId string `protobuf:"bytes,101,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *TestAuditLogHttpsPostDestinationRequest) Reset() {
	*x = TestAuditLogHttpsPostDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAuditLogHttpsPostDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAuditLogHttpsPostDestinationRequest) ProtoMessage() {}

func (x *TestAuditLogHttpsPostDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAuditLogHttpsPostDestinationRequest.ProtoReflect.Descriptor instead.
func (*TestAuditLogHttpsPostDestinationRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{11}
}

func (x *TestAuditLogHttpsPostDestinationRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *TestAuditLogHttpsPostDestinationRequest) GetSettings() *AuditLog_HttpsPostSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *TestAuditLogHttpsPostDestinationRequest) GetAuditlogId() string {
	if x != nil {
		return x.AuditlogId
	}
	return ""
}

func (x *TestAuditLogHttpsPostDestinationRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

// Result arguments for TestAuditLogHttpsPostDestination.
type TestAuditLogHttpsPostDestinationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set if this destination has errors.
	HasErrors bool `protobuf:"varint,1,opt,name=has_errors,json=hasErrors,proto3" json:"has_errors,omitempty"`
	// Human readable error message (if any).
	ErrorDetails string `protobuf:"bytes,2,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *TestAuditLogHttpsPostDestinationResult) Reset() {
	*x = TestAuditLogHttpsPostDestinationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAuditLogHttpsPostDestinationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAuditLogHttpsPostDestinationResult) ProtoMessage() {}

func (x *TestAuditLogHttpsPostDestinationResult) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAuditLogHttpsPostDestinationResult.ProtoReflect.Descriptor instead.
func (*TestAuditLogHttpsPostDestinationResult) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{12}
}

func (x *TestAuditLogHttpsPostDestinationResult) GetHasErrors() bool {
	if x != nil {
		return x.HasErrors
	}
	return false
}

func (x *TestAuditLogHttpsPostDestinationResult) GetErrorDetails() string {
	if x != nil {
		return x.ErrorDetails
	}
	return ""
}

// Information about a possible topic of an audit log event.
type AuditLogTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// If set, this topic is used in audit log events of deployments.
	ForDeployment bool `protobuf:"varint,2,opt,name=for_deployment,json=forDeployment,proto3" json:"for_deployment,omitempty"`
	// If set, this topic is used in audit log events of the ArangoGraph Insights Platform.
	ForPlatform bool `protobuf:"varint,3,opt,name=for_platform,json=forPlatform,proto3" json:"for_platform,omitempty"`
	// If set, this topic will be excluded by default when adding new destinations.
	ExcludeByDefault bool `protobuf:"varint,4,opt,name=exclude_by_default,json=excludeByDefault,proto3" json:"exclude_by_default,omitempty"`
}

func (x *AuditLogTopic) Reset() {
	*x = AuditLogTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogTopic) ProtoMessage() {}

func (x *AuditLogTopic) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogTopic.ProtoReflect.Descriptor instead.
func (*AuditLogTopic) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{13}
}

func (x *AuditLogTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *AuditLogTopic) GetForDeployment() bool {
	if x != nil {
		return x.ForDeployment
	}
	return false
}

func (x *AuditLogTopic) GetForPlatform() bool {
	if x != nil {
		return x.ForPlatform
	}
	return false
}

func (x *AuditLogTopic) GetExcludeByDefault() bool {
	if x != nil {
		return x.ExcludeByDefault
	}
	return false
}

// List of AuditLogTopic's
type AuditLogTopicList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AuditLogTopic `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AuditLogTopicList) Reset() {
	*x = AuditLogTopicList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogTopicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogTopicList) ProtoMessage() {}

func (x *AuditLogTopicList) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogTopicList.ProtoReflect.Descriptor instead.
func (*AuditLogTopicList) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{14}
}

func (x *AuditLogTopicList) GetItems() []*AuditLogTopic {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request arguments for ListAuditLogTopics.
type ListAuditLogTopicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional common list options, the context_id is ignored
	Options *v1.ListOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	// If set, only topics used in audit log events of deployments are returned.
	ForDeploymentOnly bool `protobuf:"varint,2,opt,name=for_deployment_only,json=forDeploymentOnly,proto3" json:"for_deployment_only,omitempty"`
	// If set, only topics used in audit log events of the ArangoGraph Insights Platform are returned.
	ForPlatformOnly bool `protobuf:"varint,3,opt,name=for_platform_only,json=forPlatformOnly,proto3" json:"for_platform_only,omitempty"`
}

func (x *ListAuditLogTopicsRequest) Reset() {
	*x = ListAuditLogTopicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogTopicsRequest) ProtoMessage() {}

func (x *ListAuditLogTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogTopicsRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogTopicsRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{15}
}

func (x *ListAuditLogTopicsRequest) GetOptions() *v1.ListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListAuditLogTopicsRequest) GetForDeploymentOnly() bool {
	if x != nil {
		return x.ForDeploymentOnly
	}
	return false
}

func (x *ListAuditLogTopicsRequest) GetForPlatformOnly() bool {
	if x != nil {
		return x.ForPlatformOnly
	}
	return false
}

// Request arguments for SetDefaultAuditLog.
type SetDefaultAuditLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the organization to set the default for.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Identifier of the new default auditlog.
	// If empty, there will be no default auditlog for the organization.
	AuditlogId string `protobuf:"bytes,2,opt,name=auditlog_id,json=auditlogId,proto3" json:"auditlog_id,omitempty"`
}

func (x *SetDefaultAuditLogRequest) Reset() {
	*x = SetDefaultAuditLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultAuditLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultAuditLogRequest) ProtoMessage() {}

func (x *SetDefaultAuditLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultAuditLogRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultAuditLogRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{16}
}

func (x *SetDefaultAuditLogRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *SetDefaultAuditLogRequest) GetAuditlogId() string {
	if x != nil {
		return x.AuditlogId
	}
	return ""
}

// Settings for a destination of type "https-post"
type AuditLog_HttpsPostSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the server to POST to.
	// The scheme of the URL must be "https".
	// The used URLs within a single audit log should be unique.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// PEM encoded public key of the CA used to sign
	// the server TLS certificate.
	// This public key will be used to verify the
	// TLS connection provided by the server.
	// If this field is empty, a well known CA is expected.
	TrustedServerCaPem string `protobuf:"bytes,2,opt,name=trusted_server_ca_pem,json=trustedServerCaPem,proto3" json:"trusted_server_ca_pem,omitempty"`
	// PEM encoded public key of the client certificate
	// used to make the request.
	ClientCertificatePem string `protobuf:"bytes,3,opt,name=client_certificate_pem,json=clientCertificatePem,proto3" json:"client_certificate_pem,omitempty"`
	// PEM encoded private key of the client certificate
	// used to make the request.
	// This is a write-only value.
	ClientKeyPem string `protobuf:"bytes,4,opt,name=client_key_pem,json=clientKeyPem,proto3" json:"client_key_pem,omitempty"`
	// HTTP headers to add to the request.
	// It is allowed to pass multiple headers with the same key.
	Headers []*AuditLog_Header `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	// The period this https-post destination will retry to deliver audit events.
	// Not specifying this value will default to 4 hours, the maximum allowed value is 24 hours.
	// When this time is exceeded for an event this event will be discarded, however newer events will still be delivered.
	RetryPeriod *durationpb.Duration `protobuf:"bytes,200,opt,name=retry_period,json=retryPeriod,proto3" json:"retry_period,omitempty"`
}

func (x *AuditLog_HttpsPostSettings) Reset() {
	*x = AuditLog_HttpsPostSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog_HttpsPostSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog_HttpsPostSettings) ProtoMessage() {}

func (x *AuditLog_HttpsPostSettings) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog_HttpsPostSettings.ProtoReflect.Descriptor instead.
func (*AuditLog_HttpsPostSettings) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AuditLog_HttpsPostSettings) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AuditLog_HttpsPostSettings) GetTrustedServerCaPem() string {
	if x != nil {
		return x.TrustedServerCaPem
	}
	return ""
}

func (x *AuditLog_HttpsPostSettings) GetClientCertificatePem() string {
	if x != nil {
		return x.ClientCertificatePem
	}
	return ""
}

func (x *AuditLog_HttpsPostSettings) GetClientKeyPem() string {
	if x != nil {
		return x.ClientKeyPem
	}
	return ""
}

func (x *AuditLog_HttpsPostSettings) GetHeaders() []*AuditLog_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *AuditLog_HttpsPostSettings) GetRetryPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetryPeriod
	}
	return nil
}

// HTTP header pair
type AuditLog_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key of the header
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value of the header
	// This is a write-only value.
	// On read requests, the value is mangled to something like "abc..."
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AuditLog_Header) Reset() {
	*x = AuditLog_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog_Header) ProtoMessage() {}

func (x *AuditLog_Header) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog_Header.ProtoReflect.Descriptor instead.
func (*AuditLog_Header) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AuditLog_Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AuditLog_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The status of a destination for audit events (for a deployment).
// All fields in this message are read-only values.
type AuditLog_DestinationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the deployment that the status applied to (if applicable)
	// The deployment ID of the status is optional, inside the list at most
	// one destination status is allowed to be empty, meaning the ArangoGraph Insights Platform status,
	// all others will be bound to a specific deployment as indicated by this ID.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Set if this destination (for the provided deployment) has errors.
	HasErrors bool `protobuf:"varint,2,opt,name=has_errors,json=hasErrors,proto3" json:"has_errors,omitempty"`
	// Human readable error message (if any).
	ErrorDetails string `protobuf:"bytes,3,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
	// The counters of a destination for audit events (for the provided deployment) for today since midnight.
	// The fields inside this message will be reset at midnight UTC.
	// The updated_at timestamp will be used as baseline for the time.
	CountersSinceMidnight *AuditLog_DestinationCounters `protobuf:"bytes,10,opt,name=counters_since_midnight,json=countersSinceMidnight,proto3" json:"counters_since_midnight,omitempty"`
	// The counters of a destination for audit events (for the provided deployment) for yesterday.
	// The updated_at timestamp will be used as baseline for the time.
	CountersYesterday *AuditLog_DestinationCounters `protobuf:"bytes,11,opt,name=counters_yesterday,json=countersYesterday,proto3" json:"counters_yesterday,omitempty"`
	// Timestamp when this status has been last updated.
	// This is used as baseline for the counters_since_midnight and counters_yesterday fields.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Last known name of the deployment identified by deployment_id (if any).
	// This is a read-only value.
	DeploymentName string `protobuf:"bytes,101,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
}

func (x *AuditLog_DestinationStatus) Reset() {
	*x = AuditLog_DestinationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog_DestinationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog_DestinationStatus) ProtoMessage() {}

func (x *AuditLog_DestinationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog_DestinationStatus.ProtoReflect.Descriptor instead.
func (*AuditLog_DestinationStatus) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AuditLog_DestinationStatus) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *AuditLog_DestinationStatus) GetHasErrors() bool {
	if x != nil {
		return x.HasErrors
	}
	return false
}

func (x *AuditLog_DestinationStatus) GetErrorDetails() string {
	if x != nil {
		return x.ErrorDetails
	}
	return ""
}

func (x *AuditLog_DestinationStatus) GetCountersSinceMidnight() *AuditLog_DestinationCounters {
	if x != nil {
		return x.CountersSinceMidnight
	}
	return nil
}

func (x *AuditLog_DestinationStatus) GetCountersYesterday() *AuditLog_DestinationCounters {
	if x != nil {
		return x.CountersYesterday
	}
	return nil
}

func (x *AuditLog_DestinationStatus) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AuditLog_DestinationStatus) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

// The counters of a destination for audit events (for the provided deployment).
// All fields in this message are read-only values.
type AuditLog_DestinationCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of audit log events this destination has been processed.
	// This number will not include the excluded events, so contain events which are relevant after filtering only.
	Events int64 `protobuf:"varint,1,opt,name=events,proto3" json:"events,omitempty"`
	// The number of audit log events this destination has been excluded based on the provided 'excluded_topics' filter.
	EventsExcluded int64 `protobuf:"varint,2,opt,name=events_excluded,json=eventsExcluded,proto3" json:"events_excluded,omitempty"`
	// The number of undeliverable audit log events for this destination.
	// Undeliverable means that they are removed without being successfully processed, retries are not taken into account here.
	EventsUndeliverable int64 `protobuf:"varint,3,opt,name=events_undeliverable,json=eventsUndeliverable,proto3" json:"events_undeliverable,omitempty"`
	// The bytes of successfull audit log events this destination has been processed.
	BytesSucceeded int64 `protobuf:"varint,10,opt,name=bytes_succeeded,json=bytesSucceeded,proto3" json:"bytes_succeeded,omitempty"`
	// The bytes of unsuccessfull audit log events this destination has been trying to process.
	// This include retries, however not any filtered events or undeliverable events which are discarded based on retry_period period without being ever sent.
	BytesFailed int64 `protobuf:"varint,11,opt,name=bytes_failed,json=bytesFailed,proto3" json:"bytes_failed,omitempty"`
	// The number of successfull HTTPS posts this destination has been sent.
	// An HTTPS POST request is considered successful when a status code between 200 and 299 is returned.
	// This field is used when the destination type is "https-post" only.
	HttpsPostsSucceeded int64 `protobuf:"varint,20,opt,name=https_posts_succeeded,json=httpsPostsSucceeded,proto3" json:"https_posts_succeeded,omitempty"`
	// The number of unsuccessfull HTTPS posts this destination has been trying to sent.
	// This field is used when the destination type is "https-post" only.
	HttpsPostsFailed int64 `protobuf:"varint,21,opt,name=https_posts_failed,json=httpsPostsFailed,proto3" json:"https_posts_failed,omitempty"`
}

func (x *AuditLog_DestinationCounters) Reset() {
	*x = AuditLog_DestinationCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog_DestinationCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog_DestinationCounters) ProtoMessage() {}

func (x *AuditLog_DestinationCounters) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog_DestinationCounters.ProtoReflect.Descriptor instead.
func (*AuditLog_DestinationCounters) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AuditLog_DestinationCounters) GetEvents() int64 {
	if x != nil {
		return x.Events
	}
	return 0
}

func (x *AuditLog_DestinationCounters) GetEventsExcluded() int64 {
	if x != nil {
		return x.EventsExcluded
	}
	return 0
}

func (x *AuditLog_DestinationCounters) GetEventsUndeliverable() int64 {
	if x != nil {
		return x.EventsUndeliverable
	}
	return 0
}

func (x *AuditLog_DestinationCounters) GetBytesSucceeded() int64 {
	if x != nil {
		return x.BytesSucceeded
	}
	return 0
}

func (x *AuditLog_DestinationCounters) GetBytesFailed() int64 {
	if x != nil {
		return x.BytesFailed
	}
	return 0
}

func (x *AuditLog_DestinationCounters) GetHttpsPostsSucceeded() int64 {
	if x != nil {
		return x.HttpsPostsSucceeded
	}
	return 0
}

func (x *AuditLog_DestinationCounters) GetHttpsPostsFailed() int64 {
	if x != nil {
		return x.HttpsPostsFailed
	}
	return 0
}

// Specification of a destination for audit events.
type AuditLog_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of destination.
	// Possible values are: "cloud", "https-post"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Do not send audit events with these topics to this destination.
	ExcludedTopics []string `protobuf:"bytes,2,rep,name=excluded_topics,json=excludedTopics,proto3" json:"excluded_topics,omitempty"`
	// Settings for destinations of type "https-post"
	HttpPost *AuditLog_HttpsPostSettings `protobuf:"bytes,10,opt,name=http_post,json=httpPost,proto3" json:"http_post,omitempty"`
	// Status of this destination (per deployment)
	// This is a read-only value.
	Statuses []*AuditLog_DestinationStatus `protobuf:"bytes,100,rep,name=Statuses,proto3" json:"Statuses,omitempty"`
	// Identifier of this destination.
	// This is a read-only value. To ensure matching updates of destinations,
	// include this field in calls to UpdateAuditLog and TestAuditLogHttpsPostDestination.
	Id string `protobuf:"bytes,101,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuditLog_Destination) Reset() {
	*x = AuditLog_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog_Destination) ProtoMessage() {}

func (x *AuditLog_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog_Destination.ProtoReflect.Descriptor instead.
func (*AuditLog_Destination) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AuditLog_Destination) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuditLog_Destination) GetExcludedTopics() []string {
	if x != nil {
		return x.ExcludedTopics
	}
	return nil
}

func (x *AuditLog_Destination) GetHttpPost() *AuditLog_HttpsPostSettings {
	if x != nil {
		return x.HttpPost
	}
	return nil
}

func (x *AuditLog_Destination) GetStatuses() []*AuditLog_DestinationStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *AuditLog_Destination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_audit_proto protoreflect.FileDescriptor

var file_audit_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x0e,
	0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb7, 0x02, 0x0a, 0x11, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x31,
	0x0a, 0x15, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x50, 0x65,
	0x6d, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x42, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x1a, 0x30, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xb5, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x6d, 0x0a, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x64, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x79, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x59, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xb7, 0x02, 0x0a, 0x13, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x1a, 0xfd, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x50, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x04, 0x0a, 0x0f, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x18, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x73, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x13,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xd4, 0x03, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x22, 0x69, 0x0a, 0x11, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xc6, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f,
	0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x7f,
	0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x60, 0x0a, 0x1e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x6f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x22, 0xeb, 0x01, 0x0a, 0x27, 0x54, 0x65, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x48, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x6c, 0x0a, 0x26, 0x54, 0x65, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x48,
	0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68,
	0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9d, 0x01,
	0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66,
	0x6f, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x51, 0x0a,
	0x11, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xb8, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x6f,
	0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x65, 0x0a, 0x19, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x49, 0x64, 0x32, 0xae, 0x15, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x92, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x12, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x7b, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x1a, 0x21, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x22,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x32, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x39,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0xe6, 0x01, 0x0a, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x74, 0x74, 0x70, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x74, 0x74, 0x70, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6c, 0x6f, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x30, 0x01, 0x12, 0xba, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x73,
	0x2f, 0x7b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x12,
	0x90, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x28, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x6c, 0x6f, 0x67, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x23, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xc2, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x2a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x30, 0x01, 0x12, 0x94, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x12, 0xc2, 0x01, 0x0a, 0x17,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x12, 0x90, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x23,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audit_proto_rawDescOnce sync.Once
	file_audit_proto_rawDescData = file_audit_proto_rawDesc
)

func file_audit_proto_rawDescGZIP() []byte {
	file_audit_proto_rawDescOnce.Do(func() {
		file_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_audit_proto_rawDescData)
	})
	return file_audit_proto_rawDescData
}

var file_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_audit_proto_goTypes = []interface{}{
	(*AuditLog)(nil),                                // 0: arangodb.cloud.audit.v1.AuditLog
	(*AuditLogList)(nil),                            // 1: arangodb.cloud.audit.v1.AuditLogList
	(*ListAuditLogsRequest)(nil),                    // 2: arangodb.cloud.audit.v1.ListAuditLogsRequest
	(*AuditLogArchive)(nil),                         // 3: arangodb.cloud.audit.v1.AuditLogArchive
	(*AuditLogArchiveList)(nil),                     // 4: arangodb.cloud.audit.v1.AuditLogArchiveList
	(*ListAuditLogArchivesRequest)(nil),             // 5: arangodb.cloud.audit.v1.ListAuditLogArchivesRequest
	(*AuditLogEvent)(nil),                           // 6: arangodb.cloud.audit.v1.AuditLogEvent
	(*AuditLogEventList)(nil),                       // 7: arangodb.cloud.audit.v1.AuditLogEventList
	(*GetAuditLogEventsRequest)(nil),                // 8: arangodb.cloud.audit.v1.GetAuditLogEventsRequest
	(*DeleteAuditLogArchiveEventsRequest)(nil),      // 9: arangodb.cloud.audit.v1.DeleteAuditLogArchiveEventsRequest
	(*AttachProjectToAuditLogRequest)(nil),          // 10: arangodb.cloud.audit.v1.AttachProjectToAuditLogRequest
	(*TestAuditLogHttpsPostDestinationRequest)(nil), // 11: arangodb.cloud.audit.v1.TestAuditLogHttpsPostDestinationRequest
	(*TestAuditLogHttpsPostDestinationResult)(nil),  // 12: arangodb.cloud.audit.v1.TestAuditLogHttpsPostDestinationResult
	(*AuditLogTopic)(nil),                           // 13: arangodb.cloud.audit.v1.AuditLogTopic
	(*AuditLogTopicList)(nil),                       // 14: arangodb.cloud.audit.v1.AuditLogTopicList
	(*ListAuditLogTopicsRequest)(nil),               // 15: arangodb.cloud.audit.v1.ListAuditLogTopicsRequest
	(*SetDefaultAuditLogRequest)(nil),               // 16: arangodb.cloud.audit.v1.SetDefaultAuditLogRequest
	(*AuditLog_HttpsPostSettings)(nil),              // 17: arangodb.cloud.audit.v1.AuditLog.HttpsPostSettings
	(*AuditLog_Header)(nil),                         // 18: arangodb.cloud.audit.v1.AuditLog.Header
	(*AuditLog_DestinationStatus)(nil),              // 19: arangodb.cloud.audit.v1.AuditLog.DestinationStatus
	(*AuditLog_DestinationCounters)(nil),            // 20: arangodb.cloud.audit.v1.AuditLog.DestinationCounters
	(*AuditLog_Destination)(nil),                    // 21: arangodb.cloud.audit.v1.AuditLog.Destination
	(*timestamppb.Timestamp)(nil),                   // 22: google.protobuf.Timestamp
	(*v1.ListOptions)(nil),                          // 23: arangodb.cloud.common.v1.ListOptions
	(*durationpb.Duration)(nil),                     // 24: google.protobuf.Duration
	(*v1.Empty)(nil),                                // 25: arangodb.cloud.common.v1.Empty
	(*v1.IDOptions)(nil),                            // 26: arangodb.cloud.common.v1.IDOptions
	(*v1.Version)(nil),                              // 27: arangodb.cloud.common.v1.Version
}
var file_audit_proto_depIdxs = []int32{
	22, // 0: arangodb.cloud.audit.v1.AuditLog.created_at:type_name -> google.protobuf.Timestamp
	22, // 1: arangodb.cloud.audit.v1.AuditLog.deleted_at:type_name -> google.protobuf.Timestamp
	21, // 2: arangodb.cloud.audit.v1.AuditLog.destinations:type_name -> arangodb.cloud.audit.v1.AuditLog.Destination
	0,  // 3: arangodb.cloud.audit.v1.AuditLogList.items:type_name -> arangodb.cloud.audit.v1.AuditLog
	23, // 4: arangodb.cloud.audit.v1.ListAuditLogsRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	22, // 5: arangodb.cloud.audit.v1.AuditLogArchive.created_at:type_name -> google.protobuf.Timestamp
	22, // 6: arangodb.cloud.audit.v1.AuditLogArchive.deleted_at:type_name -> google.protobuf.Timestamp
	22, // 7: arangodb.cloud.audit.v1.AuditLogArchive.size_in_bytes_changed_at:type_name -> google.protobuf.Timestamp
	3,  // 8: arangodb.cloud.audit.v1.AuditLogArchiveList.items:type_name -> arangodb.cloud.audit.v1.AuditLogArchive
	23, // 9: arangodb.cloud.audit.v1.ListAuditLogArchivesRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	22, // 10: arangodb.cloud.audit.v1.AuditLogEvent.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 11: arangodb.cloud.audit.v1.AuditLogEventList.items:type_name -> arangodb.cloud.audit.v1.AuditLogEvent
	22, // 12: arangodb.cloud.audit.v1.GetAuditLogEventsRequest.from:type_name -> google.protobuf.Timestamp
	22, // 13: arangodb.cloud.audit.v1.GetAuditLogEventsRequest.to:type_name -> google.protobuf.Timestamp
	22, // 14: arangodb.cloud.audit.v1.DeleteAuditLogArchiveEventsRequest.to:type_name -> google.protobuf.Timestamp
	17, // 15: arangodb.cloud.audit.v1.TestAuditLogHttpsPostDestinationRequest.settings:type_name -> arangodb.cloud.audit.v1.AuditLog.HttpsPostSettings
	13, // 16: arangodb.cloud.audit.v1.AuditLogTopicList.items:type_name -> arangodb.cloud.audit.v1.AuditLogTopic
	23, // 17: arangodb.cloud.audit.v1.ListAuditLogTopicsRequest.options:type_name -> arangodb.cloud.common.v1.ListOptions
	18, // 18: arangodb.cloud.audit.v1.AuditLog.HttpsPostSettings.headers:type_name -> arangodb.cloud.audit.v1.AuditLog.Header
	24, // 19: arangodb.cloud.audit.v1.AuditLog.HttpsPostSettings.retry_period:type_name -> google.protobuf.Duration
	20, // 20: arangodb.cloud.audit.v1.AuditLog.DestinationStatus.counters_since_midnight:type_name -> arangodb.cloud.audit.v1.AuditLog.DestinationCounters
	20, // 21: arangodb.cloud.audit.v1.AuditLog.DestinationStatus.counters_yesterday:type_name -> arangodb.cloud.audit.v1.AuditLog.DestinationCounters
	22, // 22: arangodb.cloud.audit.v1.AuditLog.DestinationStatus.updated_at:type_name -> google.protobuf.Timestamp
	17, // 23: arangodb.cloud.audit.v1.AuditLog.Destination.http_post:type_name -> arangodb.cloud.audit.v1.AuditLog.HttpsPostSettings
	19, // 24: arangodb.cloud.audit.v1.AuditLog.Destination.Statuses:type_name -> arangodb.cloud.audit.v1.AuditLog.DestinationStatus
	25, // 25: arangodb.cloud.audit.v1.AuditService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	15, // 26: arangodb.cloud.audit.v1.AuditService.ListAuditLogTopics:input_type -> arangodb.cloud.audit.v1.ListAuditLogTopicsRequest
	2,  // 27: arangodb.cloud.audit.v1.AuditService.ListAuditLogs:input_type -> arangodb.cloud.audit.v1.ListAuditLogsRequest
	26, // 28: arangodb.cloud.audit.v1.AuditService.GetAuditLog:input_type -> arangodb.cloud.common.v1.IDOptions
	0,  // 29: arangodb.cloud.audit.v1.AuditService.CreateAuditLog:input_type -> arangodb.cloud.audit.v1.AuditLog
	0,  // 30: arangodb.cloud.audit.v1.AuditService.UpdateAuditLog:input_type -> arangodb.cloud.audit.v1.AuditLog
	26, // 31: arangodb.cloud.audit.v1.AuditService.DeleteAuditLog:input_type -> arangodb.cloud.common.v1.IDOptions
	16, // 32: arangodb.cloud.audit.v1.AuditService.SetDefaultAuditLog:input_type -> arangodb.cloud.audit.v1.SetDefaultAuditLogRequest
	11, // 33: arangodb.cloud.audit.v1.AuditService.TestAuditLogHttpsPostDestination:input_type -> arangodb.cloud.audit.v1.TestAuditLogHttpsPostDestinationRequest
	5,  // 34: arangodb.cloud.audit.v1.AuditService.ListAuditLogArchives:input_type -> arangodb.cloud.audit.v1.ListAuditLogArchivesRequest
	26, // 35: arangodb.cloud.audit.v1.AuditService.GetAuditLogArchive:input_type -> arangodb.cloud.common.v1.IDOptions
	26, // 36: arangodb.cloud.audit.v1.AuditService.DeleteAuditLogArchive:input_type -> arangodb.cloud.common.v1.IDOptions
	9,  // 37: arangodb.cloud.audit.v1.AuditService.DeleteAuditLogArchiveEvents:input_type -> arangodb.cloud.audit.v1.DeleteAuditLogArchiveEventsRequest
	8,  // 38: arangodb.cloud.audit.v1.AuditService.GetAuditLogEvents:input_type -> arangodb.cloud.audit.v1.GetAuditLogEventsRequest
	26, // 39: arangodb.cloud.audit.v1.AuditService.GetAuditLogAttachedToProject:input_type -> arangodb.cloud.common.v1.IDOptions
	10, // 40: arangodb.cloud.audit.v1.AuditService.AttachProjectToAuditLog:input_type -> arangodb.cloud.audit.v1.AttachProjectToAuditLogRequest
	26, // 41: arangodb.cloud.audit.v1.AuditService.DetachProjectFromAuditLog:input_type -> arangodb.cloud.common.v1.IDOptions
	27, // 42: arangodb.cloud.audit.v1.AuditService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	14, // 43: arangodb.cloud.audit.v1.AuditService.ListAuditLogTopics:output_type -> arangodb.cloud.audit.v1.AuditLogTopicList
	1,  // 44: arangodb.cloud.audit.v1.AuditService.ListAuditLogs:output_type -> arangodb.cloud.audit.v1.AuditLogList
	0,  // 45: arangodb.cloud.audit.v1.AuditService.GetAuditLog:output_type -> arangodb.cloud.audit.v1.AuditLog
	0,  // 46: arangodb.cloud.audit.v1.AuditService.CreateAuditLog:output_type -> arangodb.cloud.audit.v1.AuditLog
	0,  // 47: arangodb.cloud.audit.v1.AuditService.UpdateAuditLog:output_type -> arangodb.cloud.audit.v1.AuditLog
	25, // 48: arangodb.cloud.audit.v1.AuditService.DeleteAuditLog:output_type -> arangodb.cloud.common.v1.Empty
	25, // 49: arangodb.cloud.audit.v1.AuditService.SetDefaultAuditLog:output_type -> arangodb.cloud.common.v1.Empty
	12, // 50: arangodb.cloud.audit.v1.AuditService.TestAuditLogHttpsPostDestination:output_type -> arangodb.cloud.audit.v1.TestAuditLogHttpsPostDestinationResult
	4,  // 51: arangodb.cloud.audit.v1.AuditService.ListAuditLogArchives:output_type -> arangodb.cloud.audit.v1.AuditLogArchiveList
	3,  // 52: arangodb.cloud.audit.v1.AuditService.GetAuditLogArchive:output_type -> arangodb.cloud.audit.v1.AuditLogArchive
	25, // 53: arangodb.cloud.audit.v1.AuditService.DeleteAuditLogArchive:output_type -> arangodb.cloud.common.v1.Empty
	25, // 54: arangodb.cloud.audit.v1.AuditService.DeleteAuditLogArchiveEvents:output_type -> arangodb.cloud.common.v1.Empty
	7,  // 55: arangodb.cloud.audit.v1.AuditService.GetAuditLogEvents:output_type -> arangodb.cloud.audit.v1.AuditLogEventList
	0,  // 56: arangodb.cloud.audit.v1.AuditService.GetAuditLogAttachedToProject:output_type -> arangodb.cloud.audit.v1.AuditLog
	25, // 57: arangodb.cloud.audit.v1.AuditService.AttachProjectToAuditLog:output_type -> arangodb.cloud.common.v1.Empty
	25, // 58: arangodb.cloud.audit.v1.AuditService.DetachProjectFromAuditLog:output_type -> arangodb.cloud.common.v1.Empty
	42, // [42:59] is the sub-list for method output_type
	25, // [25:42] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_audit_proto_init() }
func file_audit_proto_init() {
	if File_audit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogArchiveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogArchivesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditLogEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuditLogArchiveEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachProjectToAuditLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAuditLogHttpsPostDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAuditLogHttpsPostDestinationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogTopicList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogTopicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultAuditLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog_HttpsPostSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog_DestinationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog_DestinationCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audit_proto_goTypes,
		DependencyIndexes: file_audit_proto_depIdxs,
		MessageInfos:      file_audit_proto_msgTypes,
	}.Build()
	File_audit_proto = out.File
	file_audit_proto_rawDesc = nil
	file_audit_proto_goTypes = nil
	file_audit_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuditServiceClient is the client API for AuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch all topics that can be found in an audit log event.
	// Required permissions:
	// - None
	ListAuditLogTopics(ctx context.Context, in *ListAuditLogTopicsRequest, opts ...grpc.CallOption) (*AuditLogTopicList, error)
	// Fetch all audit logs in the organization identified by the given ID.
	// Required permissions:
	// - audit.auditlog.list on the organization identified by the given ID.
	ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*AuditLogList, error)
	// Fetch a specific AuditLog identified by the given ID.
	// Required permissions:
	// - audit.auditlog.get on the audit log identified by the given ID.
	GetAuditLog(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*AuditLog, error)
	// Create a new audit log.
	// Required permissions:
	// - audit.auditlog.create on the organization identified by the given ID.
	CreateAuditLog(ctx context.Context, in *AuditLog, opts ...grpc.CallOption) (*AuditLog, error)
	// Update an audit log.
	// Required permissions:
	// - audit.auditlog.update on the audit log identified by the given ID.
	UpdateAuditLog(ctx context.Context, in *AuditLog, opts ...grpc.CallOption) (*AuditLog, error)
	// Delete an audit log.
	// Note that audit logs are initially only marked for deleted.
	// Once all their resources are removed the audit log itself is deleted
	// and cannot be restored.
	// Note that deleting an AuditLog will detach it from all Projects that
	// it was attached to.
	// Required permissions:
	// - audit.auditlog.delete on the audit log.
	DeleteAuditLog(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Change the default audit log of an organization.
	// The default AuditLog for an organization is used to capture audit events
	// from the ArangoGraph Insights Platform. If there is no default AuditLog, audit events
	// from the ArangoGraph Insights Platform are not captured.
	// The default AuditLog is also attached to new projects in the organization.
	// Required permissions:
	// - audit.auditlog.set-default on the organization.
	SetDefaultAuditLog(ctx context.Context, in *SetDefaultAuditLogRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Test an audit log destination of type HTTPS Post.
	// Note that only 1 item is returned, but this can take a while.
	// To recognize test events: The Topic will be "test-topic" and the Sequence 0
	// Required permissions:
	// - audit.auditlog.test-https-post-destination on the organization identified by the given ID.
	TestAuditLogHttpsPostDestination(ctx context.Context, in *TestAuditLogHttpsPostDestinationRequest, opts ...grpc.CallOption) (AuditService_TestAuditLogHttpsPostDestinationClient, error)
	// Fetch all audit log archives in the audit log identified by the given ID.
	// Required permissions:
	// - audit.auditlogarchive.list on the audit log identified by the given ID.
	ListAuditLogArchives(ctx context.Context, in *ListAuditLogArchivesRequest, opts ...grpc.CallOption) (*AuditLogArchiveList, error)
	// Fetch a specific AuditLogArchive identified by the given ID.
	// Required permissions:
	// - audit.auditlogarchive.get on the audit log archive identified by the given ID.
	GetAuditLogArchive(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*AuditLogArchive, error)
	// Delete an audit log archive.
	// Note that this method will return a precondition-failed error
	// if there is a non-deleted deployment using this archive.
	// Note that audit log archives are initially only marked for deleted.
	// Once all their resources are removed the audit log archive itself is deleted
	// and cannot be restored.
	// Required permissions:
	// - audit.auditlogarchive.delete on the audit log archive.
	DeleteAuditLogArchive(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Remove all audit events that match the given filter from the AuditLogArchive
	// identified by the given ID.
	// Note that this method will return a precondition-failed error
	// if there is no destination of type "cloud" in the AuditLog.
	// Required permissions:
	// - audit.auditlogevent.delete on the audit log archive identified by the given ID.
	DeleteAuditLogArchiveEvents(ctx context.Context, in *DeleteAuditLogArchiveEventsRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch all audit events that match the given filter.
	// Note that this method will return a precondition-failed error
	// if there is no destination of type "cloud" in the AuditLog.
	// Required permissions:
	// - audit.auditlogevents.get on the audit log identified by the given ID.
	GetAuditLogEvents(ctx context.Context, in *GetAuditLogEventsRequest, opts ...grpc.CallOption) (AuditService_GetAuditLogEventsClient, error)
	// Fetch the AuditLog that is attached to the project identified by the given ID.
	// If no AuditLog is attached to the project, a not-found error is returned.
	// Required permissions:
	// - audit.auditlogattachment.get on the project identified by the given ID.
	GetAuditLogAttachedToProject(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*AuditLog, error)
	// Attach the AuditLog identified by given ID to the project identified with given ID.
	// This replaces any existing AuditLog attachment for the project.
	// Required permissions:
	// - audit.auditlogattachment.create on the project identified by the given ID.
	AttachProjectToAuditLog(ctx context.Context, in *AttachProjectToAuditLogRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Detach the current AuditLog from the project identified with given ID.
	// After a detachment, no audit events in the context of the project will be sent
	// to an AuditLog.
	// Required permissions:
	// - audit.auditlogattachment.delete on the project identified by the given ID.
	DetachProjectFromAuditLog(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
}

type auditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditServiceClient(cc grpc.ClientConnInterface) AuditServiceClient {
	return &auditServiceClient{cc}
}

func (c *auditServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) ListAuditLogTopics(ctx context.Context, in *ListAuditLogTopicsRequest, opts ...grpc.CallOption) (*AuditLogTopicList, error) {
	out := new(AuditLogTopicList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/ListAuditLogTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*AuditLogList, error) {
	out := new(AuditLogList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/ListAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetAuditLog(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*AuditLog, error) {
	out := new(AuditLog)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/GetAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) CreateAuditLog(ctx context.Context, in *AuditLog, opts ...grpc.CallOption) (*AuditLog, error) {
	out := new(AuditLog)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/CreateAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) UpdateAuditLog(ctx context.Context, in *AuditLog, opts ...grpc.CallOption) (*AuditLog, error) {
	out := new(AuditLog)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/UpdateAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) DeleteAuditLog(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/DeleteAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) SetDefaultAuditLog(ctx context.Context, in *SetDefaultAuditLogRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/SetDefaultAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) TestAuditLogHttpsPostDestination(ctx context.Context, in *TestAuditLogHttpsPostDestinationRequest, opts ...grpc.CallOption) (AuditService_TestAuditLogHttpsPostDestinationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuditService_serviceDesc.Streams[0], "/arangodb.cloud.audit.v1.AuditService/TestAuditLogHttpsPostDestination", opts...)
	if err != nil {
		return nil, err
	}
	x := &auditServiceTestAuditLogHttpsPostDestinationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditService_TestAuditLogHttpsPostDestinationClient interface {
	Recv() (*TestAuditLogHttpsPostDestinationResult, error)
	grpc.ClientStream
}

type auditServiceTestAuditLogHttpsPostDestinationClient struct {
	grpc.ClientStream
}

func (x *auditServiceTestAuditLogHttpsPostDestinationClient) Recv() (*TestAuditLogHttpsPostDestinationResult, error) {
	m := new(TestAuditLogHttpsPostDestinationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auditServiceClient) ListAuditLogArchives(ctx context.Context, in *ListAuditLogArchivesRequest, opts ...grpc.CallOption) (*AuditLogArchiveList, error) {
	out := new(AuditLogArchiveList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/ListAuditLogArchives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetAuditLogArchive(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*AuditLogArchive, error) {
	out := new(AuditLogArchive)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/GetAuditLogArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) DeleteAuditLogArchive(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) DeleteAuditLogArchiveEvents(ctx context.Context, in *DeleteAuditLogArchiveEventsRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchiveEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetAuditLogEvents(ctx context.Context, in *GetAuditLogEventsRequest, opts ...grpc.CallOption) (AuditService_GetAuditLogEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuditService_serviceDesc.Streams[1], "/arangodb.cloud.audit.v1.AuditService/GetAuditLogEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &auditServiceGetAuditLogEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditService_GetAuditLogEventsClient interface {
	Recv() (*AuditLogEventList, error)
	grpc.ClientStream
}

type auditServiceGetAuditLogEventsClient struct {
	grpc.ClientStream
}

func (x *auditServiceGetAuditLogEventsClient) Recv() (*AuditLogEventList, error) {
	m := new(AuditLogEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auditServiceClient) GetAuditLogAttachedToProject(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*AuditLog, error) {
	out := new(AuditLog)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/GetAuditLogAttachedToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) AttachProjectToAuditLog(ctx context.Context, in *AttachProjectToAuditLogRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/AttachProjectToAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) DetachProjectFromAuditLog(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.audit.v1.AuditService/DetachProjectFromAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServiceServer is the server API for AuditService service.
type AuditServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch all topics that can be found in an audit log event.
	// Required permissions:
	// - None
	ListAuditLogTopics(context.Context, *ListAuditLogTopicsRequest) (*AuditLogTopicList, error)
	// Fetch all audit logs in the organization identified by the given ID.
	// Required permissions:
	// - audit.auditlog.list on the organization identified by the given ID.
	ListAuditLogs(context.Context, *ListAuditLogsRequest) (*AuditLogList, error)
	// Fetch a specific AuditLog identified by the given ID.
	// Required permissions:
	// - audit.auditlog.get on the audit log identified by the given ID.
	GetAuditLog(context.Context, *v1.IDOptions) (*AuditLog, error)
	// Create a new audit log.
	// Required permissions:
	// - audit.auditlog.create on the organization identified by the given ID.
	CreateAuditLog(context.Context, *AuditLog) (*AuditLog, error)
	// Update an audit log.
	// Required permissions:
	// - audit.auditlog.update on the audit log identified by the given ID.
	UpdateAuditLog(context.Context, *AuditLog) (*AuditLog, error)
	// Delete an audit log.
	// Note that audit logs are initially only marked for deleted.
	// Once all their resources are removed the audit log itself is deleted
	// and cannot be restored.
	// Note that deleting an AuditLog will detach it from all Projects that
	// it was attached to.
	// Required permissions:
	// - audit.auditlog.delete on the audit log.
	DeleteAuditLog(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Change the default audit log of an organization.
	// The default AuditLog for an organization is used to capture audit events
	// from the ArangoGraph Insights Platform. If there is no default AuditLog, audit events
	// from the ArangoGraph Insights Platform are not captured.
	// The default AuditLog is also attached to new projects in the organization.
	// Required permissions:
	// - audit.auditlog.set-default on the organization.
	SetDefaultAuditLog(context.Context, *SetDefaultAuditLogRequest) (*v1.Empty, error)
	// Test an audit log destination of type HTTPS Post.
	// Note that only 1 item is returned, but this can take a while.
	// To recognize test events: The Topic will be "test-topic" and the Sequence 0
	// Required permissions:
	// - audit.auditlog.test-https-post-destination on the organization identified by the given ID.
	TestAuditLogHttpsPostDestination(*TestAuditLogHttpsPostDestinationRequest, AuditService_TestAuditLogHttpsPostDestinationServer) error
	// Fetch all audit log archives in the audit log identified by the given ID.
	// Required permissions:
	// - audit.auditlogarchive.list on the audit log identified by the given ID.
	ListAuditLogArchives(context.Context, *ListAuditLogArchivesRequest) (*AuditLogArchiveList, error)
	// Fetch a specific AuditLogArchive identified by the given ID.
	// Required permissions:
	// - audit.auditlogarchive.get on the audit log archive identified by the given ID.
	GetAuditLogArchive(context.Context, *v1.IDOptions) (*AuditLogArchive, error)
	// Delete an audit log archive.
	// Note that this method will return a precondition-failed error
	// if there is a non-deleted deployment using this archive.
	// Note that audit log archives are initially only marked for deleted.
	// Once all their resources are removed the audit log archive itself is deleted
	// and cannot be restored.
	// Required permissions:
	// - audit.auditlogarchive.delete on the audit log archive.
	DeleteAuditLogArchive(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Remove all audit events that match the given filter from the AuditLogArchive
	// identified by the given ID.
	// Note that this method will return a precondition-failed error
	// if there is no destination of type "cloud" in the AuditLog.
	// Required permissions:
	// - audit.auditlogevent.delete on the audit log archive identified by the given ID.
	DeleteAuditLogArchiveEvents(context.Context, *DeleteAuditLogArchiveEventsRequest) (*v1.Empty, error)
	// Fetch all audit events that match the given filter.
	// Note that this method will return a precondition-failed error
	// if there is no destination of type "cloud" in the AuditLog.
	// Required permissions:
	// - audit.auditlogevents.get on the audit log identified by the given ID.
	GetAuditLogEvents(*GetAuditLogEventsRequest, AuditService_GetAuditLogEventsServer) error
	// Fetch the AuditLog that is attached to the project identified by the given ID.
	// If no AuditLog is attached to the project, a not-found error is returned.
	// Required permissions:
	// - audit.auditlogattachment.get on the project identified by the given ID.
	GetAuditLogAttachedToProject(context.Context, *v1.IDOptions) (*AuditLog, error)
	// Attach the AuditLog identified by given ID to the project identified with given ID.
	// This replaces any existing AuditLog attachment for the project.
	// Required permissions:
	// - audit.auditlogattachment.create on the project identified by the given ID.
	AttachProjectToAuditLog(context.Context, *AttachProjectToAuditLogRequest) (*v1.Empty, error)
	// Detach the current AuditLog from the project identified with given ID.
	// After a detachment, no audit events in the context of the project will be sent
	// to an AuditLog.
	// Required permissions:
	// - audit.auditlogattachment.delete on the project identified by the given ID.
	DetachProjectFromAuditLog(context.Context, *v1.IDOptions) (*v1.Empty, error)
}

// UnimplementedAuditServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuditServiceServer struct {
}

func (*UnimplementedAuditServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedAuditServiceServer) ListAuditLogTopics(context.Context, *ListAuditLogTopicsRequest) (*AuditLogTopicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogTopics not implemented")
}
func (*UnimplementedAuditServiceServer) ListAuditLogs(context.Context, *ListAuditLogsRequest) (*AuditLogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}
func (*UnimplementedAuditServiceServer) GetAuditLog(context.Context, *v1.IDOptions) (*AuditLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLog not implemented")
}
func (*UnimplementedAuditServiceServer) CreateAuditLog(context.Context, *AuditLog) (*AuditLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuditLog not implemented")
}
func (*UnimplementedAuditServiceServer) UpdateAuditLog(context.Context, *AuditLog) (*AuditLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuditLog not implemented")
}
func (*UnimplementedAuditServiceServer) DeleteAuditLog(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuditLog not implemented")
}
func (*UnimplementedAuditServiceServer) SetDefaultAuditLog(context.Context, *SetDefaultAuditLogRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultAuditLog not implemented")
}
func (*UnimplementedAuditServiceServer) TestAuditLogHttpsPostDestination(*TestAuditLogHttpsPostDestinationRequest, AuditService_TestAuditLogHttpsPostDestinationServer) error {
	return status.Errorf(codes.Unimplemented, "method TestAuditLogHttpsPostDestination not implemented")
}
func (*UnimplementedAuditServiceServer) ListAuditLogArchives(context.Context, *ListAuditLogArchivesRequest) (*AuditLogArchiveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogArchives not implemented")
}
func (*UnimplementedAuditServiceServer) GetAuditLogArchive(context.Context, *v1.IDOptions) (*AuditLogArchive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogArchive not implemented")
}
func (*UnimplementedAuditServiceServer) DeleteAuditLogArchive(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuditLogArchive not implemented")
}
func (*UnimplementedAuditServiceServer) DeleteAuditLogArchiveEvents(context.Context, *DeleteAuditLogArchiveEventsRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuditLogArchiveEvents not implemented")
}
func (*UnimplementedAuditServiceServer) GetAuditLogEvents(*GetAuditLogEventsRequest, AuditService_GetAuditLogEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAuditLogEvents not implemented")
}
func (*UnimplementedAuditServiceServer) GetAuditLogAttachedToProject(context.Context, *v1.IDOptions) (*AuditLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogAttachedToProject not implemented")
}
func (*UnimplementedAuditServiceServer) AttachProjectToAuditLog(context.Context, *AttachProjectToAuditLogRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachProjectToAuditLog not implemented")
}
func (*UnimplementedAuditServiceServer) DetachProjectFromAuditLog(context.Context, *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachProjectFromAuditLog not implemented")
}

func RegisterAuditServiceServer(s *grpc.Server, srv AuditServiceServer) {
	s.RegisterService(&_AuditService_serviceDesc, srv)
}

func _AuditService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_ListAuditLogTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).ListAuditLogTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/ListAuditLogTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).ListAuditLogTopics(ctx, req.(*ListAuditLogTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/ListAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).ListAuditLogs(ctx, req.(*ListAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/GetAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetAuditLog(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_CreateAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).CreateAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/CreateAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).CreateAuditLog(ctx, req.(*AuditLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_UpdateAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).UpdateAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/UpdateAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).UpdateAuditLog(ctx, req.(*AuditLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_DeleteAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).DeleteAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/DeleteAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).DeleteAuditLog(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_SetDefaultAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).SetDefaultAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/SetDefaultAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).SetDefaultAuditLog(ctx, req.(*SetDefaultAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_TestAuditLogHttpsPostDestination_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestAuditLogHttpsPostDestinationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditServiceServer).TestAuditLogHttpsPostDestination(m, &auditServiceTestAuditLogHttpsPostDestinationServer{stream})
}

type AuditService_TestAuditLogHttpsPostDestinationServer interface {
	Send(*TestAuditLogHttpsPostDestinationResult) error
	grpc.ServerStream
}

type auditServiceTestAuditLogHttpsPostDestinationServer struct {
	grpc.ServerStream
}

func (x *auditServiceTestAuditLogHttpsPostDestinationServer) Send(m *TestAuditLogHttpsPostDestinationResult) error {
	return x.ServerStream.SendMsg(m)
}

func _AuditService_ListAuditLogArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogArchivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).ListAuditLogArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/ListAuditLogArchives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).ListAuditLogArchives(ctx, req.(*ListAuditLogArchivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetAuditLogArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetAuditLogArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/GetAuditLogArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetAuditLogArchive(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_DeleteAuditLogArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).DeleteAuditLogArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).DeleteAuditLogArchive(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_DeleteAuditLogArchiveEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuditLogArchiveEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).DeleteAuditLogArchiveEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchiveEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).DeleteAuditLogArchiveEvents(ctx, req.(*DeleteAuditLogArchiveEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetAuditLogEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAuditLogEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditServiceServer).GetAuditLogEvents(m, &auditServiceGetAuditLogEventsServer{stream})
}

type AuditService_GetAuditLogEventsServer interface {
	Send(*AuditLogEventList) error
	grpc.ServerStream
}

type auditServiceGetAuditLogEventsServer struct {
	grpc.ServerStream
}

func (x *auditServiceGetAuditLogEventsServer) Send(m *AuditLogEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _AuditService_GetAuditLogAttachedToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetAuditLogAttachedToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/GetAuditLogAttachedToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetAuditLogAttachedToProject(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_AttachProjectToAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachProjectToAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).AttachProjectToAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/AttachProjectToAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).AttachProjectToAuditLog(ctx, req.(*AttachProjectToAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_DetachProjectFromAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).DetachProjectFromAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.audit.v1.AuditService/DetachProjectFromAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).DetachProjectFromAuditLog(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.audit.v1.AuditService",
	HandlerType: (*AuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _AuditService_GetAPIVersion_Handler,
		},
		{
			MethodName: "ListAuditLogTopics",
			Handler:    _AuditService_ListAuditLogTopics_Handler,
		},
		{
			MethodName: "ListAuditLogs",
			Handler:    _AuditService_ListAuditLogs_Handler,
		},
		{
			MethodName: "GetAuditLog",
			Handler:    _AuditService_GetAuditLog_Handler,
		},
		{
			MethodName: "CreateAuditLog",
			Handler:    _AuditService_CreateAuditLog_Handler,
		},
		{
			MethodName: "UpdateAuditLog",
			Handler:    _AuditService_UpdateAuditLog_Handler,
		},
		{
			MethodName: "DeleteAuditLog",
			Handler:    _AuditService_DeleteAuditLog_Handler,
		},
		{
			MethodName: "SetDefaultAuditLog",
			Handler:    _AuditService_SetDefaultAuditLog_Handler,
		},
		{
			MethodName: "ListAuditLogArchives",
			Handler:    _AuditService_ListAuditLogArchives_Handler,
		},
		{
			MethodName: "GetAuditLogArchive",
			Handler:    _AuditService_GetAuditLogArchive_Handler,
		},
		{
			MethodName: "DeleteAuditLogArchive",
			Handler:    _AuditService_DeleteAuditLogArchive_Handler,
		},
		{
			MethodName: "DeleteAuditLogArchiveEvents",
			Handler:    _AuditService_DeleteAuditLogArchiveEvents_Handler,
		},
		{
			MethodName: "GetAuditLogAttachedToProject",
			Handler:    _AuditService_GetAuditLogAttachedToProject_Handler,
		},
		{
			MethodName: "AttachProjectToAuditLog",
			Handler:    _AuditService_AttachProjectToAuditLog_Handler,
		},
		{
			MethodName: "DetachProjectFromAuditLog",
			Handler:    _AuditService_DetachProjectFromAuditLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestAuditLogHttpsPostDestination",
			Handler:       _AuditService_TestAuditLogHttpsPostDestination_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAuditLogEvents",
			Handler:       _AuditService_GetAuditLogEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "audit.proto",
}
