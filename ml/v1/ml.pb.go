// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ml.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	v1 "github.com/arangodb-managed/apis/common/v1"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MLServices is a single resource which represents the state and configuration
// of ML Services (ArangoGraphML) for a deployment specified by deployment_id.
type MLServices struct {
	// Identifier of the deployment for this MLServices resource.
	// This is a ready-only value.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Set to true if ML services are enabled for this deployment.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Status of the MLServices.
	// This is a read-only value.
	Status               *Status  `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MLServices) Reset()         { *m = MLServices{} }
func (m *MLServices) String() string { return proto.CompactTextString(m) }
func (*MLServices) ProtoMessage()    {}
func (*MLServices) Descriptor() ([]byte, []int) {
	return fileDescriptor_378f7d136b22f2a8, []int{0}
}
func (m *MLServices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MLServices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MLServices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MLServices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLServices.Merge(m, src)
}
func (m *MLServices) XXX_Size() int {
	return m.Size()
}
func (m *MLServices) XXX_DiscardUnknown() {
	xxx_messageInfo_MLServices.DiscardUnknown(m)
}

var xxx_messageInfo_MLServices proto.InternalMessageInfo

func (m *MLServices) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *MLServices) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MLServices) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Status of the MLServices.
// Note: All fields are read-only.
type Status struct {
	// Overall status of where the MLServices resource is in its lifecycle at a given time.
	// It will contain only one of the following values:
	// "Bootstrapping"  - ArangoDB Deployment is being bootstrapped with the required databases, schemas and data.
	// "Initialising"   - The services needed for ArangoGraphML are being installed.
	// "Running"        - ArangoGraphML is setup and running correctly.
	// "Error"          - Indicates that there was an error with setting up ArangoGraphML. Check `message` field for additional info.
	Phase string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	// Supporting information about the phase of MLServices (such as error messages in case of failures).
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The timestamp of when this status was last updated.
	LastUpdatedAt *types.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Status of each ArangoGraphML components/services.
	Services []*ServiceStatus `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	// Total number of hours ML Jobs have run for this Deployment.
	HoursUsed float32 `protobuf:"fixed32,5,opt,name=hours_used,json=hoursUsed,proto3" json:"hours_used,omitempty"`
	// Total number of runtime hours allowed for ML Jobs for this Deployment.
	// Set to 0 if unlimited (i.e, no restriction).
	HoursAllowed         float32  `protobuf:"fixed32,6,opt,name=hours_allowed,json=hoursAllowed,proto3" json:"hours_allowed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_378f7d136b22f2a8, []int{1}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetLastUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedAt
	}
	return nil
}

func (m *Status) GetServices() []*ServiceStatus {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Status) GetHoursUsed() float32 {
	if m != nil {
		return m.HoursUsed
	}
	return 0
}

func (m *Status) GetHoursAllowed() float32 {
	if m != nil {
		return m.HoursAllowed
	}
	return 0
}

// Status of a single ArangoGraphML component.
type ServiceStatus struct {
	// Type of service.
	// Should be one of: [training|prediction|projects]
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Set to true if the service is available.
	// Every service is always in ONLY ONE of the following states: (available|failed)
	Available bool `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	// Set to true if the service is in a failed state.
	// Every service is always in ONLY ONE of the following states: (available|failed)
	Failed bool `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	// Resource usage information for this service.
	Usage *ServiceStatus_Usage `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Number of replicas running for this service.
	Replicas             int32    `protobuf:"varint,5,opt,name=replicas,proto3" json:"replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatus) Reset()         { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()    {}
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_378f7d136b22f2a8, []int{2}
}
func (m *ServiceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatus.Merge(m, src)
}
func (m *ServiceStatus) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatus proto.InternalMessageInfo

func (m *ServiceStatus) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceStatus) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *ServiceStatus) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *ServiceStatus) GetUsage() *ServiceStatus_Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *ServiceStatus) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

// Resource usage for this service.
type ServiceStatus_Usage struct {
	// Last known memory usage in bytes
	LastMemoryUsage int64 `protobuf:"varint,1,opt,name=last_memory_usage,json=lastMemoryUsage,proto3" json:"last_memory_usage,omitempty"`
	// Last known CPU usage in vCPU units
	LastCpuUsage float32 `protobuf:"fixed32,2,opt,name=last_cpu_usage,json=lastCpuUsage,proto3" json:"last_cpu_usage,omitempty"`
	// Last known memory limit in bytes
	LastMemoryLimit int64 `protobuf:"varint,3,opt,name=last_memory_limit,json=lastMemoryLimit,proto3" json:"last_memory_limit,omitempty"`
	// Last known CPU limit in vCPU units
	LastCpuLimit         float32  `protobuf:"fixed32,4,opt,name=last_cpu_limit,json=lastCpuLimit,proto3" json:"last_cpu_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatus_Usage) Reset()         { *m = ServiceStatus_Usage{} }
func (m *ServiceStatus_Usage) String() string { return proto.CompactTextString(m) }
func (*ServiceStatus_Usage) ProtoMessage()    {}
func (*ServiceStatus_Usage) Descriptor() ([]byte, []int) {
	return fileDescriptor_378f7d136b22f2a8, []int{2, 0}
}
func (m *ServiceStatus_Usage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatus_Usage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatus_Usage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatus_Usage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatus_Usage.Merge(m, src)
}
func (m *ServiceStatus_Usage) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatus_Usage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatus_Usage.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatus_Usage proto.InternalMessageInfo

func (m *ServiceStatus_Usage) GetLastMemoryUsage() int64 {
	if m != nil {
		return m.LastMemoryUsage
	}
	return 0
}

func (m *ServiceStatus_Usage) GetLastCpuUsage() float32 {
	if m != nil {
		return m.LastCpuUsage
	}
	return 0
}

func (m *ServiceStatus_Usage) GetLastMemoryLimit() int64 {
	if m != nil {
		return m.LastMemoryLimit
	}
	return 0
}

func (m *ServiceStatus_Usage) GetLastCpuLimit() float32 {
	if m != nil {
		return m.LastCpuLimit
	}
	return 0
}

func init() {
	proto.RegisterType((*MLServices)(nil), "arangodb.cloud.ml.v1.MLServices")
	proto.RegisterType((*Status)(nil), "arangodb.cloud.ml.v1.Status")
	proto.RegisterType((*ServiceStatus)(nil), "arangodb.cloud.ml.v1.ServiceStatus")
	proto.RegisterType((*ServiceStatus_Usage)(nil), "arangodb.cloud.ml.v1.ServiceStatus.Usage")
}

func init() { proto.RegisterFile("ml.proto", fileDescriptor_378f7d136b22f2a8) }

var fileDescriptor_378f7d136b22f2a8 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xfd, 0x26, 0x7f, 0x5f, 0xe2, 0x36, 0xfc, 0x58, 0x55, 0x35, 0x1a, 0x85, 0x10, 0x52, 0x40,
	0xa1, 0x52, 0x67, 0x68, 0x61, 0x81, 0x60, 0x51, 0xb5, 0x80, 0x50, 0xa5, 0x56, 0xa0, 0x29, 0x65,
	0xc1, 0x26, 0x72, 0x62, 0x77, 0x6a, 0xc9, 0x1e, 0x5b, 0x63, 0x4f, 0x50, 0x40, 0x5d, 0x94, 0x0d,
	0xec, 0xd9, 0xf0, 0x0e, 0xbc, 0x08, 0x4b, 0x24, 0x5e, 0x00, 0x95, 0x3e, 0x08, 0x1a, 0x7b, 0xa6,
	0x49, 0x50, 0x23, 0xba, 0x9b, 0x7b, 0x7d, 0xee, 0x39, 0xbe, 0xe7, 0xfa, 0x0e, 0xa8, 0x73, 0xe6,
	0xcb, 0x44, 0x68, 0x01, 0x97, 0x50, 0x82, 0xe2, 0x48, 0xe0, 0x81, 0x3f, 0x64, 0x22, 0xc5, 0x3e,
	0x67, 0xfe, 0x68, 0xdd, 0x5b, 0x1e, 0x0a, 0xce, 0x45, 0x1c, 0x8c, 0xd6, 0x03, 0xfb, 0x65, 0xd1,
	0xde, 0x93, 0x88, 0xea, 0xa3, 0x74, 0xe0, 0x0f, 0x05, 0x0f, 0x22, 0xc1, 0x50, 0x1c, 0x05, 0xe6,
	0x60, 0x90, 0x1e, 0x06, 0x52, 0x8f, 0x25, 0x51, 0x81, 0xa6, 0x9c, 0x28, 0x8d, 0xb8, 0x9c, 0x7c,
	0xe5, 0xc5, 0xad, 0x48, 0x88, 0x88, 0x91, 0x00, 0x49, 0x1a, 0xa0, 0x38, 0x16, 0x1a, 0x69, 0x2a,
	0x62, 0x65, 0x4f, 0xbb, 0x27, 0x0e, 0x00, 0x7b, 0xbb, 0xfb, 0x24, 0x19, 0xd1, 0x21, 0x51, 0x70,
	0x05, 0x34, 0x31, 0x91, 0x4c, 0x8c, 0x39, 0x89, 0x75, 0x9f, 0x62, 0xd7, 0xe9, 0x38, 0xbd, 0x46,
	0xb8, 0x38, 0x49, 0xee, 0x60, 0xe8, 0x82, 0xff, 0x49, 0x8c, 0x06, 0x8c, 0x60, 0xb7, 0xd4, 0x71,
	0x7a, 0xf5, 0xb0, 0x08, 0xe1, 0x43, 0x50, 0x53, 0x1a, 0xe9, 0x54, 0xb9, 0xb8, 0xe3, 0xf4, 0x16,
	0x36, 0x5a, 0xfe, 0x45, 0x7d, 0xfa, 0xfb, 0x06, 0x13, 0xe6, 0xd8, 0xee, 0x49, 0x09, 0xd4, 0x6c,
	0x0a, 0x2e, 0x81, 0xaa, 0x3c, 0x42, 0x8a, 0xe4, 0xba, 0x36, 0xc8, 0x04, 0x39, 0x51, 0x0a, 0x45,
	0xc4, 0x08, 0x36, 0xc2, 0x22, 0x84, 0xdb, 0xe0, 0x2a, 0x43, 0x4a, 0xf7, 0x53, 0x89, 0x91, 0x26,
	0xb8, 0x8f, 0xb4, 0x5b, 0x36, 0xca, 0x9e, 0x6f, 0xdb, 0xf6, 0x0b, 0xa3, 0xfc, 0xd7, 0x85, 0x2f,
	0x61, 0x33, 0x2b, 0x39, 0xb0, 0x15, 0x5b, 0x1a, 0x6e, 0x82, 0xba, 0xca, 0xfb, 0x77, 0x2b, 0x9d,
	0x72, 0x6f, 0x61, 0x63, 0x65, 0xce, 0xb5, 0x2d, 0x2a, 0xbf, 0xfd, 0x79, 0x11, 0xbc, 0x01, 0xc0,
	0x91, 0x48, 0x13, 0xd5, 0x4f, 0x15, 0xc1, 0x6e, 0xb5, 0xe3, 0xf4, 0x4a, 0x61, 0xc3, 0x64, 0x0e,
	0x14, 0xc1, 0x99, 0xa7, 0xf6, 0x18, 0x31, 0x26, 0xde, 0x11, 0xec, 0xd6, 0x0c, 0x62, 0xd1, 0x24,
	0xb7, 0x6c, 0xae, 0x7b, 0x56, 0x02, 0xcd, 0x19, 0x7e, 0x08, 0x41, 0x25, 0x1b, 0x6d, 0xee, 0x84,
	0xf9, 0x86, 0x2d, 0xd0, 0x40, 0x23, 0x44, 0x59, 0xe6, 0x76, 0xee, 0xfd, 0x24, 0x01, 0x97, 0x41,
	0xed, 0x10, 0xd1, 0x6c, 0x2c, 0x65, 0x73, 0x94, 0x47, 0x70, 0x13, 0x54, 0x53, 0x63, 0x5e, 0xc5,
	0x58, 0x73, 0xef, 0x12, 0xdd, 0xf9, 0x07, 0x59, 0x41, 0x68, 0xeb, 0xa0, 0x07, 0xea, 0x09, 0x91,
	0x8c, 0x0e, 0x91, 0x32, 0xed, 0x55, 0xc3, 0xf3, 0xd8, 0xfb, 0xe6, 0x80, 0xaa, 0x01, 0xc3, 0x55,
	0x70, 0xdd, 0xcc, 0x82, 0x13, 0x2e, 0x92, 0x71, 0xdf, 0x4a, 0x66, 0xb7, 0x2f, 0x87, 0x66, 0x48,
	0x7b, 0x26, 0x6f, 0xb1, 0xb7, 0xc1, 0x15, 0x83, 0x1d, 0xca, 0x34, 0x07, 0x96, 0xac, 0x29, 0x59,
	0xf6, 0xa9, 0x4c, 0x2f, 0x64, 0x64, 0x94, 0x53, 0x3b, 0xdf, 0x19, 0xc6, 0xdd, 0x2c, 0x3d, 0xc3,
	0x68, 0x81, 0x95, 0x19, 0x46, 0x83, 0xda, 0xf8, 0x54, 0x06, 0x8d, 0xf3, 0xe7, 0x0e, 0x15, 0x68,
	0xbe, 0x20, 0x7a, 0xeb, 0xd5, 0xce, 0x1b, 0x92, 0x28, 0x2a, 0x62, 0x78, 0xf3, 0x6f, 0x6b, 0xf2,
	0x35, 0x1c, 0xad, 0xfb, 0xcf, 0xb9, 0xd4, 0x63, 0xef, 0xd6, 0x7c, 0x40, 0xce, 0xd1, 0x6d, 0x7f,
	0xfc, 0x79, 0xf6, 0xa5, 0xe4, 0xc2, 0x65, 0xb3, 0x71, 0x9c, 0x65, 0xdb, 0x8c, 0x24, 0x5d, 0x1b,
	0xe5, 0x1a, 0xef, 0x8d, 0xe8, 0xf4, 0xce, 0xcd, 0xe7, 0xdc, 0x79, 0xf6, 0x52, 0x9a, 0x6d, 0xf5,
	0x3a, 0x17, 0x0f, 0x6d, 0x42, 0xd3, 0xed, 0x1a, 0xdd, 0x16, 0xf4, 0xa6, 0x74, 0x39, 0x2b, 0x1e,
	0x69, 0xf0, 0x81, 0xe2, 0x63, 0xf8, 0xd9, 0x01, 0xd7, 0xec, 0xc3, 0x9f, 0xd2, 0xff, 0x27, 0xf5,
	0x25, 0xc4, 0xef, 0x1b, 0xf1, 0x55, 0xef, 0xce, 0x1c, 0xf1, 0x99, 0x9f, 0xca, 0xf1, 0x63, 0x67,
	0x75, 0xfb, 0xd1, 0xf7, 0xd3, 0xb6, 0xf3, 0xe3, 0xb4, 0xed, 0xfc, 0x3a, 0x6d, 0x3b, 0x5f, 0x7f,
	0xb7, 0xff, 0x7b, 0x7b, 0x77, 0xea, 0x2f, 0x57, 0xe8, 0xad, 0x71, 0x14, 0xa3, 0x88, 0xe0, 0x8c,
	0x56, 0x59, 0xde, 0x41, 0xcd, 0xac, 0xf4, 0x83, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x60,
	0xa8, 0x33, 0x4e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MLServiceClient is the client API for MLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MLServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Get an existing MLServices resource for a given deployment (specified by the id).
	// Required permissions:
	// - ml.mlservices.get
	GetMLServices(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*MLServices, error)
	// Update an existing MLServices resource. If it does not exist, this will create a new one.
	// Pass the desired updated state of MLServices to this call.
	// Required permissions:
	// - ml.mlservices.update
	UpdateMLServices(ctx context.Context, in *MLServices, opts ...grpc.CallOption) (*MLServices, error)
}

type mLServiceClient struct {
	cc *grpc.ClientConn
}

func NewMLServiceClient(cc *grpc.ClientConn) MLServiceClient {
	return &mLServiceClient{cc}
}

func (c *mLServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.ml.v1.MLService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) GetMLServices(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*MLServices, error) {
	out := new(MLServices)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.ml.v1.MLService/GetMLServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) UpdateMLServices(ctx context.Context, in *MLServices, opts ...grpc.CallOption) (*MLServices, error) {
	out := new(MLServices)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.ml.v1.MLService/UpdateMLServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MLServiceServer is the server API for MLService service.
type MLServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Get an existing MLServices resource for a given deployment (specified by the id).
	// Required permissions:
	// - ml.mlservices.get
	GetMLServices(context.Context, *v1.IDOptions) (*MLServices, error)
	// Update an existing MLServices resource. If it does not exist, this will create a new one.
	// Pass the desired updated state of MLServices to this call.
	// Required permissions:
	// - ml.mlservices.update
	UpdateMLServices(context.Context, *MLServices) (*MLServices, error)
}

// UnimplementedMLServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMLServiceServer struct {
}

func (*UnimplementedMLServiceServer) GetAPIVersion(ctx context.Context, req *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedMLServiceServer) GetMLServices(ctx context.Context, req *v1.IDOptions) (*MLServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMLServices not implemented")
}
func (*UnimplementedMLServiceServer) UpdateMLServices(ctx context.Context, req *MLServices) (*MLServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMLServices not implemented")
}

func RegisterMLServiceServer(s *grpc.Server, srv MLServiceServer) {
	s.RegisterService(&_MLService_serviceDesc, srv)
}

func _MLService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.ml.v1.MLService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_GetMLServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GetMLServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.ml.v1.MLService/GetMLServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GetMLServices(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_UpdateMLServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MLServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).UpdateMLServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.ml.v1.MLService/UpdateMLServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).UpdateMLServices(ctx, req.(*MLServices))
	}
	return interceptor(ctx, in, info, handler)
}

var _MLService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.ml.v1.MLService",
	HandlerType: (*MLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _MLService_GetAPIVersion_Handler,
		},
		{
			MethodName: "GetMLServices",
			Handler:    _MLService_GetMLServices_Handler,
		},
		{
			MethodName: "UpdateMLServices",
			Handler:    _MLService_UpdateMLServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml.proto",
}

func (m *MLServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MLServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MLServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintMl(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HoursAllowed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HoursAllowed))))
		i--
		dAtA[i] = 0x35
	}
	if m.HoursUsed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HoursUsed))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LastUpdatedAt != nil {
		{
			size, err := m.LastUpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMl(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Phase) > 0 {
		i -= len(m.Phase)
		copy(dAtA[i:], m.Phase)
		i = encodeVarintMl(dAtA, i, uint64(len(m.Phase)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Replicas != 0 {
		i = encodeVarintMl(dAtA, i, uint64(m.Replicas))
		i--
		dAtA[i] = 0x28
	}
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Failed {
		i--
		if m.Failed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMl(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatus_Usage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatus_Usage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatus_Usage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastCpuLimit != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LastCpuLimit))))
		i--
		dAtA[i] = 0x25
	}
	if m.LastMemoryLimit != 0 {
		i = encodeVarintMl(dAtA, i, uint64(m.LastMemoryLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.LastCpuUsage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LastCpuUsage))))
		i--
		dAtA[i] = 0x15
	}
	if m.LastMemoryUsage != 0 {
		i = encodeVarintMl(dAtA, i, uint64(m.LastMemoryUsage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMl(dAtA []byte, offset int, v uint64) int {
	offset -= sovMl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MLServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovMl(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 2 + l + sovMl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovMl(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMl(uint64(l))
	}
	if m.LastUpdatedAt != nil {
		l = m.LastUpdatedAt.Size()
		n += 1 + l + sovMl(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovMl(uint64(l))
		}
	}
	if m.HoursUsed != 0 {
		n += 5
	}
	if m.HoursAllowed != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMl(uint64(l))
	}
	if m.Available {
		n += 2
	}
	if m.Failed {
		n += 2
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovMl(uint64(l))
	}
	if m.Replicas != 0 {
		n += 1 + sovMl(uint64(m.Replicas))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceStatus_Usage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastMemoryUsage != 0 {
		n += 1 + sovMl(uint64(m.LastMemoryUsage))
	}
	if m.LastCpuUsage != 0 {
		n += 5
	}
	if m.LastMemoryLimit != 0 {
		n += 1 + sovMl(uint64(m.LastMemoryLimit))
	}
	if m.LastCpuLimit != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMl(x uint64) (n int) {
	return sovMl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MLServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MLServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MLServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedAt == nil {
				m.LastUpdatedAt = &types.Timestamp{}
			}
			if err := m.LastUpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &ServiceStatus{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoursUsed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HoursUsed = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoursAllowed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HoursAllowed = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &ServiceStatus_Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			m.Replicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatus_Usage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Usage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Usage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMemoryUsage", wireType)
			}
			m.LastMemoryUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMemoryUsage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCpuUsage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LastCpuUsage = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMemoryLimit", wireType)
			}
			m.LastMemoryLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMemoryLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCpuLimit", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LastCpuLimit = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMl = fmt.Errorf("proto: unexpected end of group")
)
