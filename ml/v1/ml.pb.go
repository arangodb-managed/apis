//
// DISCLAIMER
//
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: ml.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of MLServicesSize.
type MLServicesSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items in this list.
	Items []*MLServicesSize `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MLServicesSizeList) Reset() {
	*x = MLServicesSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ml_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLServicesSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLServicesSizeList) ProtoMessage() {}

func (x *MLServicesSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_ml_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLServicesSizeList.ProtoReflect.Descriptor instead.
func (*MLServicesSizeList) Descriptor() ([]byte, []int) {
	return file_ml_proto_rawDescGZIP(), []int{0}
}

func (x *MLServicesSizeList) GetItems() []*MLServicesSize {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListMLServicesSizesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional ID of the Deployment for which sizes are being requested.
	// If set, the response will exclude any sizes that are unavailable for the specified deployment model.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *ListMLServicesSizesRequest) Reset() {
	*x = ListMLServicesSizesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ml_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMLServicesSizesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMLServicesSizesRequest) ProtoMessage() {}

func (x *ListMLServicesSizesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ml_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMLServicesSizesRequest.ProtoReflect.Descriptor instead.
func (*ListMLServicesSizesRequest) Descriptor() ([]byte, []int) {
	return file_ml_proto_rawDescGZIP(), []int{1}
}

func (x *ListMLServicesSizesRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// MLServicesSize represents the resources allocated for MLServices.
// Note that the specified configuration is applied for the ML jobs.
type MLServicesSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the size configuration.
	SizeId string `protobuf:"bytes,1,opt,name=size_id,json=sizeId,proto3" json:"size_id,omitempty"`
	// If set, this is the default size when unspecified in MLServices.
	IsDefault bool `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// Amount of CPU allocated (in vCPU units)
	Cpu float32 `protobuf:"fixed32,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Amount of Memory allocated (in GB)
	Memory int32 `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"`
	// Amount of GPUs allocated
	Gpu float32 `protobuf:"fixed32,5,opt,name=gpu,proto3" json:"gpu,omitempty"`
}

func (x *MLServicesSize) Reset() {
	*x = MLServicesSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ml_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLServicesSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLServicesSize) ProtoMessage() {}

func (x *MLServicesSize) ProtoReflect() protoreflect.Message {
	mi := &file_ml_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLServicesSize.ProtoReflect.Descriptor instead.
func (*MLServicesSize) Descriptor() ([]byte, []int) {
	return file_ml_proto_rawDescGZIP(), []int{2}
}

func (x *MLServicesSize) GetSizeId() string {
	if x != nil {
		return x.SizeId
	}
	return ""
}

func (x *MLServicesSize) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *MLServicesSize) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *MLServicesSize) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *MLServicesSize) GetGpu() float32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

// MLServices is a single resource which represents the state and configuration
// of ML Services (ArangoGraphML) for a deployment specified by deployment_id.
type MLServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the deployment for this MLServices resource.
	// This is a ready-only value.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Set to true if ML services are enabled for this deployment.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Size to use for the ML Jobs.
	// Use `ListMLServicesSizes` to get a list of available sizes.
	// If unspecified, the MLServiceSize marked as `is_default` is used.
	// This is an optional field.
	Size string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	// The creation timestamp of the MLServices.
	// This also serves as a timestamp of when MLServices were first enabled.
	// This is a read-only value.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Status of the MLServices.
	// This is a read-only value.
	Status *Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MLServices) Reset() {
	*x = MLServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ml_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLServices) ProtoMessage() {}

func (x *MLServices) ProtoReflect() protoreflect.Message {
	mi := &file_ml_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLServices.ProtoReflect.Descriptor instead.
func (*MLServices) Descriptor() ([]byte, []int) {
	return file_ml_proto_rawDescGZIP(), []int{3}
}

func (x *MLServices) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *MLServices) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MLServices) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *MLServices) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MLServices) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Status of the MLServices.
// Note: All fields are read-only.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Overall status of where the MLServices resource is in its lifecycle at a given time.
	// It will contain only one of the following values:
	// "Bootstrapping"  - ArangoDB Deployment is being bootstrapped with the required databases, schemas and data.
	// "Initialising"   - The services needed for ArangoGraphML are being installed.
	// "Running"        - ArangoGraphML is setup and running correctly.
	// "Error"          - Indicates that there was an error with setting up ArangoGraphML. Check `message` field for additional info.
	// "Hibernated"     - Indicates that ArangoGraphML and all its associated services are hibernated.
	Phase string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	// Supporting information about the phase of MLServices (such as error messages in case of failures).
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The timestamp of when this status was last updated.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Status of each ArangoGraphML components/services.
	Services []*ServiceStatus `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	// Total number of hours ML Jobs have run for this Deployment.
	HoursUsed float32 `protobuf:"fixed32,5,opt,name=hours_used,json=hoursUsed,proto3" json:"hours_used,omitempty"`
	// Total number of runtime hours allowed for ML Jobs for this Deployment.
	// Set to 0 if unlimited (i.e, no restriction).
	HoursAllowed float32 `protobuf:"fixed32,6,opt,name=hours_allowed,json=hoursAllowed,proto3" json:"hours_allowed,omitempty"`
	// Timestamp after which MLServices are no longer usable.
	// This is set during trial use.
	// If unset, no expiry.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Timestamp of when MLServices were last enabled for this deployment.
	LastEnabledAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_enabled_at,json=lastEnabledAt,proto3" json:"last_enabled_at,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ml_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_ml_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_ml_proto_rawDescGZIP(), []int{4}
}

func (x *Status) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Status) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Status) GetServices() []*ServiceStatus {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Status) GetHoursUsed() float32 {
	if x != nil {
		return x.HoursUsed
	}
	return 0
}

func (x *Status) GetHoursAllowed() float32 {
	if x != nil {
		return x.HoursAllowed
	}
	return 0
}

func (x *Status) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Status) GetLastEnabledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEnabledAt
	}
	return nil
}

// Status of a single ArangoGraphML component.
type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of service.
	// Should be one of: [training|prediction|projects]
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Set to true if the service is available.
	// Every service is always in ONLY ONE of the following states: (available|failed)
	Available bool `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	// Set to true if the service is in a failed state.
	// Every service is always in ONLY ONE of the following states: (available|failed)
	Failed bool `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	// Resource usage information for this service.
	Usage *ServiceStatus_Usage `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Number of replicas running for this service.
	Replicas int32 `protobuf:"varint,5,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ml_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ml_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_ml_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ServiceStatus) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ServiceStatus) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ServiceStatus) GetUsage() *ServiceStatus_Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ServiceStatus) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

// Resource usage for this service.
type ServiceStatus_Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last known memory usage in bytes
	LastMemoryUsage int64 `protobuf:"varint,1,opt,name=last_memory_usage,json=lastMemoryUsage,proto3" json:"last_memory_usage,omitempty"`
	// Last known CPU usage in vCPU units
	LastCpuUsage float32 `protobuf:"fixed32,2,opt,name=last_cpu_usage,json=lastCpuUsage,proto3" json:"last_cpu_usage,omitempty"`
	// Last known memory limit in bytes
	LastMemoryLimit int64 `protobuf:"varint,3,opt,name=last_memory_limit,json=lastMemoryLimit,proto3" json:"last_memory_limit,omitempty"`
	// Last known CPU limit in vCPU units
	LastCpuLimit float32 `protobuf:"fixed32,4,opt,name=last_cpu_limit,json=lastCpuLimit,proto3" json:"last_cpu_limit,omitempty"`
}

func (x *ServiceStatus_Usage) Reset() {
	*x = ServiceStatus_Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ml_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus_Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus_Usage) ProtoMessage() {}

func (x *ServiceStatus_Usage) ProtoReflect() protoreflect.Message {
	mi := &file_ml_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus_Usage.ProtoReflect.Descriptor instead.
func (*ServiceStatus_Usage) Descriptor() ([]byte, []int) {
	return file_ml_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ServiceStatus_Usage) GetLastMemoryUsage() int64 {
	if x != nil {
		return x.LastMemoryUsage
	}
	return 0
}

func (x *ServiceStatus_Usage) GetLastCpuUsage() float32 {
	if x != nil {
		return x.LastCpuUsage
	}
	return 0
}

func (x *ServiceStatus_Usage) GetLastMemoryLimit() int64 {
	if x != nil {
		return x.LastMemoryLimit
	}
	return 0
}

func (x *ServiceStatus_Usage) GetLastCpuLimit() float32 {
	if x != nil {
		return x.LastCpuLimit
	}
	return 0
}

var File_ml_proto protoreflect.FileDescriptor

var file_ml_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x12, 0x4d, 0x4c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x41, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x0e, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x67, 0x70, 0x75, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x32, 0x95, 0x04, 0x0a, 0x09, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x20, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x88, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x20, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x4c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x3a, 0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x4c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6c, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x6c, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ml_proto_rawDescOnce sync.Once
	file_ml_proto_rawDescData = file_ml_proto_rawDesc
)

func file_ml_proto_rawDescGZIP() []byte {
	file_ml_proto_rawDescOnce.Do(func() {
		file_ml_proto_rawDescData = protoimpl.X.CompressGZIP(file_ml_proto_rawDescData)
	})
	return file_ml_proto_rawDescData
}

var file_ml_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ml_proto_goTypes = []interface{}{
	(*MLServicesSizeList)(nil),         // 0: arangodb.cloud.ml.v1.MLServicesSizeList
	(*ListMLServicesSizesRequest)(nil), // 1: arangodb.cloud.ml.v1.ListMLServicesSizesRequest
	(*MLServicesSize)(nil),             // 2: arangodb.cloud.ml.v1.MLServicesSize
	(*MLServices)(nil),                 // 3: arangodb.cloud.ml.v1.MLServices
	(*Status)(nil),                     // 4: arangodb.cloud.ml.v1.Status
	(*ServiceStatus)(nil),              // 5: arangodb.cloud.ml.v1.ServiceStatus
	(*ServiceStatus_Usage)(nil),        // 6: arangodb.cloud.ml.v1.ServiceStatus.Usage
	(*timestamppb.Timestamp)(nil),      // 7: google.protobuf.Timestamp
	(*v1.Empty)(nil),                   // 8: arangodb.cloud.common.v1.Empty
	(*v1.IDOptions)(nil),               // 9: arangodb.cloud.common.v1.IDOptions
	(*v1.Version)(nil),                 // 10: arangodb.cloud.common.v1.Version
}
var file_ml_proto_depIdxs = []int32{
	2,  // 0: arangodb.cloud.ml.v1.MLServicesSizeList.items:type_name -> arangodb.cloud.ml.v1.MLServicesSize
	7,  // 1: arangodb.cloud.ml.v1.MLServices.created_at:type_name -> google.protobuf.Timestamp
	4,  // 2: arangodb.cloud.ml.v1.MLServices.status:type_name -> arangodb.cloud.ml.v1.Status
	7,  // 3: arangodb.cloud.ml.v1.Status.last_updated_at:type_name -> google.protobuf.Timestamp
	5,  // 4: arangodb.cloud.ml.v1.Status.services:type_name -> arangodb.cloud.ml.v1.ServiceStatus
	7,  // 5: arangodb.cloud.ml.v1.Status.expires_at:type_name -> google.protobuf.Timestamp
	7,  // 6: arangodb.cloud.ml.v1.Status.last_enabled_at:type_name -> google.protobuf.Timestamp
	6,  // 7: arangodb.cloud.ml.v1.ServiceStatus.usage:type_name -> arangodb.cloud.ml.v1.ServiceStatus.Usage
	8,  // 8: arangodb.cloud.ml.v1.MLService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	9,  // 9: arangodb.cloud.ml.v1.MLService.GetMLServices:input_type -> arangodb.cloud.common.v1.IDOptions
	3,  // 10: arangodb.cloud.ml.v1.MLService.UpdateMLServices:input_type -> arangodb.cloud.ml.v1.MLServices
	1,  // 11: arangodb.cloud.ml.v1.MLService.ListMLServicesSizes:input_type -> arangodb.cloud.ml.v1.ListMLServicesSizesRequest
	10, // 12: arangodb.cloud.ml.v1.MLService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	3,  // 13: arangodb.cloud.ml.v1.MLService.GetMLServices:output_type -> arangodb.cloud.ml.v1.MLServices
	3,  // 14: arangodb.cloud.ml.v1.MLService.UpdateMLServices:output_type -> arangodb.cloud.ml.v1.MLServices
	0,  // 15: arangodb.cloud.ml.v1.MLService.ListMLServicesSizes:output_type -> arangodb.cloud.ml.v1.MLServicesSizeList
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_ml_proto_init() }
func file_ml_proto_init() {
	if File_ml_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ml_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLServicesSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ml_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMLServicesSizesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ml_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLServicesSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ml_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ml_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ml_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ml_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus_Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ml_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ml_proto_goTypes,
		DependencyIndexes: file_ml_proto_depIdxs,
		MessageInfos:      file_ml_proto_msgTypes,
	}.Build()
	File_ml_proto = out.File
	file_ml_proto_rawDesc = nil
	file_ml_proto_goTypes = nil
	file_ml_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MLServiceClient is the client API for MLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MLServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Get an existing MLServices resource for a given deployment (specified by the id).
	// Required permissions:
	// - ml.mlservices.get
	GetMLServices(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*MLServices, error)
	// Update an existing MLServices resource. If it does not exist, this will create a new one.
	// Pass the desired updated state of MLServices to this call.
	// Required permissions:
	// - ml.mlservices.update
	UpdateMLServices(ctx context.Context, in *MLServices, opts ...grpc.CallOption) (*MLServices, error)
	// List the available size configurations for MLServices.
	// Note that the returned size specifications are applied for ML Jobs.
	// Required permissions:
	// - ml.mlservicessize.list on the deployment (if deployment_id is provided)
	// - None, authenticated only
	ListMLServicesSizes(ctx context.Context, in *ListMLServicesSizesRequest, opts ...grpc.CallOption) (*MLServicesSizeList, error)
}

type mLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLServiceClient(cc grpc.ClientConnInterface) MLServiceClient {
	return &mLServiceClient{cc}
}

func (c *mLServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.ml.v1.MLService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) GetMLServices(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*MLServices, error) {
	out := new(MLServices)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.ml.v1.MLService/GetMLServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) UpdateMLServices(ctx context.Context, in *MLServices, opts ...grpc.CallOption) (*MLServices, error) {
	out := new(MLServices)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.ml.v1.MLService/UpdateMLServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) ListMLServicesSizes(ctx context.Context, in *ListMLServicesSizesRequest, opts ...grpc.CallOption) (*MLServicesSizeList, error) {
	out := new(MLServicesSizeList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.ml.v1.MLService/ListMLServicesSizes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MLServiceServer is the server API for MLService service.
type MLServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Get an existing MLServices resource for a given deployment (specified by the id).
	// Required permissions:
	// - ml.mlservices.get
	GetMLServices(context.Context, *v1.IDOptions) (*MLServices, error)
	// Update an existing MLServices resource. If it does not exist, this will create a new one.
	// Pass the desired updated state of MLServices to this call.
	// Required permissions:
	// - ml.mlservices.update
	UpdateMLServices(context.Context, *MLServices) (*MLServices, error)
	// List the available size configurations for MLServices.
	// Note that the returned size specifications are applied for ML Jobs.
	// Required permissions:
	// - ml.mlservicessize.list on the deployment (if deployment_id is provided)
	// - None, authenticated only
	ListMLServicesSizes(context.Context, *ListMLServicesSizesRequest) (*MLServicesSizeList, error)
}

// UnimplementedMLServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMLServiceServer struct {
}

func (*UnimplementedMLServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedMLServiceServer) GetMLServices(context.Context, *v1.IDOptions) (*MLServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMLServices not implemented")
}
func (*UnimplementedMLServiceServer) UpdateMLServices(context.Context, *MLServices) (*MLServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMLServices not implemented")
}
func (*UnimplementedMLServiceServer) ListMLServicesSizes(context.Context, *ListMLServicesSizesRequest) (*MLServicesSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMLServicesSizes not implemented")
}

func RegisterMLServiceServer(s *grpc.Server, srv MLServiceServer) {
	s.RegisterService(&_MLService_serviceDesc, srv)
}

func _MLService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.ml.v1.MLService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_GetMLServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GetMLServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.ml.v1.MLService/GetMLServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GetMLServices(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_UpdateMLServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MLServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).UpdateMLServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.ml.v1.MLService/UpdateMLServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).UpdateMLServices(ctx, req.(*MLServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_ListMLServicesSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMLServicesSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).ListMLServicesSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.ml.v1.MLService/ListMLServicesSizes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).ListMLServicesSizes(ctx, req.(*ListMLServicesSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MLService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.ml.v1.MLService",
	HandlerType: (*MLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _MLService_GetAPIVersion_Handler,
		},
		{
			MethodName: "GetMLServices",
			Handler:    _MLService_GetMLServices_Handler,
		},
		{
			MethodName: "UpdateMLServices",
			Handler:    _MLService_UpdateMLServices_Handler,
		},
		{
			MethodName: "ListMLServicesSizes",
			Handler:    _MLService_ListMLServicesSizes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml.proto",
}
