//
// DISCLAIMER
//
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ml.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MLService_GetAPIVersion_FullMethodName       = "/arangodb.cloud.ml.v1.MLService/GetAPIVersion"
	MLService_GetMLServices_FullMethodName       = "/arangodb.cloud.ml.v1.MLService/GetMLServices"
	MLService_UpdateMLServices_FullMethodName    = "/arangodb.cloud.ml.v1.MLService/UpdateMLServices"
	MLService_ListMLServicesSizes_FullMethodName = "/arangodb.cloud.ml.v1.MLService/ListMLServicesSizes"
)

// MLServiceClient is the client API for MLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MLService is the API used to configure ArangoML on ArangoGraph Insights Platform.
type MLServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Get an existing MLServices resource for a given deployment (specified by the id).
	// Required permissions:
	// - ml.mlservices.get
	GetMLServices(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*MLServices, error)
	// Update an existing MLServices resource. If it does not exist, this will create a new one.
	// Pass the desired updated state of MLServices to this call.
	// Required permissions:
	// - ml.mlservices.update
	UpdateMLServices(ctx context.Context, in *MLServices, opts ...grpc.CallOption) (*MLServices, error)
	// List the available size configurations for MLServices.
	// Note that the returned size specifications are applied for ML Jobs.
	// Required permissions:
	// - ml.mlservicessize.list on the deployment (if deployment_id is provided)
	// - None, authenticated only
	ListMLServicesSizes(ctx context.Context, in *ListMLServicesSizesRequest, opts ...grpc.CallOption) (*MLServicesSizeList, error)
}

type mLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLServiceClient(cc grpc.ClientConnInterface) MLServiceClient {
	return &mLServiceClient{cc}
}

func (c *mLServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, MLService_GetAPIVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) GetMLServices(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*MLServices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MLServices)
	err := c.cc.Invoke(ctx, MLService_GetMLServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) UpdateMLServices(ctx context.Context, in *MLServices, opts ...grpc.CallOption) (*MLServices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MLServices)
	err := c.cc.Invoke(ctx, MLService_UpdateMLServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) ListMLServicesSizes(ctx context.Context, in *ListMLServicesSizesRequest, opts ...grpc.CallOption) (*MLServicesSizeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MLServicesSizeList)
	err := c.cc.Invoke(ctx, MLService_ListMLServicesSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MLServiceServer is the server API for MLService service.
// All implementations must embed UnimplementedMLServiceServer
// for forward compatibility.
//
// MLService is the API used to configure ArangoML on ArangoGraph Insights Platform.
type MLServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Get an existing MLServices resource for a given deployment (specified by the id).
	// Required permissions:
	// - ml.mlservices.get
	GetMLServices(context.Context, *v1.IDOptions) (*MLServices, error)
	// Update an existing MLServices resource. If it does not exist, this will create a new one.
	// Pass the desired updated state of MLServices to this call.
	// Required permissions:
	// - ml.mlservices.update
	UpdateMLServices(context.Context, *MLServices) (*MLServices, error)
	// List the available size configurations for MLServices.
	// Note that the returned size specifications are applied for ML Jobs.
	// Required permissions:
	// - ml.mlservicessize.list on the deployment (if deployment_id is provided)
	// - None, authenticated only
	ListMLServicesSizes(context.Context, *ListMLServicesSizesRequest) (*MLServicesSizeList, error)
	mustEmbedUnimplementedMLServiceServer()
}

// UnimplementedMLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMLServiceServer struct{}

func (UnimplementedMLServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedMLServiceServer) GetMLServices(context.Context, *v1.IDOptions) (*MLServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMLServices not implemented")
}
func (UnimplementedMLServiceServer) UpdateMLServices(context.Context, *MLServices) (*MLServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMLServices not implemented")
}
func (UnimplementedMLServiceServer) ListMLServicesSizes(context.Context, *ListMLServicesSizesRequest) (*MLServicesSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMLServicesSizes not implemented")
}
func (UnimplementedMLServiceServer) mustEmbedUnimplementedMLServiceServer() {}
func (UnimplementedMLServiceServer) testEmbeddedByValue()                   {}

// UnsafeMLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MLServiceServer will
// result in compilation errors.
type UnsafeMLServiceServer interface {
	mustEmbedUnimplementedMLServiceServer()
}

func RegisterMLServiceServer(s grpc.ServiceRegistrar, srv MLServiceServer) {
	// If the following call pancis, it indicates UnimplementedMLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MLService_ServiceDesc, srv)
}

func _MLService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_GetAPIVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_GetMLServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GetMLServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_GetMLServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GetMLServices(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_UpdateMLServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MLServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).UpdateMLServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_UpdateMLServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).UpdateMLServices(ctx, req.(*MLServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_ListMLServicesSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMLServicesSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).ListMLServicesSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_ListMLServicesSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).ListMLServicesSizes(ctx, req.(*ListMLServicesSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MLService_ServiceDesc is the grpc.ServiceDesc for MLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.ml.v1.MLService",
	HandlerType: (*MLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _MLService_GetAPIVersion_Handler,
		},
		{
			MethodName: "GetMLServices",
			Handler:    _MLService_GetMLServices_Handler,
		},
		{
			MethodName: "UpdateMLServices",
			Handler:    _MLService_UpdateMLServices_Handler,
		},
		{
			MethodName: "ListMLServicesSizes",
			Handler:    _MLService_ListMLServicesSizes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml.proto",
}
