//
// DISCLAIMER
//
// Copyright 2021-2022 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: network.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb-managed/apis/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IsPrivateEndpointServiceFeatureAvailableRequest specifies the request parameters for the IsPrivateEndpointServiceFeatureAvailable method.
// At least 1 of the fields should contain a value.
type IsPrivateEndpointServiceFeatureAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the deployment (optional)
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Identifier of the organization (optional)
	// This field is ignored if a deployment_id is specified
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Identifier of the region (optional)
	// This field is ignored if a deployment_id is specified
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *IsPrivateEndpointServiceFeatureAvailableRequest) Reset() {
	*x = IsPrivateEndpointServiceFeatureAvailableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPrivateEndpointServiceFeatureAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPrivateEndpointServiceFeatureAvailableRequest) ProtoMessage() {}

func (x *IsPrivateEndpointServiceFeatureAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPrivateEndpointServiceFeatureAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsPrivateEndpointServiceFeatureAvailableRequest) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

func (x *IsPrivateEndpointServiceFeatureAvailableRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *IsPrivateEndpointServiceFeatureAvailableRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *IsPrivateEndpointServiceFeatureAvailableRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

// IsPrivateEndpointServiceFeatureAvailableResult specifies if the private endpoint service is enabled and available.
// If it is not available it contains a message why not.
type IsPrivateEndpointServiceFeatureAvailableResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set if the feature is enabled and available.
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	// Message why the feature is not available.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *IsPrivateEndpointServiceFeatureAvailableResult) Reset() {
	*x = IsPrivateEndpointServiceFeatureAvailableResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPrivateEndpointServiceFeatureAvailableResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPrivateEndpointServiceFeatureAvailableResult) ProtoMessage() {}

func (x *IsPrivateEndpointServiceFeatureAvailableResult) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPrivateEndpointServiceFeatureAvailableResult.ProtoReflect.Descriptor instead.
func (*IsPrivateEndpointServiceFeatureAvailableResult) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

func (x *IsPrivateEndpointServiceFeatureAvailableResult) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *IsPrivateEndpointServiceFeatureAvailableResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// PrivateEndpointService represents the service part of the private endpoint
type PrivateEndpointService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System identifier of the private endpoint service.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource.
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Name of the private endpoint service.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the private endpoint service.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The creation timestamp of the private endpoint service
	// This is a read-only value.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the private endpoint service
	// This is a read-only value.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this private endpoint service is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Identifier of the deployment
	// After creation, this value cannot be changed.
	DeploymentId string `protobuf:"bytes,10,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Zero or more DNS names to include in the Self Signed TLS certificate of the deployment.
	// This name should be resolvable in the private network (vNET/VPC) and can be used to connect
	// to the private endpoint to establish a SSL connection (where the name will be used during the handshake).
	AlternateDnsNames []string `protobuf:"bytes,11,rep,name=alternate_dns_names,json=alternateDnsNames,proto3" json:"alternate_dns_names,omitempty"`
	// If set, private DNS zone integration is enabled for this private endpoint service.
	// For GCP this bool is immutable, so can only be set during the creation.
	EnablePrivateDns bool `protobuf:"varint,12,opt,name=enable_private_dns,json=enablePrivateDns,proto3" json:"enable_private_dns,omitempty"`
	// Specific AKS setting.
	Aks *PrivateEndpointService_Aks `protobuf:"bytes,20,opt,name=aks,proto3" json:"aks,omitempty"`
	// Specific AWS setting.
	Aws *PrivateEndpointService_Aws `protobuf:"bytes,30,opt,name=aws,proto3" json:"aws,omitempty"`
	// Specific GCP setting.
	Gcp *PrivateEndpointService_Gcp `protobuf:"bytes,40,opt,name=gcp,proto3" json:"gcp,omitempty"`
	// Status of the private endpoint service.
	// All fields are read-only.
	Status *PrivateEndpointService_Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PrivateEndpointService) Reset() {
	*x = PrivateEndpointService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService) ProtoMessage() {}

func (x *PrivateEndpointService) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

func (x *PrivateEndpointService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrivateEndpointService) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PrivateEndpointService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateEndpointService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PrivateEndpointService) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PrivateEndpointService) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PrivateEndpointService) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *PrivateEndpointService) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *PrivateEndpointService) GetAlternateDnsNames() []string {
	if x != nil {
		return x.AlternateDnsNames
	}
	return nil
}

func (x *PrivateEndpointService) GetEnablePrivateDns() bool {
	if x != nil {
		return x.EnablePrivateDns
	}
	return false
}

func (x *PrivateEndpointService) GetAks() *PrivateEndpointService_Aks {
	if x != nil {
		return x.Aks
	}
	return nil
}

func (x *PrivateEndpointService) GetAws() *PrivateEndpointService_Aws {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *PrivateEndpointService) GetGcp() *PrivateEndpointService_Gcp {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *PrivateEndpointService) GetStatus() *PrivateEndpointService_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Specific AKS setting.
type PrivateEndpointService_Aks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subscription IDs of the client side, needed to auto-approve private endpoint connections.
	// After a private endpoint connection has been made this field cannot be modified anymore.
	ClientSubscriptionIds []string `protobuf:"bytes,1,rep,name=client_subscription_ids,json=clientSubscriptionIds,proto3" json:"client_subscription_ids,omitempty"`
}

func (x *PrivateEndpointService_Aks) Reset() {
	*x = PrivateEndpointService_Aks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_Aks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_Aks) ProtoMessage() {}

func (x *PrivateEndpointService_Aks) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_Aks.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_Aks) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PrivateEndpointService_Aks) GetClientSubscriptionIds() []string {
	if x != nil {
		return x.ClientSubscriptionIds
	}
	return nil
}

// Specific AWS principal setting.
type PrivateEndpointService_AwsPrincipals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 12 digit AWS Account Identifier.
	// When both user_names and role_names are not provided all principals can be used to setup the private endpoint (account principal).
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Optional user names (when at least one user name is provided the specified IAM user(s)) are able to setup the private endpoint.
	// It is allowed to specify both users and roles
	UserNames []string `protobuf:"bytes,2,rep,name=user_names,json=userNames,proto3" json:"user_names,omitempty"`
	// Optional role names (when at least one role name is provided the specified IAM role(s)) are able to setup the private endpoint.
	// It is allowed to specify both users and roles
	RoleNames []string `protobuf:"bytes,3,rep,name=role_names,json=roleNames,proto3" json:"role_names,omitempty"`
}

func (x *PrivateEndpointService_AwsPrincipals) Reset() {
	*x = PrivateEndpointService_AwsPrincipals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_AwsPrincipals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_AwsPrincipals) ProtoMessage() {}

func (x *PrivateEndpointService_AwsPrincipals) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_AwsPrincipals.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_AwsPrincipals) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PrivateEndpointService_AwsPrincipals) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PrivateEndpointService_AwsPrincipals) GetUserNames() []string {
	if x != nil {
		return x.UserNames
	}
	return nil
}

func (x *PrivateEndpointService_AwsPrincipals) GetRoleNames() []string {
	if x != nil {
		return x.RoleNames
	}
	return nil
}

// Specific AWS setting.
type PrivateEndpointService_Aws struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AWS principals of the client side, needed to auto-approve private endpoint connections.
	// After a private endpoint connection has been made this field cannot be modified anymore.
	AwsPrincipals []*PrivateEndpointService_AwsPrincipals `protobuf:"bytes,1,rep,name=aws_principals,json=awsPrincipals,proto3" json:"aws_principals,omitempty"`
}

func (x *PrivateEndpointService_Aws) Reset() {
	*x = PrivateEndpointService_Aws{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_Aws) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_Aws) ProtoMessage() {}

func (x *PrivateEndpointService_Aws) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_Aws.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_Aws) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 2}
}

func (x *PrivateEndpointService_Aws) GetAwsPrincipals() []*PrivateEndpointService_AwsPrincipals {
	if x != nil {
		return x.AwsPrincipals
	}
	return nil
}

// Specific GCP setting.
type PrivateEndpointService_Gcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The projects of the client side, needed to auto-approve private endpoint connections.
	// After a private endpoint connection has been made this field cannot be modified anymore.
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *PrivateEndpointService_Gcp) Reset() {
	*x = PrivateEndpointService_Gcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_Gcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_Gcp) ProtoMessage() {}

func (x *PrivateEndpointService_Gcp) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_Gcp.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_Gcp) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 3}
}

func (x *PrivateEndpointService_Gcp) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

// Specific AKS private endpoint connection status fields.
type PrivateEndpointService_AksPrivateEndpointConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the private endpoint connection
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the private endpoint connection
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The state of the private endpoint connection
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// The private endpoint identifier
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Reset() {
	*x = PrivateEndpointService_AksPrivateEndpointConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_AksPrivateEndpointConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_AksPrivateEndpointConnectionStatus) ProtoMessage() {}

func (x *PrivateEndpointService_AksPrivateEndpointConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_AksPrivateEndpointConnectionStatus.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_AksPrivateEndpointConnectionStatus) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 4}
}

func (x *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Specific AKS status fields.
// All fields are read-only.
type PrivateEndpointService_AksStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The alias generated by the Azure private link service needed by the client to setup the private endpoint.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// The status of the private endpoint connections.
	PrivateEndpointConnections []*PrivateEndpointService_AksPrivateEndpointConnectionStatus `protobuf:"bytes,2,rep,name=private_endpoint_connections,json=privateEndpointConnections,proto3" json:"private_endpoint_connections,omitempty"`
}

func (x *PrivateEndpointService_AksStatus) Reset() {
	*x = PrivateEndpointService_AksStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_AksStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_AksStatus) ProtoMessage() {}

func (x *PrivateEndpointService_AksStatus) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_AksStatus.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_AksStatus) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 5}
}

func (x *PrivateEndpointService_AksStatus) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PrivateEndpointService_AksStatus) GetPrivateEndpointConnections() []*PrivateEndpointService_AksPrivateEndpointConnectionStatus {
	if x != nil {
		return x.PrivateEndpointConnections
	}
	return nil
}

// Specific AWS private endpoint connection status fields.
type PrivateEndpointService_AwsPrivateEndpointConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner of the private endpoint connection
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The creation date the private endpoint connection
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The state of the private endpoint connection
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// The private endpoint identifier
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) Reset() {
	*x = PrivateEndpointService_AwsPrivateEndpointConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_AwsPrivateEndpointConnectionStatus) ProtoMessage() {}

func (x *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_AwsPrivateEndpointConnectionStatus.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_AwsPrivateEndpointConnectionStatus) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 6}
}

func (x *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Specific AWS status fields.
// All fields are read-only.
type PrivateEndpointService_AwsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service name generated by the AWS VPC endpoint service needed by the client to setup the VPC endpoint.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The availability zones information needed to setup the VPC endpoint.
	AvailabilityZones []string `protobuf:"bytes,2,rep,name=availability_zones,json=availabilityZones,proto3" json:"availability_zones,omitempty"`
	// The status of the private endpoint connections.
	PrivateEndpointConnections []*PrivateEndpointService_AwsPrivateEndpointConnectionStatus `protobuf:"bytes,3,rep,name=private_endpoint_connections,json=privateEndpointConnections,proto3" json:"private_endpoint_connections,omitempty"`
}

func (x *PrivateEndpointService_AwsStatus) Reset() {
	*x = PrivateEndpointService_AwsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_AwsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_AwsStatus) ProtoMessage() {}

func (x *PrivateEndpointService_AwsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_AwsStatus.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_AwsStatus) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 7}
}

func (x *PrivateEndpointService_AwsStatus) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PrivateEndpointService_AwsStatus) GetAvailabilityZones() []string {
	if x != nil {
		return x.AvailabilityZones
	}
	return nil
}

func (x *PrivateEndpointService_AwsStatus) GetPrivateEndpointConnections() []*PrivateEndpointService_AwsPrivateEndpointConnectionStatus {
	if x != nil {
		return x.PrivateEndpointConnections
	}
	return nil
}

// Specific GCP private endpoint connection status fields.
type PrivateEndpointService_GcpPrivateEndpointConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the private endpoint connection
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state of the private endpoint connection
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// The private endpoint identifier
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) Reset() {
	*x = PrivateEndpointService_GcpPrivateEndpointConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_GcpPrivateEndpointConnectionStatus) ProtoMessage() {}

func (x *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_GcpPrivateEndpointConnectionStatus.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_GcpPrivateEndpointConnectionStatus) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 8}
}

func (x *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Specific GCP status fields.
// All fields are read-only.
type PrivateEndpointService_GcpStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service attachment generated by the Google private service connect needed by the client to setup the private endpoint.
	ServiceAttachment string `protobuf:"bytes,1,opt,name=service_attachment,json=serviceAttachment,proto3" json:"service_attachment,omitempty"`
	// The status of the private endpoint connections.
	PrivateEndpointConnections []*PrivateEndpointService_GcpPrivateEndpointConnectionStatus `protobuf:"bytes,2,rep,name=private_endpoint_connections,json=privateEndpointConnections,proto3" json:"private_endpoint_connections,omitempty"`
}

func (x *PrivateEndpointService_GcpStatus) Reset() {
	*x = PrivateEndpointService_GcpStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_GcpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_GcpStatus) ProtoMessage() {}

func (x *PrivateEndpointService_GcpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_GcpStatus.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_GcpStatus) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 9}
}

func (x *PrivateEndpointService_GcpStatus) GetServiceAttachment() string {
	if x != nil {
		return x.ServiceAttachment
	}
	return ""
}

func (x *PrivateEndpointService_GcpStatus) GetPrivateEndpointConnections() []*PrivateEndpointService_GcpPrivateEndpointConnectionStatus {
	if x != nil {
		return x.PrivateEndpointConnections
	}
	return nil
}

// Status of the private endpoint service.
// All fields are read-only.
type PrivateEndpointService_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set when the private endpoint service is ready.
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	// The timestamp the ready flag has been set.
	ReadyAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ready_at,json=readyAt,proto3" json:"ready_at,omitempty"`
	// Set if this private endpoint service needs attention.
	NeedsAttention bool `protobuf:"varint,10,opt,name=needs_attention,json=needsAttention,proto3" json:"needs_attention,omitempty"`
	// Free text message describing the status.
	Message string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	// The private DNS status of the private endpoint service.
	PrivateDnsStatus string `protobuf:"bytes,12,opt,name=private_dns_status,json=privateDnsStatus,proto3" json:"private_dns_status,omitempty"`
	// The timestamp the private DNS status has been set.
	PrivateDnsReadyAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=private_dns_ready_at,json=privateDnsReadyAt,proto3" json:"private_dns_ready_at,omitempty"`
	// Specific AKS status fields.
	// All fields are read-only.
	Aks *PrivateEndpointService_AksStatus `protobuf:"bytes,20,opt,name=aks,proto3" json:"aks,omitempty"`
	// Specific AWS status fields.
	// All fields are read-only.
	Aws *PrivateEndpointService_AwsStatus `protobuf:"bytes,30,opt,name=aws,proto3" json:"aws,omitempty"`
	// Specific GCP status fields.
	// All fields are read-only.
	Gcp *PrivateEndpointService_GcpStatus `protobuf:"bytes,40,opt,name=gcp,proto3" json:"gcp,omitempty"`
}

func (x *PrivateEndpointService_Status) Reset() {
	*x = PrivateEndpointService_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEndpointService_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEndpointService_Status) ProtoMessage() {}

func (x *PrivateEndpointService_Status) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEndpointService_Status.ProtoReflect.Descriptor instead.
func (*PrivateEndpointService_Status) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2, 10}
}

func (x *PrivateEndpointService_Status) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *PrivateEndpointService_Status) GetReadyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadyAt
	}
	return nil
}

func (x *PrivateEndpointService_Status) GetNeedsAttention() bool {
	if x != nil {
		return x.NeedsAttention
	}
	return false
}

func (x *PrivateEndpointService_Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PrivateEndpointService_Status) GetPrivateDnsStatus() string {
	if x != nil {
		return x.PrivateDnsStatus
	}
	return ""
}

func (x *PrivateEndpointService_Status) GetPrivateDnsReadyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PrivateDnsReadyAt
	}
	return nil
}

func (x *PrivateEndpointService_Status) GetAks() *PrivateEndpointService_AksStatus {
	if x != nil {
		return x.Aks
	}
	return nil
}

func (x *PrivateEndpointService_Status) GetAws() *PrivateEndpointService_AwsStatus {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *PrivateEndpointService_Status) GetGcp() *PrivateEndpointService_GcpStatus {
	if x != nil {
		return x.Gcp
	}
	return nil
}

var File_network_proto protoreflect.FileDescriptor

var file_network_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x2f, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x68, 0x0a, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x14, 0x0a, 0x16, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x44,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x44, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x03, 0x61, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6b, 0x73, 0x52, 0x03, 0x61, 0x6b, 0x73, 0x12, 0x47,
	0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x77, 0x73, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x47, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x63, 0x70, 0x52, 0x03, 0x67, 0x63, 0x70,
	0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x3d, 0x0a, 0x03, 0x41, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x1a, 0x6c, 0x0a, 0x0d, 0x41, 0x77, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a,
	0x6d, 0x0a, 0x03, 0x41, 0x77, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x77, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x52,
	0x0d, 0x61, 0x77, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x1a, 0x21,
	0x0a, 0x03, 0x47, 0x63, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x1a, 0x80, 0x01, 0x0a, 0x22, 0x41, 0x6b, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0xba, 0x01, 0x0a, 0x09, 0x41, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x6b, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x22, 0x41, 0x77, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a,
	0xf6, 0x01, 0x0a, 0x09, 0x41, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12,
	0x96, 0x01, 0x0a, 0x1c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x77, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5e, 0x0a, 0x22, 0x47, 0x63, 0x70, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xd3, 0x01, 0x0a, 0x09, 0x47, 0x63, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x63, 0x70, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x80,
	0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x35, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x41, 0x74, 0x12, 0x4d, 0x0a, 0x03, 0x61, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03,
	0x61, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x61,
	0x77, 0x73, 0x12, 0x4d, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x67, 0x63,
	0x70, 0x32, 0xf7, 0x08, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xf9,
	0x01, 0x0a, 0x28, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4a, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x31, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd2, 0x01, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x31, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x01, 0x2a, 0x22, 0x41, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xaa,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x31, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x32, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_network_proto_rawDescOnce sync.Once
	file_network_proto_rawDescData = file_network_proto_rawDesc
)

func file_network_proto_rawDescGZIP() []byte {
	file_network_proto_rawDescOnce.Do(func() {
		file_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_proto_rawDescData)
	})
	return file_network_proto_rawDescData
}

var file_network_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_network_proto_goTypes = []interface{}{
	(*IsPrivateEndpointServiceFeatureAvailableRequest)(nil),           // 0: arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableRequest
	(*IsPrivateEndpointServiceFeatureAvailableResult)(nil),            // 1: arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableResult
	(*PrivateEndpointService)(nil),                                    // 2: arangodb.cloud.network.v1.PrivateEndpointService
	(*PrivateEndpointService_Aks)(nil),                                // 3: arangodb.cloud.network.v1.PrivateEndpointService.Aks
	(*PrivateEndpointService_AwsPrincipals)(nil),                      // 4: arangodb.cloud.network.v1.PrivateEndpointService.AwsPrincipals
	(*PrivateEndpointService_Aws)(nil),                                // 5: arangodb.cloud.network.v1.PrivateEndpointService.Aws
	(*PrivateEndpointService_Gcp)(nil),                                // 6: arangodb.cloud.network.v1.PrivateEndpointService.Gcp
	(*PrivateEndpointService_AksPrivateEndpointConnectionStatus)(nil), // 7: arangodb.cloud.network.v1.PrivateEndpointService.AksPrivateEndpointConnectionStatus
	(*PrivateEndpointService_AksStatus)(nil),                          // 8: arangodb.cloud.network.v1.PrivateEndpointService.AksStatus
	(*PrivateEndpointService_AwsPrivateEndpointConnectionStatus)(nil), // 9: arangodb.cloud.network.v1.PrivateEndpointService.AwsPrivateEndpointConnectionStatus
	(*PrivateEndpointService_AwsStatus)(nil),                          // 10: arangodb.cloud.network.v1.PrivateEndpointService.AwsStatus
	(*PrivateEndpointService_GcpPrivateEndpointConnectionStatus)(nil), // 11: arangodb.cloud.network.v1.PrivateEndpointService.GcpPrivateEndpointConnectionStatus
	(*PrivateEndpointService_GcpStatus)(nil),                          // 12: arangodb.cloud.network.v1.PrivateEndpointService.GcpStatus
	(*PrivateEndpointService_Status)(nil),                             // 13: arangodb.cloud.network.v1.PrivateEndpointService.Status
	(*timestamppb.Timestamp)(nil),                                     // 14: google.protobuf.Timestamp
	(*v1.Empty)(nil),                                                  // 15: arangodb.cloud.common.v1.Empty
	(*v1.IDOptions)(nil),                                              // 16: arangodb.cloud.common.v1.IDOptions
	(*v1.Version)(nil),                                                // 17: arangodb.cloud.common.v1.Version
}
var file_network_proto_depIdxs = []int32{
	14, // 0: arangodb.cloud.network.v1.PrivateEndpointService.created_at:type_name -> google.protobuf.Timestamp
	14, // 1: arangodb.cloud.network.v1.PrivateEndpointService.deleted_at:type_name -> google.protobuf.Timestamp
	3,  // 2: arangodb.cloud.network.v1.PrivateEndpointService.aks:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.Aks
	5,  // 3: arangodb.cloud.network.v1.PrivateEndpointService.aws:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.Aws
	6,  // 4: arangodb.cloud.network.v1.PrivateEndpointService.gcp:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.Gcp
	13, // 5: arangodb.cloud.network.v1.PrivateEndpointService.status:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.Status
	4,  // 6: arangodb.cloud.network.v1.PrivateEndpointService.Aws.aws_principals:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.AwsPrincipals
	7,  // 7: arangodb.cloud.network.v1.PrivateEndpointService.AksStatus.private_endpoint_connections:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.AksPrivateEndpointConnectionStatus
	14, // 8: arangodb.cloud.network.v1.PrivateEndpointService.AwsPrivateEndpointConnectionStatus.created_at:type_name -> google.protobuf.Timestamp
	9,  // 9: arangodb.cloud.network.v1.PrivateEndpointService.AwsStatus.private_endpoint_connections:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.AwsPrivateEndpointConnectionStatus
	11, // 10: arangodb.cloud.network.v1.PrivateEndpointService.GcpStatus.private_endpoint_connections:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.GcpPrivateEndpointConnectionStatus
	14, // 11: arangodb.cloud.network.v1.PrivateEndpointService.Status.ready_at:type_name -> google.protobuf.Timestamp
	14, // 12: arangodb.cloud.network.v1.PrivateEndpointService.Status.private_dns_ready_at:type_name -> google.protobuf.Timestamp
	8,  // 13: arangodb.cloud.network.v1.PrivateEndpointService.Status.aks:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.AksStatus
	10, // 14: arangodb.cloud.network.v1.PrivateEndpointService.Status.aws:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.AwsStatus
	12, // 15: arangodb.cloud.network.v1.PrivateEndpointService.Status.gcp:type_name -> arangodb.cloud.network.v1.PrivateEndpointService.GcpStatus
	15, // 16: arangodb.cloud.network.v1.NetworkService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	0,  // 17: arangodb.cloud.network.v1.NetworkService.IsPrivateEndpointServiceFeatureAvailable:input_type -> arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableRequest
	16, // 18: arangodb.cloud.network.v1.NetworkService.GetPrivateEndpointService:input_type -> arangodb.cloud.common.v1.IDOptions
	16, // 19: arangodb.cloud.network.v1.NetworkService.GetPrivateEndpointServiceByDeploymentID:input_type -> arangodb.cloud.common.v1.IDOptions
	2,  // 20: arangodb.cloud.network.v1.NetworkService.CreatePrivateEndpointService:input_type -> arangodb.cloud.network.v1.PrivateEndpointService
	2,  // 21: arangodb.cloud.network.v1.NetworkService.UpdatePrivateEndpointService:input_type -> arangodb.cloud.network.v1.PrivateEndpointService
	17, // 22: arangodb.cloud.network.v1.NetworkService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	1,  // 23: arangodb.cloud.network.v1.NetworkService.IsPrivateEndpointServiceFeatureAvailable:output_type -> arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableResult
	2,  // 24: arangodb.cloud.network.v1.NetworkService.GetPrivateEndpointService:output_type -> arangodb.cloud.network.v1.PrivateEndpointService
	2,  // 25: arangodb.cloud.network.v1.NetworkService.GetPrivateEndpointServiceByDeploymentID:output_type -> arangodb.cloud.network.v1.PrivateEndpointService
	2,  // 26: arangodb.cloud.network.v1.NetworkService.CreatePrivateEndpointService:output_type -> arangodb.cloud.network.v1.PrivateEndpointService
	15, // 27: arangodb.cloud.network.v1.NetworkService.UpdatePrivateEndpointService:output_type -> arangodb.cloud.common.v1.Empty
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_network_proto_init() }
func file_network_proto_init() {
	if File_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPrivateEndpointServiceFeatureAvailableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPrivateEndpointServiceFeatureAvailableResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_Aks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_AwsPrincipals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_Aws); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_Gcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_AksPrivateEndpointConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_AksStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_AwsPrivateEndpointConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_AwsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_GcpPrivateEndpointConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_GcpStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEndpointService_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_proto_goTypes,
		DependencyIndexes: file_network_proto_depIdxs,
		MessageInfos:      file_network_proto_msgTypes,
	}.Build()
	File_network_proto = out.File
	file_network_proto_rawDesc = nil
	file_network_proto_goTypes = nil
	file_network_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Checks if the private endpoint service feature is enabled and available.
	// Required permissions:
	// - network.privateendpointservice.get-feature on the deployment that is identified by the given deployment ID (if specified).
	// - network.privateendpointservice.get-feature on the organization that is identified by the given organization ID (if specified).
	// - None, authenticated only (if only the region ID is specified).
	IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, in *IsPrivateEndpointServiceFeatureAvailableRequest, opts ...grpc.CallOption) (*IsPrivateEndpointServiceFeatureAvailableResult, error)
	// Fetch a private endpoint service by its ID.
	// Required permissions:
	// - network.privateendpointservice.get on the private endpoint service.
	GetPrivateEndpointService(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Fetch a private endpoint service by the deployment ID.
	// Required permissions:
	// - network.privateendpointservice.get-by-deployment-id on the deployment that owns the private endpoint service.
	GetPrivateEndpointServiceByDeploymentID(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Create a new private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.create on the deployment that owns the private endpoint service.
	CreatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Update the private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.update on the private endpoint service.
	UpdatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*v1.Empty, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, in *IsPrivateEndpointServiceFeatureAvailableRequest, opts ...grpc.CallOption) (*IsPrivateEndpointServiceFeatureAvailableResult, error) {
	out := new(IsPrivateEndpointServiceFeatureAvailableResult)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/IsPrivateEndpointServiceFeatureAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetPrivateEndpointService(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetPrivateEndpointServiceByDeploymentID(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointServiceByDeploymentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) CreatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/CreatePrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/UpdatePrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Checks if the private endpoint service feature is enabled and available.
	// Required permissions:
	// - network.privateendpointservice.get-feature on the deployment that is identified by the given deployment ID (if specified).
	// - network.privateendpointservice.get-feature on the organization that is identified by the given organization ID (if specified).
	// - None, authenticated only (if only the region ID is specified).
	IsPrivateEndpointServiceFeatureAvailable(context.Context, *IsPrivateEndpointServiceFeatureAvailableRequest) (*IsPrivateEndpointServiceFeatureAvailableResult, error)
	// Fetch a private endpoint service by its ID.
	// Required permissions:
	// - network.privateendpointservice.get on the private endpoint service.
	GetPrivateEndpointService(context.Context, *v1.IDOptions) (*PrivateEndpointService, error)
	// Fetch a private endpoint service by the deployment ID.
	// Required permissions:
	// - network.privateendpointservice.get-by-deployment-id on the deployment that owns the private endpoint service.
	GetPrivateEndpointServiceByDeploymentID(context.Context, *v1.IDOptions) (*PrivateEndpointService, error)
	// Create a new private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.create on the deployment that owns the private endpoint service.
	CreatePrivateEndpointService(context.Context, *PrivateEndpointService) (*PrivateEndpointService, error)
	// Update the private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.update on the private endpoint service.
	UpdatePrivateEndpointService(context.Context, *PrivateEndpointService) (*v1.Empty, error)
}

// UnimplementedNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (*UnimplementedNetworkServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedNetworkServiceServer) IsPrivateEndpointServiceFeatureAvailable(context.Context, *IsPrivateEndpointServiceFeatureAvailableRequest) (*IsPrivateEndpointServiceFeatureAvailableResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPrivateEndpointServiceFeatureAvailable not implemented")
}
func (*UnimplementedNetworkServiceServer) GetPrivateEndpointService(context.Context, *v1.IDOptions) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateEndpointService not implemented")
}
func (*UnimplementedNetworkServiceServer) GetPrivateEndpointServiceByDeploymentID(context.Context, *v1.IDOptions) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateEndpointServiceByDeploymentID not implemented")
}
func (*UnimplementedNetworkServiceServer) CreatePrivateEndpointService(context.Context, *PrivateEndpointService) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateEndpointService not implemented")
}
func (*UnimplementedNetworkServiceServer) UpdatePrivateEndpointService(context.Context, *PrivateEndpointService) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivateEndpointService not implemented")
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_IsPrivateEndpointServiceFeatureAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPrivateEndpointServiceFeatureAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).IsPrivateEndpointServiceFeatureAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/IsPrivateEndpointServiceFeatureAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).IsPrivateEndpointServiceFeatureAvailable(ctx, req.(*IsPrivateEndpointServiceFeatureAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetPrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetPrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetPrivateEndpointService(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetPrivateEndpointServiceByDeploymentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetPrivateEndpointServiceByDeploymentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointServiceByDeploymentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetPrivateEndpointServiceByDeploymentID(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_CreatePrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateEndpointService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).CreatePrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/CreatePrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).CreatePrivateEndpointService(ctx, req.(*PrivateEndpointService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdatePrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateEndpointService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdatePrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/UpdatePrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdatePrivateEndpointService(ctx, req.(*PrivateEndpointService))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.network.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _NetworkService_GetAPIVersion_Handler,
		},
		{
			MethodName: "IsPrivateEndpointServiceFeatureAvailable",
			Handler:    _NetworkService_IsPrivateEndpointServiceFeatureAvailable_Handler,
		},
		{
			MethodName: "GetPrivateEndpointService",
			Handler:    _NetworkService_GetPrivateEndpointService_Handler,
		},
		{
			MethodName: "GetPrivateEndpointServiceByDeploymentID",
			Handler:    _NetworkService_GetPrivateEndpointServiceByDeploymentID_Handler,
		},
		{
			MethodName: "CreatePrivateEndpointService",
			Handler:    _NetworkService_CreatePrivateEndpointService_Handler,
		},
		{
			MethodName: "UpdatePrivateEndpointService",
			Handler:    _NetworkService_UpdatePrivateEndpointService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
